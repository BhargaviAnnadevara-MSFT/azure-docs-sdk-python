### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.monitor.v2019_10_17.models.AzureMonitorPrivateLinkScope
  fullName: azure.mgmt.monitor.v2019_10_17.models.AzureMonitorPrivateLinkScope
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: msrest.serialization.Model
    type: azure.mgmt.monitor.v2019_10_17.models._models_py3.PrivateLinkScopesResource
  langs:
  - python
  module: azure.mgmt.monitor.v2019_10_17.models
  name: AzureMonitorPrivateLinkScope
  summary: 'An Azure Monitor PrivateLinkScope definition.


    Variables are only populated by the server, and will be ignored when

    sending a request.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: 'AzureMonitorPrivateLinkScope(*, location: str, tags=None, **kwargs)
      -> None'
    parameters:
    - description: Required. Resource location
      id: location
      type:
      - str
    - description: Resource tags
      id: tags
      type:
      - dict[str, str]
    variables:
    - description: Azure resource Id
      id: id
      type:
      - str
    - description: Azure resource name
      id: name
      type:
      - str
    - description: Azure resource type
      id: type
      type:
      - str
    - description: 'Current state of this PrivateLinkScope: whether

        or not is has been provisioned within the resource group it is defined.

        Users cannot change this value but are able to read from it. Values will

        include Provisioning ,Succeeded, Canceled and Failed.'
      id: provisioning_state
      type:
      - str
  type: class
  uid: azure.mgmt.monitor.v2019_10_17.models.AzureMonitorPrivateLinkScope
references:
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
