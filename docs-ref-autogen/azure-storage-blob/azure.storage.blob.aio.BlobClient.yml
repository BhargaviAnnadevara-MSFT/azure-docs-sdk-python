### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.aio.BlobClient.abort_copy
  - azure.storage.blob.aio.BlobClient.acquire_lease
  - azure.storage.blob.aio.BlobClient.append_block
  - azure.storage.blob.aio.BlobClient.append_block_from_url
  - azure.storage.blob.aio.BlobClient.clear_page
  - azure.storage.blob.aio.BlobClient.commit_block_list
  - azure.storage.blob.aio.BlobClient.create_append_blob
  - azure.storage.blob.aio.BlobClient.create_page_blob
  - azure.storage.blob.aio.BlobClient.create_snapshot
  - azure.storage.blob.aio.BlobClient.delete_blob
  - azure.storage.blob.aio.BlobClient.download_blob
  - azure.storage.blob.aio.BlobClient.get_account_information
  - azure.storage.blob.aio.BlobClient.get_blob_properties
  - azure.storage.blob.aio.BlobClient.get_block_list
  - azure.storage.blob.aio.BlobClient.get_page_ranges
  - azure.storage.blob.aio.BlobClient.resize_blob
  - azure.storage.blob.aio.BlobClient.set_blob_metadata
  - azure.storage.blob.aio.BlobClient.set_http_headers
  - azure.storage.blob.aio.BlobClient.set_premium_page_blob_tier
  - azure.storage.blob.aio.BlobClient.set_sequence_number
  - azure.storage.blob.aio.BlobClient.set_standard_blob_tier
  - azure.storage.blob.aio.BlobClient.stage_block
  - azure.storage.blob.aio.BlobClient.stage_block_from_url
  - azure.storage.blob.aio.BlobClient.start_copy_from_url
  - azure.storage.blob.aio.BlobClient.undelete_blob
  - azure.storage.blob.aio.BlobClient.upload_blob
  - azure.storage.blob.aio.BlobClient.upload_page
  - azure.storage.blob.aio.BlobClient.upload_pages_from_url
  class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.blob._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.blob._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.blob._blob_client.BlobClient
  langs:
  - python
  module: azure.storage.blob.aio
  name: BlobClient
  summary: A client to interact with a specific blob, although that blob may not yet
    exist.
  syntax:
    content: BlobClient(account_url, container_name, blob_name, snapshot=None, credential=None,
      **kwargs)
    parameters:
    - description: 'The URI to the storage account. In order to create a client given
        the full URI to the blob,

        use the <xref:azure.storage.blob.aio.from_blob_url> classmethod.'
      id: account_url
      type:
      - str
    - description: The container name for the blob.
      id: container_name
      type:
      - str
    - description: 'The name of the blob with which to interact. If specified, this
        value will override

        a blob value specified in the blob URL.'
      id: blob_name
      type:
      - str
    - description: 'The optional blob snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:azure.storage.blob.aio.BlobClient.create_snapshot>.'
      id: snapshot
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
  type: class
  uid: azure.storage.blob.aio.BlobClient
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.abort_copy
  langs:
  - python
  module: azure.storage.blob.aio
  name: abort_copy(copy_id, **kwargs)
  summary: 'Abort an ongoing copy operation.


    This will leave a destination blob with zero length and full metadata.

    This will raise an error if the copy operation has already ended.'
  syntax:
    content: abort_copy(copy_id, **kwargs)
    parameters:
    - description: 'The copy operation to abort. This can be either an ID, or an

        instance of BlobProperties.'
      id: copy_id
      type:
      - str
      - azure.storage.blob.BlobProperties
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobClient.abort_copy
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.acquire_lease
  langs:
  - python
  module: azure.storage.blob.aio
  name: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  summary: 'Requests a new lease.


    If the blob does not have an active lease, the Blob

    Service creates a lease on the blob and returns a new lease.'
  syntax:
    content: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
    parameters:
    - description: 'Specifies the duration of the lease, in seconds, or negative one

        (-1) for a lease that never expires. A non-infinite lease can be

        between 15 and 60 seconds. A lease duration cannot be changed

        using renew or change. Default is -1 (infinite lease).'
      id: lease_duration
      type:
      - int
    - description: 'Proposed lease ID, in a GUID string format. The Blob Service

        returns 400 (Invalid request) if the proposed lease ID is not

        in the correct format.'
      id: lease_id
      type:
      - str
    return:
      description: A BlobLeaseClient object.
      type:
      - azure.storage.blob.aio.BlobLeaseClient
  type: method
  uid: azure.storage.blob.aio.BlobClient.acquire_lease
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.append_block
  langs:
  - python
  module: azure.storage.blob.aio
  name: append_block(data, length=None, **kwargs)
  summary: Commits a new block of data to the end of the existing append blob.
  syntax:
    content: append_block(data, length=None, **kwargs)
    parameters:
    - description: Content of the block.
      id: data
    - description: Size of the block in bytes.
      id: length
      type:
      - int
    return:
      description: Blob-updated property dict (Etag, last modified, append offset,
        committed block count).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.blob.aio.BlobClient.append_block
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.append_block_from_url
  langs:
  - python
  module: azure.storage.blob.aio
  name: append_block_from_url(copy_source_url, source_offset=None, source_length=None,
    **kwargs)
  summary: Creates a new block to be committed as part of a blob, where the contents
    are read from a source url.
  syntax:
    content: append_block_from_url(copy_source_url, source_offset=None, source_length=None,
      **kwargs)
    parameters:
    - description: 'The URL of the source data. It can point to any Azure Blob or
        File, that is either public or has a

        shared access signature attached.'
      id: copy_source_url
      type:
      - str
    - description: This indicates the start of the range of bytes(inclusive) that
        has to be taken from the copy source.
      id: source_offset
      type:
      - int
    - description: This indicates the end of the range of bytes that has to be taken
        from the copy source.
      id: source_length
      type:
      - int
  type: method
  uid: azure.storage.blob.aio.BlobClient.append_block_from_url
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.clear_page
  langs:
  - python
  module: azure.storage.blob.aio
  name: clear_page(offset, length, **kwargs)
  summary: Clears a range of pages.
  syntax:
    content: clear_page(offset, length, **kwargs)
    parameters:
    - description: 'Start of byte range to use for writing to a section of the blob.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length  must be a modulus of

        512.'
      id: offset
      type:
      - int
    - description: 'Number of bytes to use for writing to a section of the blob.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length must be a modulus of

        512.'
      id: length
      type:
      - int
    return:
      description: Blob-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.blob.aio.BlobClient.clear_page
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.commit_block_list
  langs:
  - python
  module: azure.storage.blob.aio
  name: commit_block_list(block_list, content_settings=None, metadata=None, **kwargs)
  summary: 'The Commit Block List operation writes a blob by specifying the list of

    block IDs that make up the blob.'
  syntax:
    content: commit_block_list(block_list, content_settings=None, metadata=None, **kwargs)
    parameters:
    - description: List of Blockblobs.
      id: block_list
      type:
      - list
    - description: 'ContentSettings object used to set blob properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      type:
      - azure.storage.blob.ContentSettings
    - description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict[str, str]
    return:
      description: Blob-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.blob.aio.BlobClient.commit_block_list
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.create_append_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: create_append_blob(content_settings=None, metadata=None, **kwargs)
  summary: Creates a new Append Blob.
  syntax:
    content: create_append_blob(content_settings=None, metadata=None, **kwargs)
    parameters:
    - description: 'ContentSettings object used to set blob properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      type:
      - azure.storage.blob.ContentSettings
    - description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    return:
      description: Blob-updated property dict (Etag and last modified).
      type:
      - dict[str, Any]
  type: method
  uid: azure.storage.blob.aio.BlobClient.create_append_blob
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.create_page_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: create_page_blob(size, content_settings=None, metadata=None, premium_page_blob_tier=None,
    **kwargs)
  summary: Creates a new Page Blob of the specified size.
  syntax:
    content: create_page_blob(size, content_settings=None, metadata=None, premium_page_blob_tier=None,
      **kwargs)
    parameters:
    - description: 'This specifies the maximum size for the page blob, up to 1 TB.

        The page blob size must be aligned to a 512-byte boundary.'
      id: size
      type:
      - int
    - description: 'ContentSettings object used to set blob properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      type:
      - azure.storage.blob.ContentSettings
    - description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    - description: 'A page blob tier value to set the blob to. The tier correlates
        to the size of the

        blob and number of allowed IOPS. This is only applicable to page blobs on

        premium storage accounts.'
      id: premium_page_blob_tier
      type:
      - azure.storage.blob.PremiumPageBlobTier
    return:
      description: Blob-updated property dict (Etag and last modified).
      type:
      - dict[str, Any]
  type: method
  uid: azure.storage.blob.aio.BlobClient.create_page_blob
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.create_snapshot
  langs:
  - python
  module: azure.storage.blob.aio
  name: create_snapshot(metadata=None, **kwargs)
  summary: 'Creates a snapshot of the blob.


    A snapshot is a read-only version of a blob that''s taken at a point in time.

    It can be read, copied, or deleted, but not modified. Snapshots provide a way

    to back up a blob as it appears at a moment in time.


    A snapshot of a blob has the same name as the base blob from which the snapshot

    is taken, with a DateTime value appended to indicate the time at which the

    snapshot was taken.'
  syntax:
    content: create_snapshot(metadata=None, **kwargs)
    parameters:
    - description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    return:
      description: Blob-updated property dict (Snapshot ID, Etag, and last modified).
      type:
      - dict[str, Any]
  type: method
  uid: azure.storage.blob.aio.BlobClient.create_snapshot
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.delete_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: delete_blob(delete_snapshots=False, **kwargs)
  summary: 'Marks the specified blob for deletion.


    The blob is later deleted during garbage collection.

    Note that in order to delete a blob, you must delete all of its

    snapshots. You can delete both at the same time with the delete_blob()

    operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blob

    and retains the blob for a specified number of days.

    After the specified number of days, the blob''s data is removed from the service
    during garbage collection.

    Soft deleted blob is accessible through <xref:azure.storage.blob.aio.ContainerClient.list_blobs>
    specifying *include=[''deleted'']*

    option. Soft-deleted blob can be restored using <xref:azure.storage.blob.aio.undelete>
    operation.'
  syntax:
    content: delete_blob(delete_snapshots=False, **kwargs)
    parameters:
    - description: "Required if the blob has associated snapshots. Values include:\n\
        \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
        \ the blob along with all snapshots."
      id: delete_snapshots
      type:
      - str
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobClient.delete_blob
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.download_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: download_blob(offset=None, length=None, **kwargs)
  summary: Downloads a blob to a stream with automatic chunking.
  syntax:
    content: download_blob(offset=None, length=None, **kwargs)
    parameters:
    - description: 'Start of byte range to use for downloading a section of the blob.

        Must be set if length is provided.'
      id: offset
      type:
      - int
    - description: 'Number of bytes to read from the stream. This is optional, but

        should be supplied for optimal performance.'
      id: length
      type:
      - int
    return:
      description: A iterable data generator (stream)
      type:
      - azure.storage.blob.StorageStreamDownloader
  type: method
  uid: azure.storage.blob.aio.BlobClient.download_blob
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.get_account_information
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_account_information(**kwargs)
  summary: 'Gets information related to the storage account in which the blob resides.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  syntax:
    content: get_account_information(**kwargs)
    return:
      description: A dict of account information (SKU and account type).
      type:
      - dict(str, str)
  type: method
  uid: azure.storage.blob.aio.BlobClient.get_account_information
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.get_blob_properties
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_blob_properties(**kwargs)
  summary: 'Returns all user-defined metadata, standard HTTP properties, and

    system properties for the blob. It does not return the content of the blob.'
  syntax:
    content: get_blob_properties(**kwargs)
    return:
      description: BlobProperties
      type:
      - azure.storage.blob.BlobProperties
  type: method
  uid: azure.storage.blob.aio.BlobClient.get_blob_properties
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.get_block_list
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_block_list(block_list_type='committed', **kwargs)
  summary: 'The Get Block List operation retrieves the list of blocks that have

    been uploaded as part of a block blob.'
  syntax:
    content: get_block_list(block_list_type='committed', **kwargs)
    parameters:
    - description: 'Specifies whether to return the list of committed

        blocks, the list of uncommitted blocks, or both lists together.

        Possible values include: ''committed'', ''uncommitted'', ''all'''
      id: block_list_type
      type:
      - str
    return:
      description: A tuple of two lists - committed and uncommitted blocks
      type:
      - tuple(list(azure.storage.blob.BlobBlock), list(azure.storage.blob.BlobBlock))
  type: method
  uid: azure.storage.blob.aio.BlobClient.get_block_list
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.get_page_ranges
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_page_ranges(offset=None, length=None, previous_snapshot_diff=None, **kwargs)
  summary: 'Returns the list of valid page ranges for a Page Blob or snapshot

    of a page blob.'
  syntax:
    content: get_page_ranges(offset=None, length=None, previous_snapshot_diff=None,
      **kwargs)
    parameters:
    - description: 'Start of byte range to use for getting valid page ranges.

        If no length is given, all bytes after the offset will be searched.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length must be a modulus of

        512.'
      id: offset
      type:
      - int
    - description: 'Number of bytes to use for getting valid page ranges.

        If length is given, offset must be provided.

        This range will return valid page ranges from the offset start up to

        the specified length.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length must be a modulus of

        512.'
      id: length
      type:
      - int
    - description: 'The snapshot diff parameter that contains an opaque DateTime value
        that

        specifies a previous blob snapshot to be compared

        against a more recent snapshot or the current blob.'
      id: previous_snapshot_diff
      type:
      - str
    return:
      description: 'A tuple of two lists of page ranges as dictionaries with ''start''
        and ''end'' keys.

        The first element are filled page ranges, the 2nd element is cleared page
        ranges.'
      type:
      - tuple(list(dict(str, str), list(dict(str, str))
  type: method
  uid: azure.storage.blob.aio.BlobClient.get_page_ranges
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.resize_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: resize_blob(size, **kwargs)
  summary: 'Resizes a page blob to the specified size.


    If the specified value is less than the current size of the blob,

    then all pages above the specified value are cleared.'
  syntax:
    content: resize_blob(size, **kwargs)
    parameters:
    - description: 'Size used to resize blob. Maximum size for a page blob is up to
        1 TB.

        The page blob size must be aligned to a 512-byte boundary.'
      id: size
      type:
      - int
    return:
      description: Blob-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.blob.aio.BlobClient.resize_blob
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.set_blob_metadata
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_blob_metadata(metadata=None, **kwargs)
  summary: Sets user-defined metadata for the blob as one or more name-value pairs.
  syntax:
    content: set_blob_metadata(metadata=None, **kwargs)
    parameters:
    - description: 'Dict containing name and value pairs. Each call to this operation

        replaces all existing metadata attached to the blob. To remove all

        metadata from the blob, call this operation with no metadata headers.'
      id: metadata
      type:
      - dict(str, str)
    return:
      description: Blob-updated property dict (Etag and last modified)
  type: method
  uid: azure.storage.blob.aio.BlobClient.set_blob_metadata
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.set_http_headers
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_http_headers(content_settings=None, **kwargs)
  summary: 'Sets system properties on the blob.


    If one property is set for the content_settings, all properties will be overridden.'
  syntax:
    content: set_http_headers(content_settings=None, **kwargs)
    parameters:
    - description: 'ContentSettings object used to set blob properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      type:
      - azure.storage.blob.ContentSettings
    return:
      description: Blob-updated property dict (Etag and last modified)
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.blob.aio.BlobClient.set_http_headers
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.set_premium_page_blob_tier
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_premium_page_blob_tier(premium_page_blob_tier, **kwargs)
  summary: Sets the page blob tiers on the blob. This API is only supported for page
    blobs on premium accounts.
  syntax:
    content: set_premium_page_blob_tier(premium_page_blob_tier, **kwargs)
    parameters:
    - description: 'A page blob tier value to set the blob to. The tier correlates
        to the size of the

        blob and number of allowed IOPS. This is only applicable to page blobs on

        premium storage accounts.'
      id: premium_page_blob_tier
      type:
      - azure.storage.blob.PremiumPageBlobTier
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobClient.set_premium_page_blob_tier
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.set_sequence_number
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_sequence_number(sequence_number_action, sequence_number=None, **kwargs)
  summary: Sets the blob sequence number.
  syntax:
    content: set_sequence_number(sequence_number_action, sequence_number=None, **kwargs)
    parameters:
    - description: 'This property indicates how the service should modify the blob''s
        sequence

        number. See <xref:azure.storage.blob.SequenceNumberAction> for more information.'
      id: sequence_number_action
      type:
      - str
    - description: 'This property sets the blob''s sequence number. The sequence number
        is a

        user-controlled property that you can use to track requests and manage

        concurrency issues.'
      id: sequence_number
      type:
      - str
    return:
      description: Blob-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.blob.aio.BlobClient.set_sequence_number
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.set_standard_blob_tier
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_standard_blob_tier(standard_blob_tier, **kwargs)
  summary: 'This operation sets the tier on a block blob.


    A block blob''s tier determines Hot/Cool/Archive storage type.

    This operation does not update the blob''s ETag.'
  syntax:
    content: set_standard_blob_tier(standard_blob_tier, **kwargs)
    parameters:
    - description: 'Indicates the tier to be set on the blob. Options include ''Hot'',
        ''Cool'',

        ''Archive''. The hot tier is optimized for storing data that is accessed

        frequently. The cool storage tier is optimized for storing data that

        is infrequently accessed and stored for at least a month. The archive

        tier is optimized for storing data that is rarely accessed and stored

        for at least six months with flexible latency requirements.'
      id: standard_blob_tier
      type:
      - str
      - azure.storage.blob.StandardBlobTier
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobClient.set_standard_blob_tier
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.stage_block
  langs:
  - python
  module: azure.storage.blob.aio
  name: stage_block(block_id, data, length=None, **kwargs)
  summary: Creates a new block to be committed as part of a blob.
  syntax:
    content: stage_block(block_id, data, length=None, **kwargs)
    parameters:
    - description: 'A valid Base64 string value that identifies the

        block. Prior to encoding, the string must be less than or equal to 64

        bytes in size. For a given blob, the length of the value specified for

        the block_id parameter must be the same size for each block.'
      id: block_id
      type:
      - str
    - description: The blob data.
      id: data
    - description: Size of the block.
      id: length
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobClient.stage_block
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.stage_block_from_url
  langs:
  - python
  module: azure.storage.blob.aio
  name: stage_block_from_url(block_id, source_url, source_offset=None, source_length=None,
    source_content_md5=None, **kwargs)
  summary: 'Creates a new block to be committed as part of a blob where

    the contents are read from a URL.'
  syntax:
    content: stage_block_from_url(block_id, source_url, source_offset=None, source_length=None,
      source_content_md5=None, **kwargs)
    parameters:
    - description: 'A valid Base64 string value that identifies the

        block. Prior to encoding, the string must be less than or equal to 64

        bytes in size. For a given blob, the length of the value specified for

        the block_id parameter must be the same size for each block.'
      id: block_id
      type:
      - str
    - description: The URL.
      id: source_url
      type:
      - str
    - description: 'Start of byte range to use for the block.

        Must be set if source length is provided.'
      id: source_offset
      type:
      - int
    - description: The size of the block in bytes.
      id: source_length
      type:
      - int
    - description: 'Specify the md5 calculated for the range of

        bytes that must be read from the copy source.'
      id: source_content_md5
      type:
      - bytearray
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobClient.stage_block_from_url
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.start_copy_from_url
  langs:
  - python
  module: azure.storage.blob.aio
  name: start_copy_from_url(source_url, metadata=None, incremental_copy=False, **kwargs)
  summary: 'Copies a blob asynchronously.


    This operation returns a copy operation

    object that can be used to wait on the completion of the operation,

    as well as check status or abort the copy operation.

    The Blob service copies blobs on a best-effort basis.


    The source blob for a copy operation may be a block blob, an append blob,

    or a page blob. If the destination blob already exists, it must be of the

    same blob type as the source blob. Any existing destination blob will be

    overwritten. The destination blob cannot be modified while a copy operation

    is in progress.


    When copying from a page blob, the Blob service creates a destination page

    blob of the source blob''s length, initially containing all zeroes. Then

    the source page ranges are enumerated, and non-empty ranges are copied.


    For a block blob or an append blob, the Blob service creates a committed

    blob of zero length before returning from this operation. When copying

    from a block blob, all committed blocks and their block IDs are copied.

    Uncommitted blocks are not copied. At the end of the copy operation, the

    destination blob will have the same committed block count as the source.


    When copying from an append blob, all committed blocks are copied. At the

    end of the copy operation, the destination blob will have the same committed

    block count as the source.


    For all blob types, you can call status() on the returned polling object

    to check the status of the copy operation, or wait() to block until the

    operation is complete. The final blob will be committed when the copy completes.'
  syntax:
    content: start_copy_from_url(source_url, metadata=None, incremental_copy=False,
      **kwargs)
    parameters:
    - description: 'A URL of up to 2 KB in length that specifies a file or blob.

        The value should be URL-encoded as it would appear in a request URI.

        If the source is in another account, the source must either be public

        or must be authenticated via a shared access signature. If the source

        is public, no authentication is required.

        Examples:

        [https://myaccount.blob.core.windows.net/mycontainer/myblob](https://myaccount.blob.core.windows.net/mycontainer/myblob)


        [https://myaccount.blob.core.windows.net/mycontainer/myblob](https://myaccount.blob.core.windows.net/mycontainer/myblob)?snapshot=<DateTime>


        [https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken](https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken)'
      id: source_url
      type:
      - str
    - description: 'Name-value pairs associated with the blob as metadata. If no name-value

        pairs are specified, the operation will copy the metadata from the

        source blob or file to the destination blob. If one or more name-value

        pairs are specified, the destination blob is created with the specified

        metadata, and metadata is not copied from the source blob or file.'
      id: metadata
      type:
      - dict(str, str)
    - description: 'Copies the snapshot of the source page blob to a destination page
        blob.

        The snapshot is copied such that only the differential changes between

        the previously copied snapshot are transferred to the destination.

        The copied snapshots are complete copies of the original snapshot and

        can be read or copied from as usual. Defaults to False.'
      id: incremental_copy
      type:
      - bool
    return:
      description: A dictionary of copy properties (etag, last_modified, copy_id,
        copy_status).
      type:
      - dict[str, str
      - datetime.datetime]
  type: method
  uid: azure.storage.blob.aio.BlobClient.start_copy_from_url
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.undelete_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: undelete_blob(**kwargs)
  summary: 'Restores soft-deleted blobs or snapshots.


    Operation will only be successful if used within the specified number of days

    set in the delete retention policy.'
  syntax:
    content: undelete_blob(**kwargs)
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobClient.undelete_blob
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.upload_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: 'upload_blob(data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>, length=None,
    metadata=None, **kwargs)'
  summary: Creates a new blob from a data source with automatic chunking.
  syntax:
    content: 'upload_blob(data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>, length=None,
      metadata=None, **kwargs)'
    parameters:
    - description: The blob data to upload.
      id: data
    - description: 'The type of the blob. This can be

        either BlockBlob, PageBlob or AppendBlob. The default value is BlockBlob.'
      id: blob_type
      type:
      - azure.storage.blob.BlobType
    - description: 'Number of bytes to read from the stream. This is optional, but

        should be supplied for optimal performance.'
      id: length
      type:
      - int
    - description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    return:
      description: Blob-updated property dict (Etag and last modified)
      type:
      - dict[str, Any]
  type: method
  uid: azure.storage.blob.aio.BlobClient.upload_blob
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.upload_page
  langs:
  - python
  module: azure.storage.blob.aio
  name: upload_page(page, offset, length, **kwargs)
  summary: The Upload Pages operation writes a range of pages to a page blob.
  syntax:
    content: upload_page(page, offset, length, **kwargs)
    parameters:
    - description: Content of the page.
      id: page
      type:
      - bytes
    - description: 'Start of byte range to use for writing to a section of the blob.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length must be a modulus of

        512.'
      id: offset
      type:
      - int
    - description: 'Number of bytes to use for writing to a section of the blob.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length must be a modulus of

        512.'
      id: length
      type:
      - int
    return:
      description: Blob-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.blob.aio.BlobClient.upload_page
- class: azure.storage.blob.aio.BlobClient
  fullName: azure.storage.blob.aio.BlobClient.upload_pages_from_url
  langs:
  - python
  module: azure.storage.blob.aio
  name: upload_pages_from_url(source_url, offset, length, source_offset, **kwargs)
  summary: 'The Upload Pages operation writes a range of pages to a page blob where

    the contents are read from a URL.'
  syntax:
    content: upload_pages_from_url(source_url, offset, length, source_offset, **kwargs)
    parameters:
    - description: 'The URL of the source data. It can point to any Azure Blob or
        File, that is either public or has a

        shared access signature attached.'
      id: source_url
      type:
      - str
    - description: 'Start of byte range to use for writing to a section of the blob.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length  must be a modulus of

        512.'
      id: offset
      type:
      - int
    - description: 'Number of bytes to use for writing to a section of the blob.

        Pages must be aligned with 512-byte boundaries, the start offset

        must be a modulus of 512 and the length must be a modulus of

        512.'
      id: length
      type:
      - int
    - description: 'This indicates the start of the range of bytes(inclusive) that
        has to be taken from the copy source.

        The service will read the same number of bytes as the destination range (length-offset).'
      id: source_offset
      type:
      - int
  type: method
  uid: azure.storage.blob.aio.BlobClient.upload_pages_from_url
references:
- fullName: azure.storage.blob.aio.BlobClient.abort_copy
  isExternal: false
  name: abort_copy(copy_id, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.abort_copy
- fullName: azure.storage.blob.aio.BlobClient.acquire_lease
  isExternal: false
  name: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.acquire_lease
- fullName: azure.storage.blob.aio.BlobClient.append_block
  isExternal: false
  name: append_block(data, length=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.append_block
- fullName: azure.storage.blob.aio.BlobClient.append_block_from_url
  isExternal: false
  name: append_block_from_url(copy_source_url, source_offset=None, source_length=None,
    **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.append_block_from_url
- fullName: azure.storage.blob.aio.BlobClient.clear_page
  isExternal: false
  name: clear_page(offset, length, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.clear_page
- fullName: azure.storage.blob.aio.BlobClient.commit_block_list
  isExternal: false
  name: commit_block_list(block_list, content_settings=None, metadata=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.commit_block_list
- fullName: azure.storage.blob.aio.BlobClient.create_append_blob
  isExternal: false
  name: create_append_blob(content_settings=None, metadata=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.create_append_blob
- fullName: azure.storage.blob.aio.BlobClient.create_page_blob
  isExternal: false
  name: create_page_blob(size, content_settings=None, metadata=None, premium_page_blob_tier=None,
    **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.create_page_blob
- fullName: azure.storage.blob.aio.BlobClient.create_snapshot
  isExternal: false
  name: create_snapshot(metadata=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.create_snapshot
- fullName: azure.storage.blob.aio.BlobClient.delete_blob
  isExternal: false
  name: delete_blob(delete_snapshots=False, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.delete_blob
- fullName: azure.storage.blob.aio.BlobClient.download_blob
  isExternal: false
  name: download_blob(offset=None, length=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.download_blob
- fullName: azure.storage.blob.aio.BlobClient.get_account_information
  isExternal: false
  name: get_account_information(**kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.get_account_information
- fullName: azure.storage.blob.aio.BlobClient.get_blob_properties
  isExternal: false
  name: get_blob_properties(**kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.get_blob_properties
- fullName: azure.storage.blob.aio.BlobClient.get_block_list
  isExternal: false
  name: get_block_list(block_list_type='committed', **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.get_block_list
- fullName: azure.storage.blob.aio.BlobClient.get_page_ranges
  isExternal: false
  name: get_page_ranges(offset=None, length=None, previous_snapshot_diff=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.get_page_ranges
- fullName: azure.storage.blob.aio.BlobClient.resize_blob
  isExternal: false
  name: resize_blob(size, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.resize_blob
- fullName: azure.storage.blob.aio.BlobClient.set_blob_metadata
  isExternal: false
  name: set_blob_metadata(metadata=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.set_blob_metadata
- fullName: azure.storage.blob.aio.BlobClient.set_http_headers
  isExternal: false
  name: set_http_headers(content_settings=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.set_http_headers
- fullName: azure.storage.blob.aio.BlobClient.set_premium_page_blob_tier
  isExternal: false
  name: set_premium_page_blob_tier(premium_page_blob_tier, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.set_premium_page_blob_tier
- fullName: azure.storage.blob.aio.BlobClient.set_sequence_number
  isExternal: false
  name: set_sequence_number(sequence_number_action, sequence_number=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.set_sequence_number
- fullName: azure.storage.blob.aio.BlobClient.set_standard_blob_tier
  isExternal: false
  name: set_standard_blob_tier(standard_blob_tier, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.set_standard_blob_tier
- fullName: azure.storage.blob.aio.BlobClient.stage_block
  isExternal: false
  name: stage_block(block_id, data, length=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.stage_block
- fullName: azure.storage.blob.aio.BlobClient.stage_block_from_url
  isExternal: false
  name: stage_block_from_url(block_id, source_url, source_offset=None, source_length=None,
    source_content_md5=None, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.stage_block_from_url
- fullName: azure.storage.blob.aio.BlobClient.start_copy_from_url
  isExternal: false
  name: start_copy_from_url(source_url, metadata=None, incremental_copy=False, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.start_copy_from_url
- fullName: azure.storage.blob.aio.BlobClient.undelete_blob
  isExternal: false
  name: undelete_blob(**kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.undelete_blob
- fullName: azure.storage.blob.aio.BlobClient.upload_blob
  isExternal: false
  name: 'upload_blob(data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>, length=None,
    metadata=None, **kwargs)'
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.upload_blob
- fullName: azure.storage.blob.aio.BlobClient.upload_page
  isExternal: false
  name: upload_page(page, offset, length, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.upload_page
- fullName: azure.storage.blob.aio.BlobClient.upload_pages_from_url
  isExternal: false
  name: upload_pages_from_url(source_url, offset, length, source_offset, **kwargs)
  parent: azure.storage.blob.aio.BlobClient
  uid: azure.storage.blob.aio.BlobClient.upload_pages_from_url
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: tuple(list(azure.storage.blob.BlobBlock), list(azure.storage.blob.BlobBlock))
  name: tuple(list(BlobBlock), list(BlobBlock))
  spec.python:
  - fullName: tuple
    name: tuple
    uid: tuple
  - fullName: (
    name: (
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.blob.BlobBlock
    name: BlobBlock
    uid: azure.storage.blob.BlobBlock
  - fullName: )
    name: )
  - fullName: ', '
    name: ', '
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.blob.BlobBlock
    name: BlobBlock
    uid: azure.storage.blob.BlobBlock
  - fullName: )
    name: )
  - fullName: )
    name: )
  uid: tuple(list(azure.storage.blob.BlobBlock), list(azure.storage.blob.BlobBlock))
- fullName: tuple(list(dict(str, str), list(dict(str, str))
  name: tuple(list(dict(str, str), list(dict(str, str))
  spec.python:
  - fullName: tuple
    name: tuple
    uid: tuple
  - fullName: (
    name: (
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ', '
    name: ', '
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: )
    name: )
  uid: tuple(list(dict(str, str), list(dict(str, str))
- fullName: Dict[str, Any]
  name: Dict[str, Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Dict[str, Any]
- fullName: dict[str, str
  name: dict[str, str
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  uid: dict[str, str
- fullName: datetime.datetime]
  name: datetime]
  spec.python:
  - fullName: datetime.datetime
    name: datetime
    uid: datetime.datetime
  - fullName: ']'
    name: ']'
  uid: datetime.datetime]
