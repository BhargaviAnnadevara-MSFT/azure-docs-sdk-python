### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.iot.device.patch.add_shims_for_inherited_methods
  - azure.iot.device.patch.connect
  - azure.iot.device.patch.create_from_connection_string
  - azure.iot.device.patch.create_from_edge_environment
  - azure.iot.device.patch.create_from_shared_access_signature
  - azure.iot.device.patch.create_from_symmetric_key
  - azure.iot.device.patch.create_from_x509_certificate
  - azure.iot.device.patch.disconnect
  - azure.iot.device.patch.get_twin
  - azure.iot.device.patch.patch_twin_reported_properties
  - azure.iot.device.patch.receive_method_request
  - azure.iot.device.patch.receive_twin_desired_properties_patch
  - azure.iot.device.patch.send_message
  - azure.iot.device.patch.send_method_response
  fullName: azure.iot.device.patch
  langs:
  - python
  module: azure.iot.device.patch
  name: patch
  summary: This module provides patches used to dynamically modify items from the
    libraries
  type: module
  uid: azure.iot.device.patch
- fullName: azure.iot.device.patch.add_shims_for_inherited_methods
  langs:
  - python
  module: azure.iot.device.patch
  name: add_shims_for_inherited_methods(target_class)
  summary: 'Dynamically add overriding, pass-through shim methods for all public inherited
    methods

    on a child class, which simply call into the parent class implementation of the
    same method.


    These shim methods will include the same docstrings as the method from the parent
    class.


    This currently only works for Python 3.5+'
  syntax:
    content: add_shims_for_inherited_methods(target_class)
    parameters:
    - description: The child class to add shim methods to
      id: target_class
  type: function
  uid: azure.iot.device.patch.add_shims_for_inherited_methods
- fullName: azure.iot.device.patch.connect
  langs:
  - python
  module: azure.iot.device.patch
  name: connect(self)
  summary: 'Connects the client to an Azure IoT Hub or Azure IoT Edge Hub instance.


    The destination is chosen based on the credentials passed via the auth_provider
    parameter

    that was provided when this object was initialized.


    This is a synchronous call, meaning that this function will not return until the
    connection

    to the service has been completely established.'
  syntax:
    content: connect(self)
    parameters: []
  type: function
  uid: azure.iot.device.patch.connect
- fullName: azure.iot.device.patch.create_from_connection_string
  langs:
  - python
  module: azure.iot.device.patch
  name: create_from_connection_string(cls, connection_string, ca_cert=None)
  summary: 'Instantiate the client from a IoTHub device or module connection string.



    connection string with a GatewayHostName parameter.'
  syntax:
    content: create_from_connection_string(cls, connection_string, ca_cert=None)
    parameters:
    - id: cls
    - id: connection_string
    - defaultValue: None
      id: ca_cert
  type: function
  uid: azure.iot.device.patch.create_from_connection_string
- fullName: azure.iot.device.patch.create_from_edge_environment
  langs:
  - python
  module: azure.iot.device.patch
  name: create_from_edge_environment(cls)
  summary: 'Instantiate the client from the IoT Edge environment.


    This method can only be run from inside an IoT Edge container, or in a debugging

    environment configured for Edge development (e.g. Visual Studio, Visual Studio
    Code)'
  syntax:
    content: create_from_edge_environment(cls)
    parameters:
    - id: cls
  type: function
  uid: azure.iot.device.patch.create_from_edge_environment
- fullName: azure.iot.device.patch.create_from_shared_access_signature
  langs:
  - python
  module: azure.iot.device.patch
  name: create_from_shared_access_signature(cls, sas_token)
  summary: 'Instantiate the client from a Shared Access Signature (SAS) token.


    This method of instantiation is not recommended for general usage.'
  syntax:
    content: create_from_shared_access_signature(cls, sas_token)
    parameters:
    - description: The string representation of a SAS token.
      id: sas_token
      type:
      - str
    - id: sas_token
  type: function
  uid: azure.iot.device.patch.create_from_shared_access_signature
- fullName: azure.iot.device.patch.create_from_symmetric_key
  langs:
  - python
  module: azure.iot.device.patch
  name: create_from_symmetric_key(cls, provisioning_host, registration_id, id_scope,
    symmetric_key, protocol_choice=None)
  summary: 'Create a client which can be used to run the registration of a device
    with provisioning service

    using Symmetric Key authentication.

    :param provisioning_host: Host running the Device Provisioning Service. Can be
    found in the Azure portal in the

    Overview tab as the string Global device endpoint

    :param registration_id: The registration ID is used to uniquely identify a device
    in the Device Provisioning Service.

    The registration ID is alphanumeric, lowercase string and may contain hyphens.

    :param id_scope: The ID scope is used to uniquely identify the specific provisioning
    service the device will

    register through. The ID scope is assigned to a Device Provisioning Service when
    it is created by the user and

    is generated by the service and is immutable, guaranteeing uniqueness.

    :param symmetric_key: The key which will be used to create the shared access signature
    token to authenticate

    the device with the Device Provisioning Service. By default, the Device Provisioning
    Service creates

    new symmetric keys with a default length of 32 bytes when new enrollments are
    saved with the Auto-generate keys

    option enabled. Users can provide their own symmetric keys for enrollments by
    disabling this option within

    16 bytes and 64 bytes and in valid Base64 format.

    :param protocol_choice: The choice for the protocol to be used. This is optional
    and will default to protocol MQTT currently.

    :return: A ProvisioningDeviceClient which can register via Symmetric Key.'
  syntax:
    content: create_from_symmetric_key(cls, provisioning_host, registration_id, id_scope,
      symmetric_key, protocol_choice=None)
    parameters:
    - id: cls
    - id: provisioning_host
    - id: registration_id
    - id: id_scope
    - id: symmetric_key
    - defaultValue: None
      id: protocol_choice
  type: function
  uid: azure.iot.device.patch.create_from_symmetric_key
- fullName: azure.iot.device.patch.create_from_x509_certificate
  langs:
  - python
  module: azure.iot.device.patch
  name: create_from_x509_certificate(cls, provisioning_host, registration_id, id_scope,
    x509, protocol_choice=None)
  summary: 'Create a client which can be used to run the registration of a device
    with provisioning service

    using X509 certificate authentication.

    :param provisioning_host: Host running the Device Provisioning Service. Can be
    found in the Azure portal in the

    Overview tab as the string Global device endpoint

    :param registration_id: The registration ID is used to uniquely identify a device
    in the Device Provisioning Service.

    The registration ID is alphanumeric, lowercase string and may contain hyphens.

    :param id_scope: The ID scope is used to uniquely identify the specific provisioning
    service the device will

    register through. The ID scope is assigned to a Device Provisioning Service when
    it is created by the user and

    is generated by the service and is immutable, guaranteeing uniqueness.

    :param x509: The x509 certificate, To use the certificate the enrollment object
    needs to contain cert (either the root certificate or one of the intermediate
    CA certificates).

    If the cert comes from a CER file, it needs to be base64 encoded.

    :param protocol_choice: The choice for the protocol to be used. This is optional
    and will default to protocol MQTT currently.

    :return: A ProvisioningDeviceClient which can register via Symmetric Key.'
  syntax:
    content: create_from_x509_certificate(cls, provisioning_host, registration_id,
      id_scope, x509, protocol_choice=None)
    parameters:
    - id: cls
    - id: provisioning_host
    - id: registration_id
    - id: id_scope
    - id: x509
    - defaultValue: None
      id: protocol_choice
  type: function
  uid: azure.iot.device.patch.create_from_x509_certificate
- fullName: azure.iot.device.patch.disconnect
  langs:
  - python
  module: azure.iot.device.patch
  name: disconnect(self)
  summary: 'Disconnect the client from the Azure IoT Hub or Azure IoT Edge Hub instance.


    This is a synchronous call, meaning that this function will not return until the
    connection

    to the service has been completely closed.'
  syntax:
    content: disconnect(self)
    parameters: []
  type: function
  uid: azure.iot.device.patch.disconnect
- fullName: azure.iot.device.patch.get_twin
  langs:
  - python
  module: azure.iot.device.patch
  name: get_twin(self)
  summary: 'Gets the device or module twin from the Azure IoT Hub or Azure IoT Edge
    Hub service.


    This is a synchronous call, meaning that this function will not return until the
    twin

    has been retrieved from the service.'
  syntax:
    content: get_twin(self)
    parameters: []
    return:
      description: Twin object which was retrieved from the hub
  type: function
  uid: azure.iot.device.patch.get_twin
- fullName: azure.iot.device.patch.patch_twin_reported_properties
  langs:
  - python
  module: azure.iot.device.patch
  name: patch_twin_reported_properties(self, reported_properties_patch)
  summary: 'Update reported properties with the Azure IoT Hub or Azure IoT Edge Hub
    service.


    This is a synchronous call, meaning that this function will not return until the
    patch

    has been sent to the service and acknowledged.


    If the service returns an error on the patch operation, this function will raise
    the

    appropriate error.'
  syntax:
    content: patch_twin_reported_properties(self, reported_properties_patch)
    parameters:
    - description: ''
      id: reported_properties_patch
      type:
      - dict, str, int, float, bool,
      - None (JSON compatible values)
  type: function
  uid: azure.iot.device.patch.patch_twin_reported_properties
- fullName: azure.iot.device.patch.receive_method_request
  langs:
  - python
  module: azure.iot.device.patch
  name: receive_method_request(self, method_name=None, block=True, timeout=None)
  summary: 'Receive a method request via the Azure IoT Hub or Azure IoT Edge Hub.



    If this parameter is not given, all methods not already being specifically targeted
    by

    a different request to receive_method will be received.

    :param bool block: Indicates if the operation should block until a request is
    received.

    Default True.

    :param int timeout: Optionally provide a number of seconds until blocking times
    out.'
  syntax:
    content: receive_method_request(self, method_name=None, block=True, timeout=None)
    parameters:
    - defaultValue: None
      id: method_name
    - defaultValue: 'True'
      id: block
    - defaultValue: None
      id: timeout
    return:
      description: MethodRequest object representing the received method request.
  type: function
  uid: azure.iot.device.patch.receive_method_request
- fullName: azure.iot.device.patch.receive_twin_desired_properties_patch
  langs:
  - python
  module: azure.iot.device.patch
  name: receive_twin_desired_properties_patch(self, block=True, timeout=None)
  summary: "Receive a desired property patch via the Azure IoT Hub or Azure IoT Edge\
    \ Hub.\n\nThis is a synchronous call, which means the following:\n1. If block=True,\
    \ this function will block until one of the following happens:\n\n\n   * a desired\
    \ proprety patch is received from the Azure IoT Hub or Azure IoT Edge Hub. \n\n\
    \   * the timeout period, if provided, elapses.  If a timeout happens, this function\
    \ will raise a InboxEmpty exception \n\n\n2. If block=False, this function will\
    \ return any desired property patches which may have been received by the pipeline,\
    \ but not yet returned to the application.  If no desired property patches have\
    \ been received by the pipeline, this function will raise an InboxEmpty exception"
  syntax:
    content: receive_twin_desired_properties_patch(self, block=True, timeout=None)
    parameters:
    - defaultValue: 'True'
      description: 'Indicates if the operation should block until a request is received.

        Default True.'
      id: block
      type:
      - bool
    - defaultValue: None
      description: Optionally provide a number of seconds until blocking times out.
      id: timeout
      type:
      - int
    return:
      description: desired property patch.  This can be dict, str, int, float, bool,
        or None (JSON compatible values)
  type: function
  uid: azure.iot.device.patch.receive_twin_desired_properties_patch
- fullName: azure.iot.device.patch.send_message
  langs:
  - python
  module: azure.iot.device.patch
  name: send_message(self, message)
  summary: 'Sends a message to the default events endpoint on the Azure IoT Hub or
    Azure IoT Edge Hub instance.


    This is a synchronous event, meaning that this function will not return until
    the event

    has been sent to the service and the service has acknowledged receipt of the event.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.



    Message class will be converted to Message object.'
  syntax:
    content: send_message(self, message)
    parameters:
    - description: The actual message to send. Anything passed that is not an instance
        of the
      id: message
  type: function
  uid: azure.iot.device.patch.send_message
- fullName: azure.iot.device.patch.send_method_response
  langs:
  - python
  module: azure.iot.device.patch
  name: send_method_response(self, method_response)
  summary: 'Send a response to a method request via the Azure IoT Hub or Azure IoT
    Edge Hub.


    This is a synchronous event, meaning that this function will not return until
    the event

    has been sent to the service and the service has acknowledged receipt of the event.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_method_response(self, method_response)
    parameters:
    - description: The MethodResponse to send.
      id: method_response
      type:
      - MethodResponse
  type: function
  uid: azure.iot.device.patch.send_method_response
references:
- fullName: azure.iot.device.patch.add_shims_for_inherited_methods
  isExternal: false
  name: add_shims_for_inherited_methods(target_class)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.add_shims_for_inherited_methods
- fullName: azure.iot.device.patch.connect
  isExternal: false
  name: connect(self)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.connect
- fullName: azure.iot.device.patch.create_from_connection_string
  isExternal: false
  name: create_from_connection_string(cls, connection_string, ca_cert=None)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.create_from_connection_string
- fullName: azure.iot.device.patch.create_from_edge_environment
  isExternal: false
  name: create_from_edge_environment(cls)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.create_from_edge_environment
- fullName: azure.iot.device.patch.create_from_shared_access_signature
  isExternal: false
  name: create_from_shared_access_signature(cls, sas_token)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.create_from_shared_access_signature
- fullName: azure.iot.device.patch.create_from_symmetric_key
  isExternal: false
  name: create_from_symmetric_key(cls, provisioning_host, registration_id, id_scope,
    symmetric_key, protocol_choice=None)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.create_from_symmetric_key
- fullName: azure.iot.device.patch.create_from_x509_certificate
  isExternal: false
  name: create_from_x509_certificate(cls, provisioning_host, registration_id, id_scope,
    x509, protocol_choice=None)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.create_from_x509_certificate
- fullName: azure.iot.device.patch.disconnect
  isExternal: false
  name: disconnect(self)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.disconnect
- fullName: azure.iot.device.patch.get_twin
  isExternal: false
  name: get_twin(self)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.get_twin
- fullName: azure.iot.device.patch.patch_twin_reported_properties
  isExternal: false
  name: patch_twin_reported_properties(self, reported_properties_patch)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.patch_twin_reported_properties
- fullName: azure.iot.device.patch.receive_method_request
  isExternal: false
  name: receive_method_request(self, method_name=None, block=True, timeout=None)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.receive_method_request
- fullName: azure.iot.device.patch.receive_twin_desired_properties_patch
  isExternal: false
  name: receive_twin_desired_properties_patch(self, block=True, timeout=None)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.receive_twin_desired_properties_patch
- fullName: azure.iot.device.patch.send_message
  isExternal: false
  name: send_message(self, message)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.send_message
- fullName: azure.iot.device.patch.send_method_response
  isExternal: false
  name: send_method_response(self, method_response)
  parent: azure.iot.device.patch
  uid: azure.iot.device.patch.send_method_response
- fullName: dict, str, int, float, bool,
  name: dict, str, int, float, bool,
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: int
    name: int
    uid: int
  - fullName: ', '
    name: ', '
  - fullName: float
    name: float
    uid: float
  - fullName: ', '
    name: ', '
  - fullName: bool,
    name: bool,
    uid: bool,
  uid: dict, str, int, float, bool,
- fullName: None (JSON compatible values)
  name: None (JSON compatible values)
  spec.python:
  - fullName: 'None '
    name: 'None '
    uid: 'None '
  - fullName: (
    name: (
  - fullName: JSON compatible values
    name: JSON compatible values
    uid: JSON compatible values
  - fullName: )
    name: )
  uid: None (JSON compatible values)
