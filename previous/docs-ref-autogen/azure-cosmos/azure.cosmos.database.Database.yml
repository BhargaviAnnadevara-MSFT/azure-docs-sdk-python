### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.database.Database.create_container
  - azure.cosmos.database.Database.create_user
  - azure.cosmos.database.Database.delete_container
  - azure.cosmos.database.Database.delete_user
  - azure.cosmos.database.Database.get_container
  - azure.cosmos.database.Database.get_user
  - azure.cosmos.database.Database.list_container_properties
  - azure.cosmos.database.Database.list_user_properties
  - azure.cosmos.database.Database.query_containers
  - azure.cosmos.database.Database.query_users
  - azure.cosmos.database.Database.read_offer
  - azure.cosmos.database.Database.replace_container
  - azure.cosmos.database.Database.replace_throughput
  - azure.cosmos.database.Database.replace_user
  - azure.cosmos.database.Database.upsert_user
  class: azure.cosmos.database.Database
  fullName: azure.cosmos.database.Database
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos.database
  name: Database
  summary: "Represents an Azure Cosmos DB SQL API database.\n\nA database contains\
    \ one or more containers, each of which can contain items,\nstored procedures,\
    \ triggers, and user-defined functions.\n\nA database can also have associated\
    \ users, each of which configured with\na set of permissions for accessing certain\
    \ containers, stored procedures,\ntriggers, user defined functions, or items.\n\
    \nAn Azure Cosmos DB SQL API database has the following system-generated properties;\
    \ these properties are read-only:\n\n* *_rid*:   The resource ID. \n\n* *_ts*:\
    \    When the resource was last updated. The value is a timestamp. \n\n* *_self*:\
    \  The unique addressable URI for the resource. \n\n* *_etag*:  The resource etag\
    \ required for optimistic concurrency control. \n\n* *_colls*: The addressable\
    \ path of the collections resource. \n\n* *_users*: The addressable path of the\
    \ users resource."
  syntax:
    content: Database(client_connection, id, properties=None)
    variables:
    - description: The ID (name) of the database.
      id: id
    - description: A dictionary of system-generated properties for this database.
        See below for the list of keys.
      id: properties
  type: class
  uid: azure.cosmos.database.Database
- class: azure.cosmos.database.Database
  exceptions:
  - description: The container creation failed.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.create_container
  langs:
  - python
  module: azure.cosmos.database
  name: create_container(id, partition_key, indexing_policy=None, default_ttl=None,
    session_token=None, initial_headers=None, access_condition=None, populate_query_metrics=None,
    offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
    request_options=None)
  namewithoutparameters: create_container
  summary: 'Create a new container with the given ID (name).


    If a container with the given ID already exists, an HTTPFailure with status_code
    409 is raised.'
  syntax:
    content: create_container(id, partition_key, indexing_policy=None, default_ttl=None,
      session_token=None, initial_headers=None, access_condition=None, populate_query_metrics=None,
      offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
      request_options=None)
    parameters:
    - description: ID (name) of container to create.
      id: id
      isRequired: true
    - description: The partition key to use for the container.
      id: partition_key
      isRequired: true
    - defaultValue: None
      description: The indexing policy to apply to the container.
      id: indexing_policy
    - defaultValue: None
      description: Default time to live (TTL) for items in the container. If unspecified,
        items do not expire.
      id: default_ttl
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Conditions Associated with the request.
      id: access_condition
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: The provisioned throughput for this offer.
      id: offer_throughput
    - defaultValue: None
      description: The unique key policy to apply to the container.
      id: unique_key_policy
    - defaultValue: None
      description: The conflict resolution policy to apply to the container.
      id: conflict_resolution_policy
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    return:
      description: A <xref:azure.cosmos.database.Container> instance representing
        the new container.
  type: method
  uid: azure.cosmos.database.Database.create_container
- class: azure.cosmos.database.Database
  fullName: azure.cosmos.database.Database.create_user
  langs:
  - python
  module: azure.cosmos.database
  name: create_user(body, request_options=None)
  namewithoutparameters: create_user
  summary: 'Create a user in the container.



    The user ID must be unique within the database, and consist of no more than 255
    characters.

    :param request_options: Dictionary of additional properties to be used for the
    request.

    :returns: A <xref:azure.cosmos.database.User> instance representing the new user.

    :raise *HTTPFailure*: If the given user couldn''t be created.


    To update or replace an existing user, use the <xref:Container.upsert_user> method.'
  syntax:
    content: create_user(body, request_options=None)
    parameters:
    - description: A dict-like object with an *id* key and value representing the
        user to be created.
      id: body
      isRequired: true
    - defaultValue: None
      id: request_options
  type: method
  uid: azure.cosmos.database.Database.create_user
- class: azure.cosmos.database.Database
  exceptions:
  - description: If the container couldn't be deleted.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.delete_container
  langs:
  - python
  module: azure.cosmos.database
  name: delete_container(container, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, request_options=None)
  namewithoutparameters: delete_container
  summary: Delete the container
  syntax:
    content: delete_container(container, session_token=None, initial_headers=None,
      access_condition=None, populate_query_metrics=None, request_options=None)
    parameters:
    - description: The ID (name) of the container to delete. You can either pass in
        the ID of the container to delete, a <xref:azure.cosmos.database.Container>
        instance or a dict representing the properties of the container.
      id: container
      isRequired: true
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Conditions Associated with the request.
      id: access_condition
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
  type: method
  uid: azure.cosmos.database.Database.delete_container
- class: azure.cosmos.database.Database
  exceptions:
  - description: The user wasn't deleted successfully. If the user does not exist
      in the container, a *404* error is returned.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.delete_user
  langs:
  - python
  module: azure.cosmos.database
  name: delete_user(user, request_options=None)
  namewithoutparameters: delete_user
  summary: Delete the specified user from the container.
  syntax:
    content: delete_user(user, request_options=None)
    parameters:
    - description: The ID (name), dict representing the properties or <xref:azure.cosmos.database.User>
        instance of the user to be deleted.
      id: user
      isRequired: true
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
  type: method
  uid: azure.cosmos.database.Database.delete_user
- class: azure.cosmos.database.Database
  exceptions:
  - description: Raised if the container couldn't be retrieved. This includes if the
      container does not exist.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.get_container
  langs:
  - python
  module: azure.cosmos.database
  name: get_container(container, session_token=None, initial_headers=None, populate_query_metrics=None,
    populate_partition_key_range_statistics=None, populate_quota_info=None, request_options=None)
  namewithoutparameters: get_container
  summary: Get the specified *Container*, or a container with specified ID (name).
  syntax:
    content: get_container(container, session_token=None, initial_headers=None, populate_query_metrics=None,
      populate_partition_key_range_statistics=None, populate_quota_info=None, request_options=None)
    parameters:
    - description: The ID (name) of the container, a <xref:azure.cosmos.database.Container>
        instance, or a dict representing the properties of the container to be retrieved.
      id: container
      isRequired: true
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: Enable returning partition key range statistics in response headers.
      id: populate_partition_key_range_statistics
    - defaultValue: None
      description: Enable returning collection storage quota information in response
        headers.
      id: populate_quota_info
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    return:
      description: <xref:azure.cosmos.database.Container> instance representing the
        retrieved container.
  type: method
  uid: azure.cosmos.database.Database.get_container
- class: azure.cosmos.database.Database
  exceptions:
  - description: If the given user couldn't be retrieved.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.get_user
  langs:
  - python
  module: azure.cosmos.database
  name: get_user(user, request_options=None)
  namewithoutparameters: get_user
  summary: Get the user identified by *id*.
  syntax:
    content: get_user(user, request_options=None)
    parameters:
    - description: The ID (name), dict representing the properties or <xref:azure.cosmos.database.User>
        instance of the user to be retrieved.
      id: user
      isRequired: true
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    return:
      description: A <xref:azure.cosmos.database.User> instance representing the retrieved
        user.
  type: method
  uid: azure.cosmos.database.Database.get_user
- class: azure.cosmos.database.Database
  fullName: azure.cosmos.database.Database.list_container_properties
  langs:
  - python
  module: azure.cosmos.database
  name: list_container_properties(max_item_count=None, session_token=None, initial_headers=None,
    populate_query_metrics=None, feed_options=None)
  namewithoutparameters: list_container_properties
  summary: List the containers in the database.
  syntax:
    content: list_container_properties(max_item_count=None, session_token=None, initial_headers=None,
      populate_query_metrics=None, feed_options=None)
    parameters:
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    return:
      description: A <xref:azure.cosmos.database.QueryIterable> instance representing
        an iterable of container properties (dicts).
  type: method
  uid: azure.cosmos.database.Database.list_container_properties
- class: azure.cosmos.database.Database
  fullName: azure.cosmos.database.Database.list_user_properties
  langs:
  - python
  module: azure.cosmos.database
  name: list_user_properties(max_item_count=None, feed_options=None)
  namewithoutparameters: list_user_properties
  summary: List all users in the container.
  syntax:
    content: list_user_properties(max_item_count=None, feed_options=None)
    parameters:
    - defaultValue: None
      description: Max number of users to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    return:
      description: A <xref:azure.cosmos.database.QueryIterable> instance representing
        an iterable of user properties (dicts).
  type: method
  uid: azure.cosmos.database.Database.list_user_properties
- class: azure.cosmos.database.Database
  fullName: azure.cosmos.database.Database.query_containers
  langs:
  - python
  module: azure.cosmos.database
  name: query_containers(query=None, parameters=None, max_item_count=None, session_token=None,
    initial_headers=None, populate_query_metrics=None, feed_options=None)
  namewithoutparameters: query_containers
  summary: List properties for containers in the current database
  syntax:
    content: query_containers(query=None, parameters=None, max_item_count=None, session_token=None,
      initial_headers=None, populate_query_metrics=None, feed_options=None)
    parameters:
    - defaultValue: None
      description: The Azure Cosmos DB SQL query to execute.
      id: query
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    return:
      description: A <xref:azure.cosmos.database.QueryIterable> instance representing
        an iterable of container properties (dicts).
  type: method
  uid: azure.cosmos.database.Database.query_containers
- class: azure.cosmos.database.Database
  fullName: azure.cosmos.database.Database.query_users
  langs:
  - python
  module: azure.cosmos.database
  name: query_users(query, parameters=None, max_item_count=None, feed_options=None)
  namewithoutparameters: query_users
  summary: Return all users matching the given *query*.
  syntax:
    content: query_users(query, parameters=None, max_item_count=None, feed_options=None)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Max number of users to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    return:
      description: A <xref:azure.cosmos.database.QueryIterable> instance representing
        an iterable of user properties (dicts).
  type: method
  uid: azure.cosmos.database.Database.query_users
- class: azure.cosmos.database.Database
  exceptions:
  - description: If no offer exists for the database or if the offer could not be
      retrieved.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.read_offer
  langs:
  - python
  module: azure.cosmos.database
  name: read_offer()
  namewithoutparameters: read_offer
  summary: Read the Offer object for this database.
  syntax:
    content: read_offer()
    parameters: []
    return:
      description: Offer for the database.
  type: method
  uid: azure.cosmos.database.Database.read_offer
- class: azure.cosmos.database.Database
  exceptions:
  - description: Raised if the container couldn't be replaced. This includes if the
      container with given id does not exist.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.replace_container
  langs:
  - python
  module: azure.cosmos.database
  name: replace_container(container, partition_key, indexing_policy=None, default_ttl=None,
    conflict_resolution_policy=None, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, request_options=None)
  namewithoutparameters: replace_container
  summary: 'Reset the properties of the container. Property changes are persisted
    immediately.


    Any properties not specified will be reset to their default values.'
  syntax:
    content: replace_container(container, partition_key, indexing_policy=None, default_ttl=None,
      conflict_resolution_policy=None, session_token=None, initial_headers=None, access_condition=None,
      populate_query_metrics=None, request_options=None)
    parameters:
    - description: The ID (name), dict representing the properties or <xref:azure.cosmos.database.Container>
        instance of the container to be replaced.
      id: container
      isRequired: true
    - description: The partition key to use for the container.
      id: partition_key
      isRequired: true
    - defaultValue: None
      description: The indexing policy to apply to the container.
      id: indexing_policy
    - defaultValue: None
      description: Default time to live (TTL) for items in the container. If unspecified,
        items do not expire.
      id: default_ttl
    - defaultValue: None
      description: The conflict resolution policy to apply to the container.
      id: conflict_resolution_policy
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Conditions Associated with the request.
      id: access_condition
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    return:
      description: <xref:azure.cosmos.database.Container> instance representing the
        container after replace completed.
  type: method
  uid: azure.cosmos.database.Database.replace_container
- class: azure.cosmos.database.Database
  exceptions:
  - description: If no offer exists for the database or if the offer could not be
      updated.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.replace_throughput
  langs:
  - python
  module: azure.cosmos.database
  name: replace_throughput(throughput)
  namewithoutparameters: replace_throughput
  summary: Replace the database level throughput.
  syntax:
    content: replace_throughput(throughput)
    parameters:
    - description: The throughput to be set (an integer).
      id: throughput
      isRequired: true
    return:
      description: Offer for the database, updated with new throughput.
  type: method
  uid: azure.cosmos.database.Database.replace_throughput
- class: azure.cosmos.database.Database
  exceptions:
  - description: If the replace failed or the user with given id does not exist.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.replace_user
  langs:
  - python
  module: azure.cosmos.database
  name: replace_user(user, body, request_options=None)
  namewithoutparameters: replace_user
  summary: Replaces the specified user if it exists in the container.
  syntax:
    content: replace_user(user, body, request_options=None)
    parameters:
    - description: The ID (name), dict representing the properties or <xref:azure.cosmos.database.User>
        instance of the user to be replaced.
      id: user
      isRequired: true
    - description: A dict-like object representing the user to replace.
      id: body
      isRequired: true
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    return:
      description: A <xref:azure.cosmos.database.User> instance representing the user
        after replace went through.
  type: method
  uid: azure.cosmos.database.Database.replace_user
- class: azure.cosmos.database.Database
  exceptions:
  - description: If the given user could not be upserted.
    type: HTTPFailure
  fullName: azure.cosmos.database.Database.upsert_user
  langs:
  - python
  module: azure.cosmos.database
  name: upsert_user(body, request_options=None)
  namewithoutparameters: upsert_user
  summary: 'Insert or update the specified user.


    If the user already exists in the container, it is replaced. If it does not, it
    is inserted.'
  syntax:
    content: upsert_user(body, request_options=None)
    parameters:
    - description: A dict-like object representing the user to update or insert.
      id: body
      isRequired: true
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    return:
      description: A <xref:azure.cosmos.database.User> instance representing the upserted
        user.
  type: method
  uid: azure.cosmos.database.Database.upsert_user
references:
- fullName: azure.cosmos.database.Database.create_container
  isExternal: false
  name: create_container(id, partition_key, indexing_policy=None, default_ttl=None,
    session_token=None, initial_headers=None, access_condition=None, populate_query_metrics=None,
    offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
    request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.create_container
- fullName: azure.cosmos.database.Database.create_user
  isExternal: false
  name: create_user(body, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.create_user
- fullName: azure.cosmos.database.Database.delete_container
  isExternal: false
  name: delete_container(container, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.delete_container
- fullName: azure.cosmos.database.Database.delete_user
  isExternal: false
  name: delete_user(user, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.delete_user
- fullName: azure.cosmos.database.Database.get_container
  isExternal: false
  name: get_container(container, session_token=None, initial_headers=None, populate_query_metrics=None,
    populate_partition_key_range_statistics=None, populate_quota_info=None, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.get_container
- fullName: azure.cosmos.database.Database.get_user
  isExternal: false
  name: get_user(user, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.get_user
- fullName: azure.cosmos.database.Database.list_container_properties
  isExternal: false
  name: list_container_properties(max_item_count=None, session_token=None, initial_headers=None,
    populate_query_metrics=None, feed_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.list_container_properties
- fullName: azure.cosmos.database.Database.list_user_properties
  isExternal: false
  name: list_user_properties(max_item_count=None, feed_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.list_user_properties
- fullName: azure.cosmos.database.Database.query_containers
  isExternal: false
  name: query_containers(query=None, parameters=None, max_item_count=None, session_token=None,
    initial_headers=None, populate_query_metrics=None, feed_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.query_containers
- fullName: azure.cosmos.database.Database.query_users
  isExternal: false
  name: query_users(query, parameters=None, max_item_count=None, feed_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.query_users
- fullName: azure.cosmos.database.Database.read_offer
  isExternal: false
  name: read_offer()
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.read_offer
- fullName: azure.cosmos.database.Database.replace_container
  isExternal: false
  name: replace_container(container, partition_key, indexing_policy=None, default_ttl=None,
    conflict_resolution_policy=None, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.replace_container
- fullName: azure.cosmos.database.Database.replace_throughput
  isExternal: false
  name: replace_throughput(throughput)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.replace_throughput
- fullName: azure.cosmos.database.Database.replace_user
  isExternal: false
  name: replace_user(user, body, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.replace_user
- fullName: azure.cosmos.database.Database.upsert_user
  isExternal: false
  name: upsert_user(body, request_options=None)
  parent: azure.cosmos.database.Database
  uid: azure.cosmos.database.Database.upsert_user
