### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.ServiceBusClient.close
  - azure.servicebus.ServiceBusClient.from_connection_string
  - azure.servicebus.ServiceBusClient.get_queue_receiver
  - azure.servicebus.ServiceBusClient.get_queue_sender
  class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusClient.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\source_code\\\\11\\\\azure-servicebus-7.0.0b1\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   import os\n   from azure.servicebus import ServiceBusClient, ServiceBusSharedKeyCredential\n\
    \   fully_qualified_namespace = os.environ['SERVICE_BUS_CONNECTION_STR']\n   shared_access_policy\
    \ = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key = os.environ['SERVICE_BUS_SAS_KEY']\n\
    \   servicebus_client = ServiceBusClient(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
    \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
    \           shared_access_key\n       )\n   )\n\n   ````\n"
  fullName: azure.servicebus.ServiceBusClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus
  name: ServiceBusClient
  summary: 'The ServiceBusClient class defines a high level interface for

    getting ServiceBusSender and ServiceBusReceiver.'
  syntax:
    content: ServiceBusClient(fully_qualified_namespace, credential, **kwargs)
    parameters:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        <xref:azure.servicebus.ServiceBusSharedKeyCredential>, or credential objects

        generated by the azure-identity library and objects that implement the *get_token(self,
        *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
    variables:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
  type: class
  uid: azure.servicebus.ServiceBusClient
- class: azure.servicebus.ServiceBusClient
  fullName: azure.servicebus.ServiceBusClient.close
  langs:
  - python
  module: azure.servicebus
  name: close()
  summary: Close down the ServiceBus client and the underlying connection.
  syntax:
    content: close()
    parameters: []
    return:
      description: None
  type: method
  uid: azure.servicebus.ServiceBusClient.close
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusClient from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\11\\\\azure-servicebus-7.0.0b1\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   servicebus_client\
    \ = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.from_connection_string
  langs:
  - python
  module: azure.servicebus
  name: from_connection_string(conn_str, **kwargs)
  summary: Create a ServiceBusClient from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of a Service Bus.
      id: conn_str
      type:
      - str
    - id: conn_str
    return:
      type:
      - azure.servicebus.ServiceBusClient
  type: method
  uid: azure.servicebus.ServiceBusClient.from_connection_string
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\11\\\\azure-servicebus-7.0.0b1\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       queue_receiver = servicebus_client.get_queue_receiver(queue_name=queue_name)\n\
    \n   ````\n"
  exceptions:
  - type: ServiceBusConnectionError
  fullName: azure.servicebus.ServiceBusClient.get_queue_receiver
  langs:
  - python
  module: azure.servicebus
  name: get_queue_receiver(queue_name, **kwargs)
  summary: Get ServiceBusReceiver for the specific queue.
  syntax:
    content: get_queue_receiver(queue_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      type:
      - str
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      type:
      - int
    return:
      type:
      - azure.servicebus.ServiceBusReceiver
  type: method
  uid: azure.servicebus.ServiceBusClient.get_queue_receiver
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\11\\\\azure-servicebus-7.0.0b1\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       queue_sender = servicebus_client.get_queue_sender(queue_name=queue_name)\n\
    \n   ````\n"
  exceptions:
  - type: ServiceBusConnectionError
  fullName: azure.servicebus.ServiceBusClient.get_queue_sender
  langs:
  - python
  module: azure.servicebus
  name: get_queue_sender(queue_name, **kwargs)
  summary: Get ServiceBusSender for the specific queue.
  syntax:
    content: get_queue_sender(queue_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      type:
      - str
    return:
      type:
      - azure.servicebus.ServiceBusSender
  type: method
  uid: azure.servicebus.ServiceBusClient.get_queue_sender
references:
- fullName: azure.servicebus.ServiceBusClient.close
  isExternal: false
  name: close()
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.close
- fullName: azure.servicebus.ServiceBusClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.from_connection_string
- fullName: azure.servicebus.ServiceBusClient.get_queue_receiver
  isExternal: false
  name: get_queue_receiver(queue_name, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_queue_receiver
- fullName: azure.servicebus.ServiceBusClient.get_queue_sender
  isExternal: false
  name: get_queue_sender(queue_name, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_queue_sender
