### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.aio.EventHubProducer.close
  - azure.eventhub.aio.EventHubProducer.create_batch
  - azure.eventhub.aio.EventHubProducer.send
  class: azure.eventhub.aio.EventHubProducer
  fullName: azure.eventhub.aio.EventHubProducer
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.eventhub.aio._consumer_producer_mixin_async.ConsumerProducerMixin
  langs:
  - python
  module: azure.eventhub.aio
  name: EventHubProducer
  summary: 'A producer responsible for transmitting EventData to a specific Event
    Hub,

    grouped together in batches. Depending on the options specified at creation, the
    producer may

    be created to allow event data to be automatically routed to an available partition
    or specific

    to a partition.


    Please use the method *create_producer* on *EventHubClient* for creating *EventHubProducer*.'
  syntax:
    content: EventHubProducer(client, target, **kwargs)
  type: class
  uid: azure.eventhub.aio.EventHubProducer
- class: azure.eventhub.aio.EventHubProducer
  fullName: azure.eventhub.aio.EventHubProducer.close
  langs:
  - python
  module: azure.eventhub.aio
  name: close()
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op.'
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.eventhub.aio.EventHubProducer.close
- class: azure.eventhub.aio.EventHubProducer
  fullName: azure.eventhub.aio.EventHubProducer.create_batch
  langs:
  - python
  module: azure.eventhub.aio
  name: create_batch(max_size=None, partition_key=None)
  summary: 'Create an EventDataBatch object with max size being max_size.

    The max_size should be no greater than the max allowed message size defined by
    the service side.'
  syntax:
    content: create_batch(max_size=None, partition_key=None)
    parameters:
    - defaultValue: None
      description: The maximum size of bytes data that an EventDataBatch object can
        hold.
      id: max_size
      type:
      - int
    - defaultValue: None
      description: 'With the given partition_key, event data will land to

        a particular partition of the Event Hub decided by the service.'
      id: partition_key
      type:
      - str
    return:
      description: an EventDataBatch instance
      type:
      - azure.eventhub.EventDataBatch
  type: method
  uid: azure.eventhub.aio.EventHubProducer.create_batch
- class: azure.eventhub.aio.EventHubProducer
  fullName: azure.eventhub.aio.EventHubProducer.send
  langs:
  - python
  module: azure.eventhub.aio
  name: 'send(event_data: typing.Union[azure.eventhub.common.EventData, azure.eventhub.common.EventDataBatch,
    typing.Iterable[azure.eventhub.common.EventData]], *, partition_key: typing.Union[str,
    bytes] = None, timeout: float = None)'
  summary: 'Sends an event data and blocks until acknowledgement is

    received or operation times out.'
  syntax:
    content: 'send(event_data: typing.Union[azure.eventhub.common.EventData, azure.eventhub.common.EventDataBatch,
      typing.Iterable[azure.eventhub.common.EventData]], *, partition_key: typing.Union[str,
      bytes] = None, timeout: float = None)'
    parameters:
    - description: The event to be sent. It can be an EventData object, or iterable
        of EventData objects
      id: event_data
      type:
      - azure.eventhub.common.EventData, Iterator, Generator, list
    - description: 'With the given partition_key, event data will land to

        a particular partition of the Event Hub decided by the service. partition_key

        could be omitted if event_data is of type ~azure.eventhub.EventDataBatch.'
      id: partition_key
      type:
      - str
    - description: 'The maximum wait time to send the event data.

        If not specified, the default wait time specified when the producer was created
        will be used.'
      id: timeout
      type:
      - float
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubProducer.send
references:
- fullName: azure.eventhub.aio.EventHubProducer.close
  isExternal: false
  name: close()
  parent: azure.eventhub.aio.EventHubProducer
  uid: azure.eventhub.aio.EventHubProducer.close
- fullName: azure.eventhub.aio.EventHubProducer.create_batch
  isExternal: false
  name: create_batch(max_size=None, partition_key=None)
  parent: azure.eventhub.aio.EventHubProducer
  uid: azure.eventhub.aio.EventHubProducer.create_batch
- fullName: azure.eventhub.aio.EventHubProducer.send
  isExternal: false
  name: 'send(event_data: typing.Union[azure.eventhub.common.EventData, azure.eventhub.common.EventDataBatch,
    typing.Iterable[azure.eventhub.common.EventData]], *, partition_key: typing.Union[str,
    bytes] = None, timeout: float = None)'
  parent: azure.eventhub.aio.EventHubProducer
  uid: azure.eventhub.aio.EventHubProducer.send
- fullName: azure.eventhub.common.EventData, Iterator, Generator, list
  name: EventData, Iterator, Generator, list
  spec.python:
  - fullName: azure.eventhub.common.EventData
    name: EventData
    uid: azure.eventhub.common.EventData
  - fullName: ', '
    name: ', '
  - fullName: Iterator
    name: Iterator
    uid: Iterator
  - fullName: ', '
    name: ', '
  - fullName: Generator
    name: Generator
    uid: Generator
  - fullName: ', '
    name: ', '
  - fullName: list
    name: list
    uid: list
  uid: azure.eventhub.common.EventData, Iterator, Generator, list
