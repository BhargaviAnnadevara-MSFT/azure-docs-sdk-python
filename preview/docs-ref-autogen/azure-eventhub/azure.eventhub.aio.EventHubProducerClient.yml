### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.aio.EventHubProducerClient.close
  - azure.eventhub.aio.EventHubProducerClient.create_batch
  - azure.eventhub.aio.EventHubProducerClient.from_connection_string
  - azure.eventhub.aio.EventHubProducerClient.send
  class: azure.eventhub.aio.EventHubProducerClient
  fullName: azure.eventhub.aio.EventHubProducerClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.eventhub.client_abstract.EventHubClientAbstract
    type: azure.eventhub.aio.client_async.EventHubClient
  langs:
  - python
  module: azure.eventhub.aio
  name: EventHubProducerClient
  summary: 'The EventHubProducerClient class defines a high level interface for

    sending events to the Azure Event Hubs service.'
  syntax:
    content: EventHubProducerClient(host, event_hub_path, credential, **kwargs) ->
      None
    parameters:
    - description: The hostname of the Event Hub.
      id: host
      type:
      - str
    - description: The path of the specific Event Hub to connect the client to.
      id: event_hub_path
      type:
      - str
    - description: 'The credential object used for authentication which implements
        particular interface

        of getting tokens. It accepts <xref:azure.eventhub.EventHubSharedKeyCredential>,

        <xref:azure.eventhub.EventHubSASTokenCredential>, or credential objects generated
        by

        the azure-identity library and objects that implement *get_token(self, *scopes)*
        method.'
      id: credential
  type: class
  uid: azure.eventhub.aio.EventHubProducerClient
- class: azure.eventhub.aio.EventHubProducerClient
  fullName: azure.eventhub.aio.EventHubProducerClient.close
  langs:
  - python
  module: azure.eventhub.aio
  name: close()
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op.'
  syntax:
    content: close()
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.close
- class: azure.eventhub.aio.EventHubProducerClient
  fullName: azure.eventhub.aio.EventHubProducerClient.create_batch
  langs:
  - python
  module: azure.eventhub.aio
  name: create_batch(max_size=None)
  summary: 'Create an EventDataBatch object with max size being max_size.

    The max_size should be no greater than the max allowed message size defined by
    the service side.'
  syntax:
    content: create_batch(max_size=None)
    parameters:
    - defaultValue: None
      description: The maximum size of bytes data that an EventDataBatch object can
        hold.
      id: max_size
      type:
      - int
    return:
      type:
      - azure.eventhub.EventDataBatch
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.create_batch
- class: azure.eventhub.aio.EventHubProducerClient
  fullName: azure.eventhub.aio.EventHubProducerClient.from_connection_string
  langs:
  - python
  module: azure.eventhub.aio
  name: from_connection_string(conn_str, **kwargs)
  summary: Create an EventHubProducerClient from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of an eventhub.
      id: conn_str
      type:
      - str
    - id: conn_str
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.from_connection_string
- class: azure.eventhub.aio.EventHubProducerClient
  exceptions:
  - type: azure.eventhub.AuthenticationError
  fullName: azure.eventhub.aio.EventHubProducerClient.send
  langs:
  - python
  module: azure.eventhub.aio
  name: 'send(event_data, *, partition_key: typing.Union[str, bytes] = None, partition_id:
    str = None, timeout: float = None) -> None'
  summary: Sends event data and blocks until acknowledgement is received or operation
    times out.
  syntax:
    content: 'send(event_data, *, partition_key: typing.Union[str, bytes] = None,
      partition_id: str = None, timeout: float = None) -> None'
    parameters:
    - description: The event to be sent. It can be an EventData object, or iterable
        of EventData objects.
      id: event_data
      type:
      - azure.eventhub.EventData
      - azure.eventhub.EventDataBatch
      - Iterator[azure.eventhub.EventData]
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.send
references:
- fullName: azure.eventhub.aio.EventHubProducerClient.close
  isExternal: false
  name: close()
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.close
- fullName: azure.eventhub.aio.EventHubProducerClient.create_batch
  isExternal: false
  name: create_batch(max_size=None)
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.create_batch
- fullName: azure.eventhub.aio.EventHubProducerClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.from_connection_string
- fullName: azure.eventhub.aio.EventHubProducerClient.send
  isExternal: false
  name: 'send(event_data, *, partition_key: typing.Union[str, bytes] = None, partition_id:
    str = None, timeout: float = None) -> None'
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.send
- fullName: Iterator[azure.eventhub.EventData]
  name: Iterator[EventData]
  spec.python:
  - fullName: Iterator
    name: Iterator
    uid: Iterator
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.EventData
    name: EventData
    uid: azure.eventhub.EventData
  - fullName: ']'
    name: ']'
  uid: Iterator[azure.eventhub.EventData]
