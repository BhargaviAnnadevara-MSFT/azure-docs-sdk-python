### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.claim_ownership
  - azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.list_ownership
  - azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.update_checkpoint
  class: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  fullName: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  inheritance:
  - inheritance:
    - type: builtins.object
    type: abc.ABC
  langs:
  - python
  module: azure.eventhub.aio.eventprocessor.partition_manager
  name: PartitionManager
  summary: 'PartitionManager deals with the interaction with the chosen storage service.

    It''s able to list/claim ownership and save checkpoint.'
  syntax: {}
  type: class
  uid: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
- class: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  fullName: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.claim_ownership
  langs:
  - python
  module: azure.eventhub.aio.eventprocessor.partition_manager
  name: 'claim_ownership(ownership_list: typing.Iterable[typing.Dict[str, typing.Any]])
    -> typing.Iterable[typing.Dict[str, typing.Any]]'
  summary: Tries to claim a list of specified ownership.
  syntax:
    content: 'claim_ownership(ownership_list: typing.Iterable[typing.Dict[str, typing.Any]])
      -> typing.Iterable[typing.Dict[str, typing.Any]]'
    parameters:
    - description: Iterable of dictionaries containing all the ownership to claim.
      id: ownership_list
      type:
      - Iterable of dict
    return:
      description: 'Iterable of dictionaries containing the following partition ownership
        information:

        eventhub_name

        consumer_group_name

        owner_id

        partition_id

        owner_level

        offset

        sequence_number

        last_modified_time

        etag'
  type: method
  uid: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.claim_ownership
- class: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  fullName: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.list_ownership
  langs:
  - python
  module: azure.eventhub.aio.eventprocessor.partition_manager
  name: 'list_ownership(eventhub_name: str, consumer_group_name: str) -> typing.Iterable[typing.Dict[str,
    typing.Any]]'
  summary: Retrieves a complete ownership list from the chosen storage service.
  syntax:
    content: 'list_ownership(eventhub_name: str, consumer_group_name: str) -> typing.Iterable[typing.Dict[str,
      typing.Any]]'
    parameters:
    - description: 'The name of the specific Event Hub the ownership are associated
        with, relative to

        the Event Hubs namespace that contains it.'
      id: eventhub_name
      type:
      - str
    - description: The name of the consumer group the ownership are associated with.
      id: consumer_group_name
      type:
      - str
    return:
      description: 'Iterable of dictionaries containing the following partition ownership
        information:

        eventhub_name

        consumer_group_name

        owner_id

        partition_id

        owner_level

        offset

        sequence_number

        last_modified_time

        etag'
  type: method
  uid: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.list_ownership
- class: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  fullName: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.update_checkpoint
  langs:
  - python
  module: azure.eventhub.aio.eventprocessor.partition_manager
  name: update_checkpoint(eventhub_name, consumer_group_name, partition_id, owner_id,
    offset, sequence_number) -> None
  summary: 'Updates the checkpoint using the given information for the associated
    partition and

    consumer group in the chosen storage service.'
  syntax:
    content: update_checkpoint(eventhub_name, consumer_group_name, partition_id, owner_id,
      offset, sequence_number) -> None
    parameters:
    - description: 'The name of the specific Event Hub the ownership are associated
        with, relative to

        the Event Hubs namespace that contains it.'
      id: eventhub_name
      type:
      - str
    - description: The name of the consumer group the ownership are associated with.
      id: consumer_group_name
      type:
      - str
    - description: The partition id which the checkpoint is created for.
      id: partition_id
      type:
      - str
    - description: The identifier of the ~azure.eventhub.eventprocessor.EventProcessor.
      id: owner_id
      type:
      - str
    - description: The offset of the ~azure.eventhub.EventData the new checkpoint
        will be associated with.
      id: offset
      type:
      - str
    - description: 'The sequence_number of the ~azure.eventhub.EventData the new checkpoint

        will be associated with.'
      id: sequence_number
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.update_checkpoint
references:
- fullName: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.claim_ownership
  isExternal: false
  name: 'claim_ownership(ownership_list: typing.Iterable[typing.Dict[str, typing.Any]])
    -> typing.Iterable[typing.Dict[str, typing.Any]]'
  parent: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  uid: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.claim_ownership
- fullName: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.list_ownership
  isExternal: false
  name: 'list_ownership(eventhub_name: str, consumer_group_name: str) -> typing.Iterable[typing.Dict[str,
    typing.Any]]'
  parent: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  uid: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.list_ownership
- fullName: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.update_checkpoint
  isExternal: false
  name: update_checkpoint(eventhub_name, consumer_group_name, partition_id, owner_id,
    offset, sequence_number) -> None
  parent: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager
  uid: azure.eventhub.aio.eventprocessor.partition_manager.PartitionManager.update_checkpoint
