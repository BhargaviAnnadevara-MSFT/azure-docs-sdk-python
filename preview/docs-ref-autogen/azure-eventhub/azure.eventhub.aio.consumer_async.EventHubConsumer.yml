### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.aio.consumer_async.EventHubConsumer.close
  - azure.eventhub.aio.consumer_async.EventHubConsumer.last_enqueued_event_properties
  - azure.eventhub.aio.consumer_async.EventHubConsumer.queue_size
  - azure.eventhub.aio.consumer_async.EventHubConsumer.receive
  class: azure.eventhub.aio.consumer_async.EventHubConsumer
  fullName: azure.eventhub.aio.consumer_async.EventHubConsumer
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.eventhub.aio._consumer_producer_mixin_async.ConsumerProducerMixin
  langs:
  - python
  module: azure.eventhub.aio.consumer_async
  name: EventHubConsumer
  summary: 'A consumer responsible for reading EventData from a specific Event Hub

    partition and as a member of a specific consumer group.


    A consumer may be exclusive, which asserts ownership over the partition for the
    consumer

    group to ensure that only one consumer from that group is reading the from the
    partition.

    These exclusive consumers are sometimes referred to as "Epoch Consumers."


    A consumer may also be non-exclusive, allowing multiple consumers from the same
    consumer

    group to be actively reading events from the partition.  These non-exclusive consumers
    are

    sometimes referred to as "Non-Epoch Consumers."


    Please use the method *create_consumer* on *EventHubClient* for creating *EventHubConsumer*.'
  syntax:
    content: EventHubConsumer(client, source, **kwargs)
  type: class
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer
- class: azure.eventhub.aio.consumer_async.EventHubConsumer
  fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.close
  langs:
  - python
  module: azure.eventhub.aio.consumer_async
  name: close()
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op.'
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.close
- class: azure.eventhub.aio.consumer_async.EventHubConsumer
  fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.last_enqueued_event_properties
  langs:
  - python
  module: azure.eventhub.aio.consumer_async
  name: last_enqueued_event_properties
  summary: "The latest enqueued event information. This property will be updated each\
    \ time an event is received when\nthe receiver is created with *track_last_enqueued_event_properties*\
    \ being *True*.\nThe dict includes following information of the partition:\n\n\
    \   * *sequence_number* \n\n   * *offset* \n\n   * *enqueued_time* \n\n   * *retrieval_time*"
  syntax:
    return:
      type:
      - dict
      - None
  type: attribute
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.last_enqueued_event_properties
- class: azure.eventhub.aio.consumer_async.EventHubConsumer
  fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.queue_size
  langs:
  - python
  module: azure.eventhub.aio.consumer_async
  name: queue_size
  summary: The current size of the unprocessed Event queue.
  syntax:
    return:
      type:
      - int
  type: attribute
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.queue_size
- class: azure.eventhub.aio.consumer_async.EventHubConsumer
  fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.receive
  langs:
  - python
  module: azure.eventhub.aio.consumer_async
  name: receive(*, max_batch_size=None, timeout=None)
  summary: Receive events asynchronously from the EventHub.
  syntax:
    content: receive(*, max_batch_size=None, timeout=None)
    parameters:
    - description: 'Receive a batch of events. Batch size will

        be up to the maximum specified, but will return as soon as service

        returns no new events. If combined with a timeout and no events are

        retrieve before the time, the result will be empty. If no batch

        size is supplied, the prefetch size will be the maximum.'
      id: max_batch_size
      type:
      - int
    - description: 'The maximum wait time to build up the requested message count
        for the batch.

        If not specified, the default wait time specified when the consumer was created
        will be used.'
      id: timeout
      type:
      - float
    return:
      type:
      - list[azure.eventhub.common.EventData]
  type: method
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.receive
references:
- fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.close
  isExternal: false
  name: close()
  parent: azure.eventhub.aio.consumer_async.EventHubConsumer
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.close
- fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.last_enqueued_event_properties
  isExternal: false
  name: last_enqueued_event_properties
  parent: azure.eventhub.aio.consumer_async.EventHubConsumer
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.last_enqueued_event_properties
- fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.queue_size
  isExternal: false
  name: queue_size
  parent: azure.eventhub.aio.consumer_async.EventHubConsumer
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.queue_size
- fullName: azure.eventhub.aio.consumer_async.EventHubConsumer.receive
  isExternal: false
  name: receive(*, max_batch_size=None, timeout=None)
  parent: azure.eventhub.aio.consumer_async.EventHubConsumer
  uid: azure.eventhub.aio.consumer_async.EventHubConsumer.receive
- fullName: list[azure.eventhub.common.EventData]
  name: list[EventData]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.common.EventData
    name: EventData
    uid: azure.eventhub.common.EventData
  - fullName: ']'
    name: ']'
  uid: list[azure.eventhub.common.EventData]
