### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.aio.EventHubConsumerClient.close
  - azure.eventhub.aio.EventHubConsumerClient.from_connection_string
  - azure.eventhub.aio.EventHubConsumerClient.receive
  class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Create a new instance of the EventHubConsumerClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\1\\\\azure-eventhub-5.0.0b5\\\\samples\\\
    \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub import EventHubSharedKeyCredential\n\
    \   from azure.eventhub.aio import EventHubConsumerClient\n\n   hostname = os.environ['EVENT_HUB_HOSTNAME']\n\
    \   event_hub = os.environ['EVENT_HUB_NAME']\n   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n\
    \   shared_access_key = os.environ['EVENT_HUB_SAS_KEY']\n\n   consumer = EventHubConsumerClient(host=hostname,\n\
    \                                     event_hub_path=event_hub,\n            \
    \                         credential=EventHubSharedKeyCredential(shared_access_policy,\
    \ shared_access_key))\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.eventhub.client_abstract.EventHubClientAbstract
    type: azure.eventhub.aio.client_async.EventHubClient
  langs:
  - python
  module: azure.eventhub.aio
  name: EventHubConsumerClient
  summary: 'The EventHubProducerClient class defines a high level interface for

    receiving events from the Azure Event Hubs service.


    The main goal of *EventHubConsumerClient* is to receive events from all partitions
    of an EventHub with

    load balancing and checkpointing.


    When multiple *EventHubConsumerClient* works with one process, multiple processes,
    or multiple computer machines

    and if they use the same repository as the load balancing and checkpointing store,
    they will balance automatically.

    To enable the load balancing and / or checkpointing, partition_manager must be
    set when creating the

    *EventHubConsumerClient*.


    An *EventHubConsumerClient* can also receive from a specific partition when you
    call its method *receive()*

    and specify the partition_id.

    Load balancing won''t work in single-partition mode. But users can still save
    checkpoint if the partition_manager

    is set.'
  syntax:
    content: EventHubConsumerClient(host, event_hub_path, credential, **kwargs) ->
      None
    parameters:
    - description: The hostname of the Event Hub.
      id: host
      type:
      - str
    - description: The path of the specific Event Hub to connect the client to.
      id: event_hub_path
      type:
      - str
    - description: 'The credential object used for authentication which implements
        particular interface

        of getting tokens. It accepts <xref:azure.eventhub.EventHubSharedKeyCredential>,

        <xref:azure.eventhub.EventHubSASTokenCredential>, or credential objects generated
        by

        the azure-identity library and objects that implement *get_token(self, *scopes)*
        method.'
      id: credential
  type: class
  uid: azure.eventhub.aio.EventHubConsumerClient
- class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Close down the client.<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\1\\\\azure-eventhub-5.0.0b5\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n\n\
    \   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   event_hub\
    \ = os.environ['EVENT_HUB_NAME']\n\n   from azure.eventhub.aio import EventHubConsumerClient\n\
    \   consumer = EventHubConsumerClient.from_connection_string(\n       conn_str=event_hub_connection_str,\n\
    \       event_hub_path=event_hub\n   )\n\n   logger = logging.getLogger(\"azure.eventhub\"\
    )\n\n   async def on_events(partition_context, events):\n       logger.info(\"\
    Received {} messages from partition: {}\".format(\n           len(events), partition_context.partition_id))\n\
    \       # Do ops on received events\n\n   # The receive method is a coroutine\
    \ method which can be called by `await consumer.receive(...)` and it will block.\n\
    \   # so execute it in an async task to better demonstrate how to stop the receiving\
    \ by calling he close method.\n\n   recv_task = asyncio.ensure_future(consumer.receive(on_events=on_events,\
    \ consumer_group='$Default'))\n   await asyncio.sleep(3)  # keep receiving for\
    \ 3 seconds\n   recv_task.cancel()  # stop receiving\n\n   # Close down the consumer\
    \ handler explicitly.\n   await consumer.close()\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient.close
  langs:
  - python
  module: azure.eventhub.aio
  name: close()
  summary: Stop retrieving events from event hubs and close the underlying AMQP connection
    and links.
  syntax:
    content: close()
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubConsumerClient.close
- class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Create a new instance of the EventHubConsumerClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\1\\\\azure-eventhub-5.0.0b5\\\\samples\\\
    \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio import EventHubConsumerClient\n\
    \   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   event_hub\
    \ = os.environ['EVENT_HUB_NAME']\n   consumer = EventHubConsumerClient.from_connection_string(conn_str=event_hub_connection_str,\n\
    \                                                            event_hub_path=event_hub)\n\
    \n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
  langs:
  - python
  module: azure.eventhub.aio
  name: from_connection_string(conn_str, **kwargs)
  summary: Create an EventHubConsumerClient from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of an eventhub.
      id: conn_str
      type:
      - str
    - id: conn_str
  type: method
  uid: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
- class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Receive events from the EventHub.<!--[!code-python[Main](les\\async_samples\\\
    sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\source_code\\\\1\\\\azure-eventhub-5.0.0b5\\\\samples\\\\async_samples\\\
    \\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n       logger = logging.getLogger(\"azure.eventhub\")\n\n    \
    \   async def on_events(partition_context, events):\n           logger.info(\"\
    Received {} messages from partition: {}\".format(\n               len(events),\
    \ partition_context.partition_id))\n           # Do ops on received events\n \
    \      async with consumer:\n           await consumer.receive(on_events=on_events,\
    \ consumer_group=\"$default\")\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient.receive
  langs:
  - python
  module: azure.eventhub.aio
  name: 'receive(on_events, consumer_group: str, *, partition_id: str = None, owner_level:
    int = None, prefetch: int = 300, track_last_enqueued_event_properties: bool =
    False, initial_event_position=None, on_error=None, on_partition_initialize=None,
    on_partition_close=None) -> None'
  summary: Receive events from partition(s) optionally with load balancing and checkpointing.
  syntax:
    content: 'receive(on_events, consumer_group: str, *, partition_id: str = None,
      owner_level: int = None, prefetch: int = 300, track_last_enqueued_event_properties:
      bool = False, initial_event_position=None, on_error=None, on_partition_initialize=None,
      on_partition_close=None) -> None'
    parameters:
    - description: 'The callback function for handling received events. The callback
        takes two

        parameters: *partition_context* which contains partition context and *events*
        which are the received events.

        Please define the callback like *on_event(partition_context, events)*.

        For detailed partition context information, please refer to

        <xref:azure.eventhub.aio.PartitionContext>.'
      id: on_events
      type:
      - Callable[azure.eventhub.aio.PartitionContext, List[EventData]]
    - description: Receive events from the event hub for this consumer group
      id: consumer_group
      type:
      - str
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubConsumerClient.receive
references:
- fullName: azure.eventhub.aio.EventHubConsumerClient.close
  isExternal: false
  name: close()
  parent: azure.eventhub.aio.EventHubConsumerClient
  uid: azure.eventhub.aio.EventHubConsumerClient.close
- fullName: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.eventhub.aio.EventHubConsumerClient
  uid: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
- fullName: azure.eventhub.aio.EventHubConsumerClient.receive
  isExternal: false
  name: 'receive(on_events, consumer_group: str, *, partition_id: str = None, owner_level:
    int = None, prefetch: int = 300, track_last_enqueued_event_properties: bool =
    False, initial_event_position=None, on_error=None, on_partition_initialize=None,
    on_partition_close=None) -> None'
  parent: azure.eventhub.aio.EventHubConsumerClient
  uid: azure.eventhub.aio.EventHubConsumerClient.receive
- fullName: Callable[azure.eventhub.aio.PartitionContext, List[EventData]]
  name: Callable[PartitionContext, List[EventData]]
  spec.python:
  - fullName: Callable
    name: Callable
    uid: Callable
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.aio.PartitionContext
    name: PartitionContext
    uid: azure.eventhub.aio.PartitionContext
  - fullName: ', '
    name: ', '
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: EventData
    name: EventData
    uid: EventData
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Callable[azure.eventhub.aio.PartitionContext, List[EventData]]
