### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.aio.EventHubConsumerClient.close
  - azure.eventhub.aio.EventHubConsumerClient.from_connection_string
  - azure.eventhub.aio.EventHubConsumerClient.receive
  class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Create a new instance of the EventHubConsumerClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\1\\\\azure-eventhub-5.0.0b6\\\\samples\\\
    \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio import EventHubConsumerClient,\
    \ EventHubSharedKeyCredential\n\n   fully_qualified_namespace = os.environ['EVENT_HUB_HOSTNAME']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n\
    \   shared_access_key = os.environ['EVENT_HUB_SAS_KEY']\n\n   consumer = EventHubConsumerClient(fully_qualified_namespace=fully_qualified_namespace,\n\
    \                                     consumer_group='$Default',\n           \
    \                          eventhub_name=eventhub_name,\n                    \
    \                 credential=EventHubSharedKeyCredential(shared_access_policy,\
    \ shared_access_key))\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.eventhub._client_base.ClientBase
    type: azure.eventhub.aio._client_base_async.ClientBaseAsync
  langs:
  - python
  module: azure.eventhub.aio
  name: EventHubConsumerClient
  summary: 'The EventHubProducerClient class defines a high level interface for

    receiving events from the Azure Event Hubs service.


    The main goal of *EventHubConsumerClient* is to receive events from all partitions
    of an EventHub with

    load-balancing and checkpointing.


    When multiple *EventHubConsumerClient* operate within one or more processes or
    machines targeting the same

    checkpointing location, they will balance automatically.

    To enable the load-balancing and / or checkpointing, checkpoint_store must be
    set when creating the

    *EventHubConsumerClient*.


    An *EventHubConsumerClient* can also receive from a specific partition when you
    call its method *receive()*

    and specify the partition_id.

    Load-balancing won''t work in single-partition mode. But users can still save
    checkpoints if the checkpoint_store

    is set.'
  syntax:
    parameters:
    - description: 'The fully qualified host name for the Event Hubs namespace.

        This is likely to be similar to <yournamespace>.servicebus.windows.net'
      id: fully_qualified_namespace
      type:
      - str
    - description: The path of the specific Event Hub to connect the client to.
      id: eventhub_name
      type:
      - str
    - description: Receive events from the event hub for this consumer group.
      id: consumer_group
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        <xref:azure.eventhub.aio.EventHubSharedKeyCredential>, or credential objects

        generated by the azure-identity library and objects that implement the *get_token(self,
        *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
  type: class
  uid: azure.eventhub.aio.EventHubConsumerClient
- class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Close down the client.<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\1\\\\azure-eventhub-5.0.0b6\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n\n\
    \   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name\
    \ = os.environ['EVENT_HUB_NAME']\n\n   from azure.eventhub.aio import EventHubConsumerClient\n\
    \   consumer = EventHubConsumerClient.from_connection_string(\n       conn_str=event_hub_connection_str,\n\
    \       consumer_group='$Default',\n       eventhub_name=eventhub_name\n   )\n\
    \n   logger = logging.getLogger(\"azure.eventhub\")\n\n   async def on_event(partition_context,\
    \ event):\n       logger.info(\"Received event from partition: {}\".format(partition_context.partition_id))\n\
    \       # Do asynchronous ops on the received event\n\n   # The receive method\
    \ is a coroutine which will be blocking when awaited.\n   # It can be executed\
    \ in an async task for non-blocking behavior, and combined with the 'close' method.\n\
    \n   recv_task = asyncio.ensure_future(consumer.receive(on_event=on_event))\n\
    \   await asyncio.sleep(3)  # keep receiving for 3 seconds\n   recv_task.cancel()\
    \  # stop receiving\n\n   # Close down the consumer handler explicitly.\n   await\
    \ consumer.close()\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient.close
  langs:
  - python
  module: azure.eventhub.aio
  name: close() -> None
  summary: Stop retrieving events from the Event Hub and close the underlying AMQP
    connection and links.
  syntax:
    content: close() -> None
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubConsumerClient.close
- class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Create a new instance of the EventHubConsumerClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\1\\\\azure-eventhub-5.0.0b6\\\\samples\\\
    \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio import EventHubConsumerClient\n\
    \   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name\
    \ = os.environ['EVENT_HUB_NAME']\n   consumer = EventHubConsumerClient.from_connection_string(conn_str=event_hub_connection_str,\n\
    \                                                            consumer_group='$Default',\n\
    \                                                            eventhub_name=eventhub_name)\n\
    \n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
  langs:
  - python
  module: azure.eventhub.aio
  name: from_connection_string
  summary: Create an EventHubConsumerClient from a connection string.
  syntax:
    parameters:
    - description: The connection string of an Event Hub.
      id: conn_str
      type:
      - str
    - description: Receive events from the Event Hub for this consumer group.
      id: consumer_group
      type:
      - str
    return:
      type:
      - azure.eventhub.aio.EventHubConsumerClient
  type: method
  uid: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
- class: azure.eventhub.aio.EventHubConsumerClient
  example:
  - "Receive events from the EventHub.<!--[!code-python[Main](les\\async_samples\\\
    sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\source_code\\\\1\\\\azure-eventhub-5.0.0b6\\\\samples\\\\async_samples\\\
    \\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n       logger = logging.getLogger(\"azure.eventhub\")\n\n    \
    \   async def on_event(partition_context, event):\n           logger.info(\"Received\
    \ event from partition: {}\".format(partition_context.partition_id))\n       \
    \    # Do asnchronous ops on received events\n\n       async with consumer:\n\
    \           await consumer.receive(on_event=on_event)\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubConsumerClient.receive
  langs:
  - python
  module: azure.eventhub.aio
  name: receive
  summary: Receive events from partition(s), with optional load-balancing and checkpointing.
  syntax:
    parameters:
    - description: 'The callback function for handling a received event. The callback
        takes two

        parameters: *partition_context* which contains partition context and *event*
        which is the received event.

        The callback function should be defined like so: *on_event(partition_context,
        event)*.

        For detailed partition context information, please refer to

        <xref:azure.eventhub.aio.PartitionContext>.'
      id: on_event
      type:
      - Callable[azure.eventhub.aio.PartitionContext, azure.eventhub.EventData]
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubConsumerClient.receive
references:
- fullName: azure.eventhub.aio.EventHubConsumerClient.close
  isExternal: false
  name: close() -> None
  parent: azure.eventhub.aio.EventHubConsumerClient
  uid: azure.eventhub.aio.EventHubConsumerClient.close
- fullName: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
  isExternal: false
  name: from_connection_string
  parent: azure.eventhub.aio.EventHubConsumerClient
  uid: azure.eventhub.aio.EventHubConsumerClient.from_connection_string
- fullName: azure.eventhub.aio.EventHubConsumerClient.receive
  isExternal: false
  name: receive
  parent: azure.eventhub.aio.EventHubConsumerClient
  uid: azure.eventhub.aio.EventHubConsumerClient.receive
- fullName: Callable[azure.eventhub.aio.PartitionContext, azure.eventhub.EventData]
  name: Callable[PartitionContext, EventData]
  spec.python:
  - fullName: Callable
    name: Callable
    uid: Callable
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.aio.PartitionContext
    name: PartitionContext
    uid: azure.eventhub.aio.PartitionContext
  - fullName: ', '
    name: ', '
  - fullName: azure.eventhub.EventData
    name: EventData
    uid: azure.eventhub.EventData
  - fullName: ']'
    name: ']'
  uid: Callable[azure.eventhub.aio.PartitionContext, azure.eventhub.EventData]
