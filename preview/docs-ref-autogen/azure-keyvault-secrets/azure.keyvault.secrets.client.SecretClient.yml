### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.secrets.client.SecretClient.backup_secret
  - azure.keyvault.secrets.client.SecretClient.delete_secret
  - azure.keyvault.secrets.client.SecretClient.get_deleted_secret
  - azure.keyvault.secrets.client.SecretClient.get_secret
  - azure.keyvault.secrets.client.SecretClient.list_deleted_secrets
  - azure.keyvault.secrets.client.SecretClient.list_secret_versions
  - azure.keyvault.secrets.client.SecretClient.list_secrets
  - azure.keyvault.secrets.client.SecretClient.purge_deleted_secret
  - azure.keyvault.secrets.client.SecretClient.recover_deleted_secret
  - azure.keyvault.secrets.client.SecretClient.restore_secret
  - azure.keyvault.secrets.client.SecretClient.set_secret
  - azure.keyvault.secrets.client.SecretClient.update_secret
  class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.secrets._shared.client_base.KeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: SecretClient
  summary: A high-level interface for managing a vault's secrets.
  syntax:
    content: SecretClient(vault_url, credential, transport=None, api_version=None,
      **kwargs)
    parameters:
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity>'
      id: credential
    - description: URL of the vault the client will access
      id: vault_url
      type:
      - str
  type: class
  uid: azure.keyvault.secrets.client.SecretClient
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.backup_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: backup_secret(name, **kwargs)
  summary: Get a backup of all versions of a secret. Requires the secrets/backup permission.
  syntax:
    content: backup_secret(name, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      type:
      - str
    return:
      description: The raw bytes of the secret backup
      type:
      - bytes
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.backup_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.delete_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: delete_secret(name, **kwargs)
  summary: Delete all versions of a secret. Requires the secrets/delete permission.
  syntax:
    content: delete_secret(name, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.models.DeletedSecret
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.delete_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.get_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: get_deleted_secret(name, **kwargs)
  summary: 'Get a deleted secret. This is only possible in vaults with soft-delete
    enabled. Requires the secrets/get

    permission.'
  syntax:
    content: get_deleted_secret(name, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.models.DeletedSecret
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.get_deleted_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.get_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: get_secret(name, version=None, **kwargs)
  summary: Get a secret. Requires the secrets/get permission.
  syntax:
    content: get_secret(name, version=None, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    - description: (optional) Version of the secret to get. If unspecified, gets the
        latest version.
      id: version
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.models.Secret
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.get_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.list_deleted_secrets
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: list_deleted_secrets(**kwargs)
  summary: 'Lists all deleted secrets. This is only possible in vaults with soft-delete
    enabled. Requires the

    secrets/list permission.'
  syntax:
    content: list_deleted_secrets(**kwargs)
    return:
      description: An iterator of deleted secrets
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.secrets.models.DeletedSecret]
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.list_deleted_secrets
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.list_secret_versions
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: list_secret_versions(name, **kwargs)
  summary: 'List all versions of a secret, including their identifiers and attributes
    but not their values. Requires the

    secrets/list permission.'
  syntax:
    content: list_secret_versions(name, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      type:
      - str
    return:
      description: An iterator of secrets
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.secrets.models.SecretAttributes]
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.list_secret_versions
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.list_secrets
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: list_secrets(**kwargs)
  summary: 'List the latest identifier and attributes of all secrets in the vault,
    not including their values. Requires

    the secrets/list permission.'
  syntax:
    content: list_secrets(**kwargs)
    return:
      description: An iterator of secrets
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.secrets.models.SecretAttributes]
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.list_secrets
- class: azure.keyvault.secrets.client.SecretClient
  example:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes the secret\n   # (with\
    \ soft-delete disabled, delete_secret is permanent)\n   secret_client.purge_deleted_secret(\"\
    secret-name\")\n   ````\n"
  fullName: azure.keyvault.secrets.client.SecretClient.purge_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: purge_deleted_secret(name, **kwargs)
  summary: 'Permanently delete a secret. This is only possible in vaults with soft-delete
    enabled. If a vault

    doesn''t have soft-delete enabled, <xref:azure.keyvault.secrets.client.SecretClient.delete_secret>
    is permanent, and this method will return an error.


    Requires the secrets/purge permission.'
  syntax:
    content: purge_deleted_secret(name, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      type:
      - str
    return:
      description: None
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.purge_deleted_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.recover_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: recover_deleted_secret(name, **kwargs)
  summary: 'Recover a deleted secret to its latest version. This is only possible
    in vaults with soft-delete enabled.

    Requires the secrets/recover permission.'
  syntax:
    content: recover_deleted_secret(name, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      type:
      - str
    return:
      description: The recovered secret
      type:
      - azure.keyvault.secrets.models.SecretAttributes
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.recover_deleted_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.restore_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: restore_secret(backup, **kwargs)
  summary: Restore a backed up secret. Requires the secrets/restore permission.
  syntax:
    content: restore_secret(backup, **kwargs)
    parameters:
    - description: The raw bytes of the secret backup
      id: backup
      type:
      - bytes
    return:
      description: The restored secret
      type:
      - azure.keyvault.secrets.models.SecretAttributes
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.restore_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.set_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: set_secret(name, value, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  summary: 'Set a secret value. Create a new secret if `name` is not in use. If it
    is, create a new version of the

    secret.'
  syntax:
    content: set_secret(name, value, content_type=None, enabled=None, not_before=None,
      expires=None, tags=None, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    - description: The value of the secret
      id: value
      type:
      - str
    - description: (optional) An arbitrary string indicating the type of the secret,
        e.g. 'password'
      id: content_type
      type:
      - str
    - description: (optional) Whether the secret is enabled for use
      id: enabled
      type:
      - bool
    - description: (optional) Not before date of the secret in UTC
      id: not_before
      type:
      - datetime.datetime
    - description: (optional) Expiry date of the secret in UTC
      id: expires
      type:
      - datetime.datetime
    - description: (optional) Application specific metadata in the form of key-value
        pairs
      id: tags
      type:
      - dict
    return:
      type:
      - azure.keyvault.secrets.models.Secret
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.set_secret
- class: azure.keyvault.secrets.client.SecretClient
  fullName: azure.keyvault.secrets.client.SecretClient.update_secret
  langs:
  - python
  module: azure.keyvault.secrets.client
  name: update_secret(name, version=None, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  summary: 'Update a secret''s attributes, such as its tags or whether it''s enabled.
    Requires the secrets/set permission.


    **This method can''t change a secret''s value.** Use <xref:azure.keyvault.secrets.client.SecretClient.set_secret>
    to change values.'
  syntax:
    content: update_secret(name, version=None, content_type=None, enabled=None, not_before=None,
      expires=None, tags=None, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      type:
      - str
    - description: (optional) Version of the secret to update. If unspecified, the
        latest version is updated.
      id: version
      type:
      - str
    - description: (optional) An arbitrary string indicating the type of the secret,
        e.g. 'password'
      id: content_type
      type:
      - str
    - description: (optional) Whether the secret is enabled for use
      id: enabled
      type:
      - bool
    - description: (optional) Not before date of the secret in UTC
      id: not_before
      type:
      - datetime.datetime
    - description: (optional) Expiry date  of the secret in UTC.
      id: expires
      type:
      - datetime.datetime
    - description: (optional) Application specific metadata in the form of key-value
        pairs
      id: tags
      type:
      - dict
    return:
      type:
      - azure.keyvault.secrets.models.SecretAttributes
  type: method
  uid: azure.keyvault.secrets.client.SecretClient.update_secret
references:
- fullName: azure.keyvault.secrets.client.SecretClient.backup_secret
  isExternal: false
  name: backup_secret(name, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.backup_secret
- fullName: azure.keyvault.secrets.client.SecretClient.delete_secret
  isExternal: false
  name: delete_secret(name, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.delete_secret
- fullName: azure.keyvault.secrets.client.SecretClient.get_deleted_secret
  isExternal: false
  name: get_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.get_deleted_secret
- fullName: azure.keyvault.secrets.client.SecretClient.get_secret
  isExternal: false
  name: get_secret(name, version=None, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.get_secret
- fullName: azure.keyvault.secrets.client.SecretClient.list_deleted_secrets
  isExternal: false
  name: list_deleted_secrets(**kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.list_deleted_secrets
- fullName: azure.keyvault.secrets.client.SecretClient.list_secret_versions
  isExternal: false
  name: list_secret_versions(name, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.list_secret_versions
- fullName: azure.keyvault.secrets.client.SecretClient.list_secrets
  isExternal: false
  name: list_secrets(**kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.list_secrets
- fullName: azure.keyvault.secrets.client.SecretClient.purge_deleted_secret
  isExternal: false
  name: purge_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.purge_deleted_secret
- fullName: azure.keyvault.secrets.client.SecretClient.recover_deleted_secret
  isExternal: false
  name: recover_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.recover_deleted_secret
- fullName: azure.keyvault.secrets.client.SecretClient.restore_secret
  isExternal: false
  name: restore_secret(backup, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.restore_secret
- fullName: azure.keyvault.secrets.client.SecretClient.set_secret
  isExternal: false
  name: set_secret(name, value, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.set_secret
- fullName: azure.keyvault.secrets.client.SecretClient.update_secret
  isExternal: false
  name: update_secret(name, version=None, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  parent: azure.keyvault.secrets.client.SecretClient
  uid: azure.keyvault.secrets.client.SecretClient.update_secret
- fullName: azure.core.paging.ItemPaged[azure.keyvault.secrets.models.DeletedSecret]
  name: ItemPaged[DeletedSecret]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    uid: azure.keyvault.secrets.models.DeletedSecret
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.secrets.models.DeletedSecret]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.secrets.models.SecretAttributes]
  name: ItemPaged[SecretAttributes]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.models.SecretAttributes
    name: SecretAttributes
    uid: azure.keyvault.secrets.models.SecretAttributes
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.secrets.models.SecretAttributes]
