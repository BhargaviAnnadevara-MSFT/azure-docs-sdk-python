### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.file.aio.ShareClient.create_directory
  - azure.storage.file.aio.ShareClient.create_share
  - azure.storage.file.aio.ShareClient.create_snapshot
  - azure.storage.file.aio.ShareClient.delete_share
  - azure.storage.file.aio.ShareClient.get_directory_client
  - azure.storage.file.aio.ShareClient.get_file_client
  - azure.storage.file.aio.ShareClient.get_share_access_policy
  - azure.storage.file.aio.ShareClient.get_share_properties
  - azure.storage.file.aio.ShareClient.get_share_stats
  - azure.storage.file.aio.ShareClient.list_directories_and_files
  - azure.storage.file.aio.ShareClient.set_share_access_policy
  - azure.storage.file.aio.ShareClient.set_share_metadata
  - azure.storage.file.aio.ShareClient.set_share_quota
  class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.file._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.file._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.file.share_client.ShareClient
  langs:
  - python
  module: azure.storage.file.aio
  name: ShareClient
  summary: 'A client to interact with a specific share, although that share may not
    yet exist.


    For operations relating to a specific directory or file in this share, the clients
    for

    those entities can also be retrieved using the *get_directory_client* and *get_file_client*
    functions.'
  syntax:
    content: ShareClient(share_url, share=None, snapshot=None, credential=None, loop=None,
      **kwargs)
    parameters:
    - description: The full URI to the share.
      id: share_url
      type:
      - str
    - description: 'The share with which to interact. If specified, this value will
        override

        a share value specified in the share URL.'
      id: share
      type:
      - str
      - azure.storage.file.models.ShareProperties
    - description: An optional share snapshot on which to operate.
      id: snapshot
      type:
      - str
    - description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    variables:
    - description: 'The full endpoint URL to the Share, including snapshot and SAS
        token if used. This could be

        either the primary endpoint, or the secondard endpoint depending on the current
        *location_mode*.'
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
    - description: 'The full secondard endpoint URL if configured. If not available

        a ValueError will be raised. To explicitly specify a secondary hostname, use
        the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_endpoint
      type:
      - str
    - description: 'The hostname of the secondary endpoint. If not available this

        will be None. To explicitly specify a secondary hostname, use the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_hostname
      type:
      - str
    - description: 'The location mode that the client is currently using. By default

        this will be "primary". Options include "primary" and "secondary".'
      id: location_mode
      type:
      - str
  type: class
  uid: azure.storage.file.aio.ShareClient
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.create_directory
  langs:
  - python
  module: azure.storage.file.aio
  name: create_directory(directory_name, metadata=None, timeout=None, **kwargs)
  summary: 'Creates a directory in the share and returns a client to interact

    with the directory.'
  syntax:
    content: create_directory(directory_name, metadata=None, timeout=None, **kwargs)
    parameters:
    - description: The name of the directory.
      id: directory_name
      type:
      - str
    - description: Name-value pairs associated with the directory as metadata.
      id: metadata
      type:
      - dict(str, str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: DirectoryClient
      type:
      - azure.storage.file.directory_client.DirectoryClient
  type: method
  uid: azure.storage.file.aio.ShareClient.create_directory
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.create_share
  langs:
  - python
  module: azure.storage.file.aio
  name: create_share(metadata=None, quota=None, timeout=None, **kwargs)
  summary: 'Creates a new Share under the account. If a share with the

    same name already exists, the operation fails.'
  syntax:
    content: create_share(metadata=None, quota=None, timeout=None, **kwargs)
    parameters:
    - description: Name-value pairs associated with the share as metadata.
      id: metadata
      type:
      - dict(str, str)
    - description: The quota to be allotted.
      id: quota
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.file.aio.ShareClient.create_share
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.create_snapshot
  langs:
  - python
  module: azure.storage.file.aio
  name: create_snapshot(metadata=None, timeout=None, **kwargs)
  summary: 'Creates a snapshot of the share.


    A snapshot is a read-only version of a share that''s taken at a point in time.

    It can be read, copied, or deleted, but not modified. Snapshots provide a way

    to back up a share as it appears at a moment in time.


    A snapshot of a share has the same name as the base share from which the snapshot

    is taken, with a DateTime value appended to indicate the time at which the

    snapshot was taken.'
  syntax:
    content: create_snapshot(metadata=None, timeout=None, **kwargs)
    parameters:
    - description: Name-value pairs associated with the share as metadata.
      id: metadata
      type:
      - dict(str, str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Share-updated property dict (Snapshot ID, Etag, and last modified).
      type:
      - dict[str, Any]
  type: method
  uid: azure.storage.file.aio.ShareClient.create_snapshot
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.delete_share
  langs:
  - python
  module: azure.storage.file.aio
  name: delete_share(delete_snapshots=False, timeout=None, **kwargs)
  summary: 'Marks the specified share for deletion. The share is

    later deleted during garbage collection.'
  syntax:
    content: delete_share(delete_snapshots=False, timeout=None, **kwargs)
    parameters:
    - description: Indicates if snapshots are to be deleted.
      id: delete_snapshots
      type:
      - bool
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.file.aio.ShareClient.delete_share
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.get_directory_client
  langs:
  - python
  module: azure.storage.file.aio
  name: get_directory_client(directory_path=None)
  summary: 'Get a client to interact with the specified directory.

    The directory need not already exist.'
  syntax:
    content: get_directory_client(directory_path=None)
    parameters:
    - defaultValue: None
      description: Path to the specified directory.
      id: directory_path
      type:
      - str
    return:
      description: A Directory Client.
      type:
      - azure.storage.file.directory_client.DirectoryClient
  type: method
  uid: azure.storage.file.aio.ShareClient.get_directory_client
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.get_file_client
  langs:
  - python
  module: azure.storage.file.aio
  name: get_file_client(file_path)
  summary: 'Get a client to interact with the specified file.

    The file need not already exist.'
  syntax:
    content: get_file_client(file_path)
    parameters:
    - description: Path to the specified file.
      id: file_path
      type:
      - str
    return:
      description: A File Client.
      type:
      - azure.storage.file.file_client.FileClient
  type: method
  uid: azure.storage.file.aio.ShareClient.get_file_client
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.get_share_access_policy
  langs:
  - python
  module: azure.storage.file.aio
  name: get_share_access_policy(timeout=None, **kwargs)
  summary: 'Gets the permissions for the share. The permissions

    indicate whether files in a share may be accessed publicly.'
  syntax:
    content: get_share_access_policy(timeout=None, **kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Access policy information in a dict.
      type:
      - dict[str, str]
  type: method
  uid: azure.storage.file.aio.ShareClient.get_share_access_policy
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.get_share_properties
  langs:
  - python
  module: azure.storage.file.aio
  name: get_share_properties(timeout=None, **kwargs)
  summary: 'Returns all user-defined metadata and system properties for the

    specified share. The data returned does not include the shares''s

    list of files or directories.'
  syntax:
    content: get_share_properties(timeout=None, **kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: The share properties.
      type:
      - azure.storage.file.models.ShareProperties
  type: method
  uid: azure.storage.file.aio.ShareClient.get_share_properties
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.get_share_stats
  langs:
  - python
  module: azure.storage.file.aio
  name: get_share_stats(timeout=None, **kwargs)
  summary: 'Gets the approximate size of the data stored on the share in bytes.


    Note that this value may not include all recently created

    or recently re-sized files.'
  syntax:
    content: get_share_stats(timeout=None, **kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: The approximate size of the data (in bytes) stored on the share.
      type:
      - int
  type: method
  uid: azure.storage.file.aio.ShareClient.get_share_stats
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.list_directories_and_files
  langs:
  - python
  module: azure.storage.file.aio
  name: list_directories_and_files(directory_name=None, name_starts_with=None, marker=None,
    timeout=None, **kwargs)
  summary: Lists the directories and files under the share.
  syntax:
    content: list_directories_and_files(directory_name=None, name_starts_with=None,
      marker=None, timeout=None, **kwargs)
    parameters:
    - description: Name of a directory.
      id: directory_name
      type:
      - str
    - description: 'Filters the results to return only directories whose names

        begin with the specified prefix.'
      id: name_starts_with
      type:
      - str
    - description: 'An opaque continuation token. This value can be retrieved from
        the

        next_marker field of a previous generator object. If specified,

        this generator will begin returning results from this point.'
      id: marker
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An auto-paging iterable of dict-like DirectoryProperties and FileProperties
  type: method
  uid: azure.storage.file.aio.ShareClient.list_directories_and_files
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.set_share_access_policy
  langs:
  - python
  module: azure.storage.file.aio
  name: set_share_access_policy(signed_identifiers=None, timeout=None, **kwargs)
  summary: 'Sets the permissions for the share, or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether files in a share may be accessed publicly.'
  syntax:
    content: set_share_access_policy(signed_identifiers=None, timeout=None, **kwargs)
    parameters:
    - description: 'A dictionary of access policies to associate with the share. The

        dictionary may contain up to 5 elements. An empty dictionary

        will clear the access policies set on the service.'
      id: signed_identifiers
      type:
      - dict(str, <xref:azure.storage.file.models.AccessPolicy>)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.file.aio.ShareClient.set_share_access_policy
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.set_share_metadata
  langs:
  - python
  module: azure.storage.file.aio
  name: set_share_metadata(metadata, timeout=None, **kwargs)
  summary: 'Sets the metadata for the share.


    Each call to this operation replaces all existing metadata

    attached to the share. To remove all metadata from the share,

    call this operation with no metadata dict.'
  syntax:
    content: set_share_metadata(metadata, timeout=None, **kwargs)
    parameters:
    - description: Name-value pairs associated with the share as metadata.
      id: metadata
      type:
      - dict(str, str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.file.aio.ShareClient.set_share_metadata
- class: azure.storage.file.aio.ShareClient
  fullName: azure.storage.file.aio.ShareClient.set_share_quota
  langs:
  - python
  module: azure.storage.file.aio
  name: set_share_quota(quota, timeout=None, **kwargs)
  summary: Sets the quota for the share.
  syntax:
    content: set_share_quota(quota, timeout=None, **kwargs)
    parameters:
    - description: 'Specifies the maximum size of the share, in gigabytes.

        Must be greater than 0, and less than or equal to 5TB.'
      id: quota
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.file.aio.ShareClient.set_share_quota
references:
- fullName: azure.storage.file.aio.ShareClient.create_directory
  isExternal: false
  name: create_directory(directory_name, metadata=None, timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.create_directory
- fullName: azure.storage.file.aio.ShareClient.create_share
  isExternal: false
  name: create_share(metadata=None, quota=None, timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.create_share
- fullName: azure.storage.file.aio.ShareClient.create_snapshot
  isExternal: false
  name: create_snapshot(metadata=None, timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.create_snapshot
- fullName: azure.storage.file.aio.ShareClient.delete_share
  isExternal: false
  name: delete_share(delete_snapshots=False, timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.delete_share
- fullName: azure.storage.file.aio.ShareClient.get_directory_client
  isExternal: false
  name: get_directory_client(directory_path=None)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.get_directory_client
- fullName: azure.storage.file.aio.ShareClient.get_file_client
  isExternal: false
  name: get_file_client(file_path)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.get_file_client
- fullName: azure.storage.file.aio.ShareClient.get_share_access_policy
  isExternal: false
  name: get_share_access_policy(timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.get_share_access_policy
- fullName: azure.storage.file.aio.ShareClient.get_share_properties
  isExternal: false
  name: get_share_properties(timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.get_share_properties
- fullName: azure.storage.file.aio.ShareClient.get_share_stats
  isExternal: false
  name: get_share_stats(timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.get_share_stats
- fullName: azure.storage.file.aio.ShareClient.list_directories_and_files
  isExternal: false
  name: list_directories_and_files(directory_name=None, name_starts_with=None, marker=None,
    timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.list_directories_and_files
- fullName: azure.storage.file.aio.ShareClient.set_share_access_policy
  isExternal: false
  name: set_share_access_policy(signed_identifiers=None, timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.set_share_access_policy
- fullName: azure.storage.file.aio.ShareClient.set_share_metadata
  isExternal: false
  name: set_share_metadata(metadata, timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.set_share_metadata
- fullName: azure.storage.file.aio.ShareClient.set_share_quota
  isExternal: false
  name: set_share_quota(quota, timeout=None, **kwargs)
  parent: azure.storage.file.aio.ShareClient
  uid: azure.storage.file.aio.ShareClient.set_share_quota
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: dict(str, <xref:azure.storage.file.models.AccessPolicy>)
  name: dict(str, AccessPolicy>)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: <xref:azure.storage.file.models.AccessPolicy>
    name: AccessPolicy>
    uid: <xref:azure.storage.file.models.AccessPolicy>
  - fullName: )
    name: )
  uid: dict(str, <xref:azure.storage.file.models.AccessPolicy>)
