### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.keys.crypto.aio.CryptographyClient.decrypt
  - azure.keyvault.keys.crypto.aio.CryptographyClient.encrypt
  - azure.keyvault.keys.crypto.aio.CryptographyClient.get_key
  - azure.keyvault.keys.crypto.aio.CryptographyClient.key_id
  - azure.keyvault.keys.crypto.aio.CryptographyClient.sign
  - azure.keyvault.keys.crypto.aio.CryptographyClient.unwrap_key
  - azure.keyvault.keys.crypto.aio.CryptographyClient.verify
  - azure.keyvault.keys.crypto.aio.CryptographyClient.wrap_key
  class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.keys._shared.async_client_base.AsyncKeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: CryptographyClient
  summary: "Performs cryptographic operations using Azure Key Vault keys.\n\nKeyword\
    \ arguments\n   * **api_version** - version of the Key Vault API to use. Defaults\
    \ to the most recent. \n\nCreating a `CryptographyClient`:\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false,\
    \ \"highlight_args\": {}} -->\n\n````python\n\n   from azure.identity.aio import\
    \ DefaultAzureCredential\n   from azure.keyvault.keys.crypto.aio import CryptographyClient\n\
    \n   credential = DefaultAzureCredential()\n\n   # create a CryptographyClient\
    \ using a Key instance\n   key = await key_client.get_key(\"mykey\")\n   crypto_client\
    \ = CryptographyClient(key, credential)\n\n   # or a Key's id, which must include\
    \ a version\n   key_id = \"https://<your vault>.vault.azure.net/keys/mykey/fe4fdcab688c479a9aa80f01ffeac26\"\
    \n   crypto_client = CryptographyClient(key_id, credential)\n   ````\n\nYou can\
    \ also obtain a `CryptographyClient` from a <xref:azure.keyvault.keys.aio.KeyClient>:\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.keyvault.keys.aio import KeyClient\n\
    \n   credential = DefaultAzureCredential()\n   key_client = KeyClient(vault_endpoint=<your\
    \ vault url>, credential=credential)\n   crypto_client = key_client.get_cryptography_client(\"\
    mykey\")\n   ````"
  syntax:
    parameters:
    - description: 'Either a <xref:azure.keyvault.keys.models.Key> instance as returned
        by

        <xref:azure.keyvault.keys.aio.KeyClient.get_key>, or a string.

        If a string, the value must be the full identifier of an Azure Key Vault key
        with a version.'
      id: key
      type:
      - str
      - azure.keyvault.keys.models.Key
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity.aio>'
      id: credential
  type: class
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.decrypt
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: decrypt
  summary: "Decrypt a single block of encrypted data using the client's key. Requires\
    \ the keys/decrypt permission.\n\nThis method decrypts only a single block of\
    \ data, the size of which depends on the key and encryption algorithm.\n\nExample:\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   from azure.keyvault.keys.crypto\
    \ import EncryptionAlgorithm\n\n   result = await client.decrypt(EncryptionAlgorithm.rsa_oaep,\
    \ ciphertext)\n   print(result.decrypted_bytes)\n   ````"
  syntax:
    parameters:
    - description: encryption algorithm to use
      id: algorithm
      type:
      - azure.keyvault.keys.crypto.enums.EncryptionAlgorithm
    - description: encrypted bytes to decrypt
      id: ciphertext
      type:
      - bytes
    return:
      type:
      - <xref:azure.keyvault.keys.crypto.DecryptResult>
  type: method
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.decrypt
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.encrypt
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: encrypt
  summary: "Encrypt bytes using the client's key. Requires the keys/encrypt permission.\n\
    \nThis method encrypts only a single block of data, the size of which depends\
    \ on the key and encryption algorithm.\n\nExample:\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {}} -->\n\n````python\n\n   from azure.keyvault.keys.crypto import EncryptionAlgorithm\n\
    \n   # encrypt returns a tuple with the ciphertext and the metadata required to\
    \ decrypt it\n   key_id, algorithm, ciphertext, authentication_tag =\n       await\
    \ client.encrypt(EncryptionAlgorithm.rsa_oaep, b\"plaintext\")\n   ````"
  syntax:
    parameters:
    - description: encryption algorithm to use
      id: algorithm
      type:
      - azure.keyvault.keys.crypto.enums.EncryptionAlgorithm
    - description: bytes to encrypt
      id: plaintext
      type:
      - bytes
    return:
      type:
      - <xref:azure.keyvault.keys.crypto.EncryptResult>
  type: method
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.encrypt
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.get_key
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: get_key
  summary: 'Get the client''s <xref:azure.keyvault.keys.models.Key>.

    Can be *None*, if the client lacks keys/get permission.'
  syntax:
    return:
      type:
      - <xref:azure.keyvault.keys.models.Key>
      - None
  type: method
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.get_key
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.key_id
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: key_id
  summary: The full identifier of the client's key.
  syntax:
    return:
      type:
      - str
  type: attribute
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.key_id
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.sign
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: sign
  summary: "Create a signature from a digest using the client's key. Requires the\
    \ keys/sign permission.\n\nExample:\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n\
    ````python\n\n   import hashlib\n   from azure.keyvault.keys.crypto import SignatureAlgorithm\n\
    \n   digest = hashlib.sha256(b\"plaintext\").digest()\n\n   # sign returns a tuple\
    \ with the signature and the metadata required to verify it\n   key_id, algorithm,\
    \ signature = await client.sign(SignatureAlgorithm.rs256, digest)\n   ````"
  syntax:
    parameters:
    - description: signing algorithm
      id: algorithm
      type:
      - azure.keyvault.keys.crypto.enums.SignatureAlgorithm
    - description: hashed bytes to sign
      id: digest
      type:
      - bytes
    return:
      type:
      - <xref:azure.keyvault.keys.crypto.SignResult>
  type: method
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.sign
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.unwrap_key
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: unwrap_key
  summary: "Unwrap a key previously wrapped with the client's key. Requires the keys/unwrapKey\
    \ permission.\n\nExample:\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n\
    ````python\n\n   from azure.keyvault.keys.crypto import KeyWrapAlgorithm\n\n \
    \  result = await client.unwrap_key(KeyWrapAlgorithm.rsa_oaep, wrapped_bytes)\n\
    \   unwrapped_bytes = result.unwrapped_bytes\n   ````"
  syntax:
    parameters:
    - description: wrapping algorithm to use
      id: algorithm
      type:
      - azure.keyvault.keys.crypto.enums.KeyWrapAlgorithm
    - description: the wrapped key
      id: encrypted_key
      type:
      - bytes
    return:
      type:
      - <xref:azure.keyvault.keys.crypto.UnwrapKeyResult>
  type: method
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.unwrap_key
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.verify
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: verify
  summary: "Verify a signature using the client's key. Requires the keys/verify permission.\n\
    \nExample:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n\
    \   from azure.keyvault.keys.crypto import SignatureAlgorithm\n\n   verified =\
    \ await client.verify(SignatureAlgorithm.rs256, digest, signature)\n   assert\
    \ verified.result is True\n   ````"
  syntax:
    parameters:
    - description: verification algorithm
      id: algorithm
      type:
      - azure.keyvault.keys.crypto.enums.SignatureAlgorithm
    - description: ''
      id: digest
      type:
      - bytes
    - description: ''
      id: signature
      type:
      - bytes
    return:
      type:
      - <xref:azure.keyvault.keys.crypto.VerifyResult>
  type: method
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.verify
- class: azure.keyvault.keys.crypto.aio.CryptographyClient
  fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.wrap_key
  langs:
  - python
  module: azure.keyvault.keys.crypto.aio
  name: wrap_key
  summary: "Wrap a key with the client's key. Requires the keys/wrapKey permission.\n\
    \nExample:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n\
    \   from azure.keyvault.keys.crypto import KeyWrapAlgorithm\n\n   # wrap returns\
    \ a tuple with the wrapped bytes and the metadata required to unwrap the key\n\
    \   key_id, wrap_algorithm, wrapped_bytes = await client.wrap_key(KeyWrapAlgorithm.rsa_oaep,\
    \ key_bytes)\n   ````"
  syntax:
    parameters:
    - description: wrapping algorithm to use
      id: algorithm
      type:
      - azure.keyvault.keys.crypto.enums.KeyWrapAlgorithm
    - description: key to wrap
      id: key
      type:
      - bytes
    return:
      type:
      - <xref:azure.keyvault.keys.crypto.WrapKeyResult>
  type: method
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.wrap_key
references:
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.decrypt
  isExternal: false
  name: decrypt
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.decrypt
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.encrypt
  isExternal: false
  name: encrypt
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.encrypt
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.get_key
  isExternal: false
  name: get_key
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.get_key
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.key_id
  isExternal: false
  name: key_id
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.key_id
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.sign
  isExternal: false
  name: sign
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.sign
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.unwrap_key
  isExternal: false
  name: unwrap_key
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.unwrap_key
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.verify
  isExternal: false
  name: verify
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.verify
- fullName: azure.keyvault.keys.crypto.aio.CryptographyClient.wrap_key
  isExternal: false
  name: wrap_key
  parent: azure.keyvault.keys.crypto.aio.CryptographyClient
  uid: azure.keyvault.keys.crypto.aio.CryptographyClient.wrap_key
