### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.keys.aio.client.KeyClient.backup_key
  - azure.keyvault.keys.aio.client.KeyClient.create_ec_key
  - azure.keyvault.keys.aio.client.KeyClient.create_key
  - azure.keyvault.keys.aio.client.KeyClient.create_rsa_key
  - azure.keyvault.keys.aio.client.KeyClient.delete_key
  - azure.keyvault.keys.aio.client.KeyClient.get_cryptography_client
  - azure.keyvault.keys.aio.client.KeyClient.get_deleted_key
  - azure.keyvault.keys.aio.client.KeyClient.get_key
  - azure.keyvault.keys.aio.client.KeyClient.import_key
  - azure.keyvault.keys.aio.client.KeyClient.list_deleted_keys
  - azure.keyvault.keys.aio.client.KeyClient.list_key_versions
  - azure.keyvault.keys.aio.client.KeyClient.list_keys
  - azure.keyvault.keys.aio.client.KeyClient.purge_deleted_key
  - azure.keyvault.keys.aio.client.KeyClient.recover_deleted_key
  - azure.keyvault.keys.aio.client.KeyClient.restore_key
  - azure.keyvault.keys.aio.client.KeyClient.unwrap_key
  - azure.keyvault.keys.aio.client.KeyClient.update_key
  - azure.keyvault.keys.aio.client.KeyClient.wrap_key
  class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.keys._shared.async_client_base.AsyncKeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: KeyClient
  summary: A high-level asynchronous interface for managing a vault's keys.
  syntax:
    parameters:
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity.aio>'
      id: credential
    - description: URL of the vault the client will access
      id: vault_url
      type:
      - str
  type: class
  uid: azure.keyvault.keys.aio.client.KeyClient
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.backup_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'backup_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) -> bytes'
  summary: 'Back up a key in a protected form that can''t be used outside Azure Key
    Vault. This is intended to allow

    copying a key from one vault to another. Requires the key/backup permission.


    Backup / restore cannot be performed across geopolitical boundaries. For example,
    a backup from a vault in a

    USA region cannot be restored to a vault in an EU region.'
  syntax:
    content: 'backup_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
      bytes'
    parameters:
    - description: The name of the key
      id: name
      type:
      - str
    return:
      description: The raw bytes of the key backup
      type:
      - bytes
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.backup_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.create_ec_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'create_ec_key(name: str, hsm: bool, curve: typing.Union[str, NoneType] =
    None, key_operations: typing.Union[typing.List[str], NoneType] = None, enabled:
    typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
    NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
    tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  summary: 'Create a new elliptic curve key. If `name` is already in use, create a
    new version of the key. Requires

    the keys/create permission.'
  syntax:
    content: 'create_ec_key(name: str, hsm: bool, curve: typing.Union[str, NoneType]
      = None, key_operations: typing.Union[typing.List[str], NoneType] = None, enabled:
      typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
      NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
      tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
      typing.Any]) -> azure.keyvault.keys.models.Key'
    parameters:
    - description: The name for the new key. Key Vault will generate the key's version.
      id: name
      type:
      - str
    - description: Whether to create as a hardware key (HSM) or software key.
      id: hsm
      type:
      - bool
    - description: (optional) Elliptic curve name. Defaults to the NIST P-256 elliptic
        curve.
      id: curve
      type:
      - azure.keyvault.keys.enums.JsonWebKeyCurveName
      - str
    - description: (optional) Allowed key operations
      id: key_operations
      type:
      - list(azure.keyvault.keys.enums.JsonWebKeyOperation)
    - description: (optional) Whether the key is enabled for use
      id: enabled
      type:
      - bool
    - description: (optional) Expiry date of the key in UTC
      id: expires
      type:
      - datetime.datetime
    - description: (optional) Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - description: (optional) Application specific metadata in the form of key-value
        pairs
      id: tags
      type:
      - dict
    return:
      description: The created key
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.create_ec_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.create_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'create_key(name: str, key_type: str, size: typing.Union[int, NoneType] =
    None, curve: typing.Union[str, NoneType] = None, key_operations: typing.Union[typing.List[str],
    NoneType] = None, enabled: typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
    NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
    tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  summary: 'Create a key. If `name` is already in use, create a new version of the
    key. Requires the keys/create

    permission.'
  syntax:
    content: 'create_key(name: str, key_type: str, size: typing.Union[int, NoneType]
      = None, curve: typing.Union[str, NoneType] = None, key_operations: typing.Union[typing.List[str],
      NoneType] = None, enabled: typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
      NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
      tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
      typing.Any]) -> azure.keyvault.keys.models.Key'
    parameters:
    - description: The name of the new key. Key Vault will generate the key's version.
      id: name
      type:
      - str
    - description: The type of key to create
      id: key_type
      type:
      - str
      - azure.keyvault.keys.enums.JsonWebKeyType
    - description: (optional) RSA key size in bits, for example 2048, 3072, or 4096.
      id: size
      type:
      - int
    - description: (optional) Allowed key operations
      id: key_operations
      type:
      - list(str
      - azure.keyvault.keys.enums.JsonWebKeyOperation)
    - description: (optional) Whether the key is enabled for use
      id: enabled
      type:
      - bool
    - description: (optional) Expiry date of the key in UTC
      id: expires
    - description: (optional) Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - description: (optional) Application specific metadata in the form of key-value
        pairs
      id: tags
      type:
      - dict
    - description: (optional) Elliptic curve name. Defaults to the NIST P-256 elliptic
        curve.
      id: curve
      type:
      - azure.keyvault.keys.enums.JsonWebKeyCurveName
      - str
    return:
      description: The created key
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.create_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.create_rsa_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'create_rsa_key(name: str, hsm: bool, size: typing.Union[int, NoneType] =
    None, key_operations: typing.Union[typing.List[str], NoneType] = None, enabled:
    typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
    NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
    tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  summary: 'Create a new RSA key. If `name` is already in use, create a new version
    of the key. Requires the

    keys/create permission.'
  syntax:
    content: 'create_rsa_key(name: str, hsm: bool, size: typing.Union[int, NoneType]
      = None, key_operations: typing.Union[typing.List[str], NoneType] = None, enabled:
      typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
      NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
      tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
      typing.Any]) -> azure.keyvault.keys.models.Key'
    parameters:
    - description: The name for the new key. Key Vault will generate the key's version.
      id: name
      type:
      - str
    - description: Whether to create a hardware key (HSM) or software key
      id: hsm
      type:
      - bool
    - description: (optional) Key size in bits, for example 2048, 3072, or 4096
      id: size
      type:
      - int
    - description: (optional) Allowed key operations
      id: key_operations
      type:
      - list(str
      - azure.keyvault.keys.enums.JsonWebKeyOperation)
    - description: (optional) Whether the key is enabled for use
      id: enabled
      type:
      - bool
    - description: (optional) Expiry date of the key in UTC
      id: expires
    - description: (optional) Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - description: (optional) Application specific metadata in the form of key-value
        pairs
      id: tags
      type:
      - dict
    return:
      description: The created key
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.create_rsa_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.delete_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'delete_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.DeletedKey'
  summary: Delete all versions of a key and its cryptographic material. Requires the
    keys/delete permission.
  syntax:
    content: 'delete_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
      azure.keyvault.keys.models.DeletedKey'
    parameters:
    - description: The name of the key to delete.
      id: name
      type:
      - str
    return:
      description: The deleted key
      type:
      - azure.keyvault.keys.models.DeletedKey
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.delete_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.get_cryptography_client
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'get_cryptography_client(key: typing.Union[azure.keyvault.keys.models.Key,
    str], **kwargs: typing.Any) -> azure.keyvault.keys.crypto.aio.client.CryptographyClient'
  syntax:
    content: 'get_cryptography_client(key: typing.Union[azure.keyvault.keys.models.Key,
      str], **kwargs: typing.Any) -> azure.keyvault.keys.crypto.aio.client.CryptographyClient'
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.get_cryptography_client
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.get_deleted_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'get_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
    azure.keyvault.keys.models.DeletedKey'
  summary: 'Get a deleted key. This is only possible in a vault with soft-delete enabled.
    Requires the keys/get

    permission.'
  syntax:
    content: 'get_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any])
      -> azure.keyvault.keys.models.DeletedKey'
    parameters:
    - description: The name of the key
      id: name
      type:
      - str
    return:
      description: The deleted key
      type:
      - azure.keyvault.keys.models.DeletedKey
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.get_deleted_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.get_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'get_key(name: str, version: typing.Union[str, NoneType] = None, **kwargs:
    typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.Key'
  summary: Get a key's attributes and, if it's an asymmetric key, its public material.
    Requires the keys/get permission.
  syntax:
    content: 'get_key(name: str, version: typing.Union[str, NoneType] = None, **kwargs:
      typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.Key'
    parameters:
    - description: The name of the key to get.
      id: name
      type:
      - str
    - description: '(optional) A specific version of the key to get. If not specified,
        gets the latest version

        of the key.'
      id: version
      type:
      - str
    return:
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.get_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.import_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'import_key(name: str, key: azure.keyvault.keys.models.JsonWebKey, hsm: typing.Union[bool,
    NoneType] = None, enabled: typing.Union[bool, NoneType] = None, not_before: typing.Union[datetime.datetime,
    NoneType] = None, expires: typing.Union[datetime.datetime, NoneType] = None, tags:
    typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  summary: 'Import an externally created key. If `name` is already in use, import
    the key as a new version. Requires

    the keys/import permission.'
  syntax:
    content: 'import_key(name: str, key: azure.keyvault.keys.models.JsonWebKey, hsm:
      typing.Union[bool, NoneType] = None, enabled: typing.Union[bool, NoneType] =
      None, not_before: typing.Union[datetime.datetime, NoneType] = None, expires:
      typing.Union[datetime.datetime, NoneType] = None, tags: typing.Union[typing.Dict[str,
      str], NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.Key'
    parameters:
    - description: Name for the imported key
      id: name
      type:
      - str
    - description: The JSON web key to import
      id: key
      type:
      - azure.keyvault.keys.models.JsonWebKey
    - description: (optional) Whether to import as a hardware key (HSM) or software
        key
      id: hsm
      type:
      - bool
    - description: (optional) Whether the key is enabled for use
      id: enabled
      type:
      - bool
    - description: (optional) Expiry date of the key in UTC
      id: expires
    - description: (optional) Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - description: (optional) Application specific metadata in the form of key-value
        pairs
      id: tags
      type:
      - dict
    return:
      description: The imported key
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.import_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.list_deleted_keys
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'list_deleted_keys(**kwargs: typing.Mapping[str, typing.Any]) -> typing.AsyncIterable[azure.keyvault.keys.models.DeletedKey]'
  summary: 'List all deleted keys, including the public part of each. This is only
    possible in a vault with soft-delete

    enabled. Requires the keys/list permission.'
  syntax:
    content: 'list_deleted_keys(**kwargs: typing.Mapping[str, typing.Any]) -> typing.AsyncIterable[azure.keyvault.keys.models.DeletedKey]'
    return:
      description: An iterator of deleted keys
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.keyvault.keys.models.DeletedKey]
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.list_deleted_keys
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.list_key_versions
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'list_key_versions(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
    typing.AsyncIterable[azure.keyvault.keys.models.KeyBase]'
  summary: List the identifiers, attributes, and tags of a key's versions. Requires
    the keys/list permission.
  syntax:
    content: 'list_key_versions(name: str, **kwargs: typing.Mapping[str, typing.Any])
      -> typing.AsyncIterable[azure.keyvault.keys.models.KeyBase]'
    parameters:
    - description: The name of the key
      id: name
      type:
      - str
    return:
      description: An iterator of keys without their cryptographic material
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.keyvault.keys.models.KeyBase]
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.list_key_versions
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.list_keys
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'list_keys(**kwargs: typing.Mapping[str, typing.Any]) -> typing.AsyncIterable[azure.keyvault.keys.models.KeyBase]'
  summary: List identifiers, attributes, and tags of all keys in the vault. Requires
    the keys/list permission.
  syntax:
    content: 'list_keys(**kwargs: typing.Mapping[str, typing.Any]) -> typing.AsyncIterable[azure.keyvault.keys.models.KeyBase]'
    return:
      description: An iterator of keys without their cryptographic material or version
        information
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.keyvault.keys.models.KeyBase]
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.list_keys
- class: azure.keyvault.keys.aio.client.KeyClient
  example:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes a deleted key\n   #\
    \ (with soft-delete disabled, delete_key is permanent)\n   await key_client.purge_deleted_key(\"\
    key-name\")\n   ````\n"
  fullName: azure.keyvault.keys.aio.client.KeyClient.purge_deleted_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'purge_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
    None'
  summary: 'Permanently delete the specified key. This is only possible in vaults
    with soft-delete enabled. If a vault

    does not have soft-delete enabled, <xref:azure.keyvault.keys.aio.client.KeyClient.delete_key>
    is permanent, and this method will return an error.


    Requires the keys/purge permission.'
  syntax:
    content: 'purge_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any])
      -> None'
    parameters:
    - description: The name of the key
      id: name
      type:
      - str
    return:
      description: None
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.purge_deleted_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.recover_deleted_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'recover_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any])
    -> azure.keyvault.keys.models.Key'
  summary: 'Recover a deleted key to its latest version. This is only possible in
    vaults with soft-delete enabled. If a

    vault does not have soft-delete enabled, <xref:azure.keyvault.keys.aio.client.KeyClient.delete_key>
    is permanent, and this method will return an error.

    Attempting to recover an non-deleted key will also return an error.


    Requires the keys/recover permission.'
  syntax:
    content: 'recover_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any])
      -> azure.keyvault.keys.models.Key'
    parameters:
    - description: The name of the deleted key
      id: name
      type:
      - str
    return:
      description: The recovered key
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.recover_deleted_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.restore_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'restore_key(backup: bytes, **kwargs: typing.Mapping[str, typing.Any]) ->
    azure.keyvault.keys.models.Key'
  summary: 'Restore a key backup to the vault. This imports all versions of the key,
    with its name, attributes, and

    access control policies. Requires the keys/restore permission.


    If the backed up key''s name is already in use in the target vault, restoring
    it will fail. Also, the target

    vault must be owned by the same Microsoft Azure subscription as the source vault.'
  syntax:
    content: 'restore_key(backup: bytes, **kwargs: typing.Mapping[str, typing.Any])
      -> azure.keyvault.keys.models.Key'
    parameters:
    - description: The raw bytes of the key backup
      id: backup
      type:
      - bytes
    return:
      description: The restored key
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.restore_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.unwrap_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'unwrap_key(name: str, algorithm: str, value: bytes, version: typing.Union[str,
    NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.KeyOperationResult'
  summary: 'Unwraps a symmetric key using the specified key that was initially used

    for wrapping that key.


    The UNWRAP operation supports decryption of a symmetric key using the

    target key encryption key. This operation is the reverse of the WRAP

    operation. The UNWRAP operation applies to asymmetric and symmetric

    keys stored in Azure Key Vault since it uses the private portion of the

    key. This operation requires the keys/unwrapKey permission.'
  syntax:
    content: 'unwrap_key(name: str, algorithm: str, value: bytes, version: typing.Union[str,
      NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.KeyOperationResult'
    parameters:
    - description: The name of the key.
      id: name
      type:
      - str
    - description: The version of the key.
      id: version
      type:
      - str
    - description: 'algorithm identifier. Possible values include:

        ''RSA-OAEP'', ''RSA-OAEP-256'', ''RSA1_5'''
      id: algorithm
      type:
      - str
      - azure.keyvault.keys.models.JsonWebKeyEncryptionAlgorithm
    - description: ''
      id: value
      type:
      - bytes
    return:
      description: The unwrapped symmetric key.
      type:
      - azure.keyvault.keys._models.KeyOperationResult
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.unwrap_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.update_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'update_key(name: str, version: typing.Union[str, NoneType] = None, key_operations:
    typing.Union[typing.List[str], NoneType] = None, enabled: typing.Union[bool, NoneType]
    = None, not_before: typing.Union[datetime.datetime, NoneType] = None, expires:
    typing.Union[datetime.datetime, NoneType] = None, tags: typing.Union[typing.Dict[str,
    str], NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.Key'
  summary: 'Change attributes of a key. Cannot change a key''s cryptographic material.
    Requires the keys/update

    permission.'
  syntax:
    content: 'update_key(name: str, version: typing.Union[str, NoneType] = None, key_operations:
      typing.Union[typing.List[str], NoneType] = None, enabled: typing.Union[bool,
      NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
      expires: typing.Union[datetime.datetime, NoneType] = None, tags: typing.Union[typing.Dict[str,
      str], NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.Key'
    parameters:
    - description: The name of key to update
      id: name
      type:
      - str
    - description: (optional) The version of the key to update
      id: version
      type:
      - str
    - description: (optional) Allowed key operations
      id: key_operations
      type:
      - list(str
      - azure.keyvault.keys.enums.JsonWebKeyOperation)
    - description: (optional) Whether the key is enabled for use
      id: enabled
      type:
      - bool
    - description: (optional) Expiry date of the key in UTC
      id: expires
      type:
      - datetime.datetime
    - description: (optional) Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - description: (optional) Application specific metadata in the form of key-value
        pairs
      id: tags
      type:
      - dict
    return:
      description: The updated key
      type:
      - azure.keyvault.keys.models.Key
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.update_key
- class: azure.keyvault.keys.aio.client.KeyClient
  fullName: azure.keyvault.keys.aio.client.KeyClient.wrap_key
  langs:
  - python
  module: azure.keyvault.keys.aio.client
  name: 'wrap_key(name: str, algorithm: str, value: bytes, version: typing.Union[str,
    NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.KeyOperationResult'
  summary: 'Wraps a symmetric key using a specified key.


    The WRAP operation supports encryption of a symmetric key using a key

    encryption key that has previously been stored in an Azure Key Vault.

    The WRAP operation is only strictly necessary for symmetric keys stored

    in Azure Key Vault since protection with an asymmetric key can be

    performed using the public portion of the key. This operation is

    supported for asymmetric keys as a convenience for callers that have a

    key-reference but do not have access to the public key material. This

    operation requires the keys/wrapKey permission.'
  syntax:
    content: 'wrap_key(name: str, algorithm: str, value: bytes, version: typing.Union[str,
      NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.KeyOperationResult'
    parameters:
    - description: The name of the key.
      id: name
      type:
      - str
    - description: The version of the key.
      id: version
      type:
      - str
    - description: 'algorithm identifier. Possible values include:

        ''RSA-OAEP'', ''RSA-OAEP-256'', ''RSA1_5'''
      id: algorithm
      type:
      - str
      - azure.keyvault.keys.models.JsonWebKeyEncryptionAlgorithm
    - description: ''
      id: value
      type:
      - bytes
    return:
      description: The wrapped symmetric key.
      type:
      - azure.keyvault.keys._models.KeyOperationResult
  type: method
  uid: azure.keyvault.keys.aio.client.KeyClient.wrap_key
references:
- fullName: azure.keyvault.keys.aio.client.KeyClient.backup_key
  isExternal: false
  name: 'backup_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) -> bytes'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.backup_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.create_ec_key
  isExternal: false
  name: 'create_ec_key(name: str, hsm: bool, curve: typing.Union[str, NoneType] =
    None, key_operations: typing.Union[typing.List[str], NoneType] = None, enabled:
    typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
    NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
    tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.create_ec_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.create_key
  isExternal: false
  name: 'create_key(name: str, key_type: str, size: typing.Union[int, NoneType] =
    None, curve: typing.Union[str, NoneType] = None, key_operations: typing.Union[typing.List[str],
    NoneType] = None, enabled: typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
    NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
    tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.create_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.create_rsa_key
  isExternal: false
  name: 'create_rsa_key(name: str, hsm: bool, size: typing.Union[int, NoneType] =
    None, key_operations: typing.Union[typing.List[str], NoneType] = None, enabled:
    typing.Union[bool, NoneType] = None, expires: typing.Union[datetime.datetime,
    NoneType] = None, not_before: typing.Union[datetime.datetime, NoneType] = None,
    tags: typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.create_rsa_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.delete_key
  isExternal: false
  name: 'delete_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.DeletedKey'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.delete_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.get_cryptography_client
  isExternal: false
  name: 'get_cryptography_client(key: typing.Union[azure.keyvault.keys.models.Key,
    str], **kwargs: typing.Any) -> azure.keyvault.keys.crypto.aio.client.CryptographyClient'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.get_cryptography_client
- fullName: azure.keyvault.keys.aio.client.KeyClient.get_deleted_key
  isExternal: false
  name: 'get_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
    azure.keyvault.keys.models.DeletedKey'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.get_deleted_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.get_key
  isExternal: false
  name: 'get_key(name: str, version: typing.Union[str, NoneType] = None, **kwargs:
    typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.get_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.import_key
  isExternal: false
  name: 'import_key(name: str, key: azure.keyvault.keys.models.JsonWebKey, hsm: typing.Union[bool,
    NoneType] = None, enabled: typing.Union[bool, NoneType] = None, not_before: typing.Union[datetime.datetime,
    NoneType] = None, expires: typing.Union[datetime.datetime, NoneType] = None, tags:
    typing.Union[typing.Dict[str, str], NoneType] = None, **kwargs: typing.Mapping[str,
    typing.Any]) -> azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.import_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.list_deleted_keys
  isExternal: false
  name: 'list_deleted_keys(**kwargs: typing.Mapping[str, typing.Any]) -> typing.AsyncIterable[azure.keyvault.keys.models.DeletedKey]'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.list_deleted_keys
- fullName: azure.keyvault.keys.aio.client.KeyClient.list_key_versions
  isExternal: false
  name: 'list_key_versions(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
    typing.AsyncIterable[azure.keyvault.keys.models.KeyBase]'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.list_key_versions
- fullName: azure.keyvault.keys.aio.client.KeyClient.list_keys
  isExternal: false
  name: 'list_keys(**kwargs: typing.Mapping[str, typing.Any]) -> typing.AsyncIterable[azure.keyvault.keys.models.KeyBase]'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.list_keys
- fullName: azure.keyvault.keys.aio.client.KeyClient.purge_deleted_key
  isExternal: false
  name: 'purge_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any]) ->
    None'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.purge_deleted_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.recover_deleted_key
  isExternal: false
  name: 'recover_deleted_key(name: str, **kwargs: typing.Mapping[str, typing.Any])
    -> azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.recover_deleted_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.restore_key
  isExternal: false
  name: 'restore_key(backup: bytes, **kwargs: typing.Mapping[str, typing.Any]) ->
    azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.restore_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.unwrap_key
  isExternal: false
  name: 'unwrap_key(name: str, algorithm: str, value: bytes, version: typing.Union[str,
    NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.KeyOperationResult'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.unwrap_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.update_key
  isExternal: false
  name: 'update_key(name: str, version: typing.Union[str, NoneType] = None, key_operations:
    typing.Union[typing.List[str], NoneType] = None, enabled: typing.Union[bool, NoneType]
    = None, not_before: typing.Union[datetime.datetime, NoneType] = None, expires:
    typing.Union[datetime.datetime, NoneType] = None, tags: typing.Union[typing.Dict[str,
    str], NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.Key'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.update_key
- fullName: azure.keyvault.keys.aio.client.KeyClient.wrap_key
  isExternal: false
  name: 'wrap_key(name: str, algorithm: str, value: bytes, version: typing.Union[str,
    NoneType] = None, **kwargs: typing.Mapping[str, typing.Any]) -> azure.keyvault.keys.models.KeyOperationResult'
  parent: azure.keyvault.keys.aio.client.KeyClient
  uid: azure.keyvault.keys.aio.client.KeyClient.wrap_key
- fullName: list(azure.keyvault.keys.enums.JsonWebKeyOperation)
  name: list(JsonWebKeyOperation)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.keyvault.keys.enums.JsonWebKeyOperation
    name: JsonWebKeyOperation
    uid: azure.keyvault.keys.enums.JsonWebKeyOperation
  - fullName: )
    name: )
  uid: list(azure.keyvault.keys.enums.JsonWebKeyOperation)
- fullName: list(str
  name: list(str
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  uid: list(str
- fullName: azure.keyvault.keys.enums.JsonWebKeyOperation)
  name: JsonWebKeyOperation)
  spec.python:
  - fullName: azure.keyvault.keys.enums.JsonWebKeyOperation
    name: JsonWebKeyOperation
    uid: azure.keyvault.keys.enums.JsonWebKeyOperation
  - fullName: )
    name: )
  uid: azure.keyvault.keys.enums.JsonWebKeyOperation)
- fullName: azure.core.async_paging.AsyncItemPaged[azure.keyvault.keys.models.DeletedKey]
  name: AsyncItemPaged[DeletedKey]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys.models.DeletedKey
    name: DeletedKey
    uid: azure.keyvault.keys.models.DeletedKey
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.keyvault.keys.models.DeletedKey]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.keyvault.keys.models.KeyBase]
  name: AsyncItemPaged[KeyBase]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys.models.KeyBase
    name: KeyBase
    uid: azure.keyvault.keys.models.KeyBase
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.keyvault.keys.models.KeyBase]
