### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.CosmosClient.create_database
  - azure.cosmos.CosmosClient.create_database_if_not_exists
  - azure.cosmos.CosmosClient.delete_database
  - azure.cosmos.CosmosClient.from_connection_string
  - azure.cosmos.CosmosClient.get_database_account
  - azure.cosmos.CosmosClient.get_database_client
  - azure.cosmos.CosmosClient.list_databases
  - azure.cosmos.CosmosClient.query_databases
  class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos
  name: CosmosClient
  summary: 'Provides a client-side logical representation of an Azure Cosmos DB account.

    Use this client to configure and execute requests to the Azure Cosmos DB service.


    **Keyword arguments:**


    *timeout* - An absolute timeout in seconds, for the combined HTTP request and
    response processing.


    *request_timeout* - The HTTP request timeout in seconds.


    *media_request_timeout* - The media request timeout in seconds.


    *connection_mode* - The connection mode for the client - currently only supports
    ''Gateway''.


    *media_read_mode* - The mode for use with downloading attachment content - default
    value is *Buffered*.


    *proxy_config* - Instance of *azure.cosmos.ProxyConfiguration*.


    *ssl_config* - Instance of *azure.cosmos.SSLConfiguration*.


    *connection_verify* - Whether to verify the connection, default value is True.


    *connection_cert* - An alternative certificate to verify the connection.


    *retry_total* - Maximum retry attempts.


    *retry_backoff_max* - Maximum retry wait time in seconds.


    *retry_fixed_interval* - Fixed retry interval in milliseconds.


    *retry_read* - Maximum number of socket read retry attempts.


    *retry_connect* - Maximum number of connection error retry attempts.


    *retry_status* - Maximum number of retry attempts on error status codes.


    *retry_on_status_codes* - A list of specific status codes to retry on.


    *retry_backoff_factor* - Factor to calculate wait time between retry attempts.


    *enable_endpoint_discovery* - Enable endpoint discovery for geo-replicated database
    accounts. Default is True.


    *preferred_locations* - The preferred locations for geo-replicated database accounts.


    *connection_policy* - An instance of *azure.cosmos.documents.ConnectionPolicy*'
  syntax:
    content: CosmosClient(url, credential, consistency_level='Session', **kwargs)
    parameters:
    - description: The URL of the Cosmos DB account.
      id: url
      type:
      - str
    - description: Can be the account key, or a dictionary of resource tokens.
      id: credential
      type:
      - str
      - dict[str, str]
    - description: Consistency level to use for the session. The default value is
        "Session".
      id: consistency_level
      type:
      - str
  type: class
  uid: azure.cosmos.CosmosClient
- class: azure.cosmos.CosmosClient
  exceptions:
  - description: Database with the given ID already exists.
    type: ~azure.cosmos.errors.CosmosResourceExistsError
  fullName: azure.cosmos.CosmosClient.create_database
  langs:
  - python
  module: azure.cosmos
  name: create_database(id, populate_query_metrics=None, offer_throughput=None, **kwargs)
  summary: Create a new database with the given ID (name).
  syntax:
    content: create_database(id, populate_query_metrics=None, offer_throughput=None,
      **kwargs)
    parameters:
    - description: ID (name) of the database to create.
      id: id
    - description: Token for use with Session consistency.
      id: session_token
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      type:
      - dict[str, str]
    - description: Conditions Associated with the request.
      id: access_condition
      type:
      - dict[str, str]
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      type:
      - bool
    - description: The provisioned throughput for this offer.
      id: offer_throughput
      type:
      - int
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
      type:
      - dict[str, Any]
    - description: a callable invoked with the response metadata
      id: response_hook
      type:
      - Callable
    return:
      description: A DatabaseProxy instance representing the new database.
      type:
      - azure.cosmos.DatabaseProxy
  type: method
  uid: azure.cosmos.CosmosClient.create_database
- class: azure.cosmos.CosmosClient
  exceptions:
  - description: The database read or creation failed.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.CosmosClient.create_database_if_not_exists
  langs:
  - python
  module: azure.cosmos
  name: create_database_if_not_exists(id, populate_query_metrics=None, offer_throughput=None,
    **kwargs)
  summary: 'Create the database if it does not exist already.


    If the database already exists, the existing settings are returned.

    Note: it does not check or update the existing database settings or offer throughput

    if they differ from what was passed into the method.'
  syntax:
    content: create_database_if_not_exists(id, populate_query_metrics=None, offer_throughput=None,
      **kwargs)
    parameters:
    - description: ID (name) of the database to read or create.
      id: id
    - description: Token for use with Session consistency.
      id: session_token
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      type:
      - dict[str, str]
    - description: Conditions Associated with the request.
      id: access_condition
      type:
      - dict[str, str]
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      type:
      - bool
    - description: The provisioned throughput for this offer.
      id: offer_throughput
      type:
      - int
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
      type:
      - dict[str, Any]
    - description: a callable invoked with the response metadata
      id: response_hook
      type:
      - Callable
    return:
      description: A DatabaseProxy instance representing the database.
      type:
      - azure.cosmos.DatabaseProxy
  type: method
  uid: azure.cosmos.CosmosClient.create_database_if_not_exists
- class: azure.cosmos.CosmosClient
  exceptions:
  - description: If the database couldn't be deleted.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.CosmosClient.delete_database
  langs:
  - python
  module: azure.cosmos
  name: delete_database(database, populate_query_metrics=None, **kwargs)
  summary: Delete the database with the given ID (name).
  syntax:
    content: delete_database(database, populate_query_metrics=None, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.DatabaseProxy>

        instance of the database to delete.'
      id: database
      type:
      - str
      - dict(str, str)
      - azure.cosmos.DatabaseProxy
    - description: Token for use with Session consistency.
      id: session_token
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      type:
      - dict[str, str]
    - description: Conditions Associated with the request.
      id: access_condition
      type:
      - dict[str, str]
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      type:
      - bool
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
      type:
      - dict[str, Any]
    - description: a callable invoked with the response metadata
      id: response_hook
      type:
      - Callable
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.CosmosClient.delete_database
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.from_connection_string
  langs:
  - python
  module: azure.cosmos
  name: from_connection_string(conn_str, credential=None, consistency_level='Session',
    **kwargs)
  summary: 'Create CosmosClient from a connection string.


    This can be retrieved from the Azure portal.For full list of optional keyword

    arguments, see the CosmosClient constructor.'
  syntax:
    content: from_connection_string(conn_str, credential=None, consistency_level='Session',
      **kwargs)
    parameters:
    - description: The connection string.
      id: conn_str
      type:
      - str
    - description: 'Alternative credentials to use instead of the key provided in
        the

        connection string.'
      id: credential
      type:
      - str
      - dict(str, str)
    - defaultValue: None
      description: Consistency level to use for the session. The default value is
        "Session".
      id: consistency_level
      type:
      - str
    - defaultValue: Session
      id: consistency_level
  type: method
  uid: azure.cosmos.CosmosClient.from_connection_string
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.get_database_account
  langs:
  - python
  module: azure.cosmos
  name: get_database_account(**kwargs)
  summary: Retrieve the database account information.
  syntax:
    content: get_database_account(**kwargs)
    parameters:
    - description: a callable invoked with the response metadata
      id: response_hook
      type:
      - Callable
    return:
      description: A *DatabaseAccount* instance representing the Cosmos DB Database
        Account.
      type:
      - azure.cosmos.DatabaseAccount
  type: method
  uid: azure.cosmos.CosmosClient.get_database_account
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.get_database_client
  langs:
  - python
  module: azure.cosmos
  name: get_database_client(database)
  summary: Retrieve an existing database with the ID (name) *id*.
  syntax:
    content: get_database_client(database)
    parameters:
    - description: 'The ID (name), dict representing the properties or *DatabaseProxy*

        instance of the database to read.'
      id: database
      type:
      - str
      - dict(str, str)
      - azure.cosmos.DatabaseProxy
    return:
      description: A *DatabaseProxy* instance representing the retrieved database.
      type:
      - azure.cosmos.DatabaseProxy
  type: method
  uid: azure.cosmos.CosmosClient.get_database_client
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.list_databases
  langs:
  - python
  module: azure.cosmos
  name: list_databases(max_item_count=None, populate_query_metrics=None, **kwargs)
  summary: List the databases in a Cosmos DB SQL database account.
  syntax:
    content: list_databases(max_item_count=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      type:
      - int
    - description: Token for use with Session consistency.
      id: session_token
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      type:
      - dict[str, str]
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      type:
      - bool
    - description: Dictionary of additional properties to be used for the request.
      id: feed_options
      type:
      - dict[str, str]
    - description: a callable invoked with the response metadata
      id: response_hook
      type:
      - Callable
    return:
      description: An Iterable of database properties (dicts).
      type:
      - Iterable[dict[str, str]]
  type: method
  uid: azure.cosmos.CosmosClient.list_databases
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.query_databases
  langs:
  - python
  module: azure.cosmos
  name: query_databases(query=None, parameters=None, enable_cross_partition_query=None,
    max_item_count=None, populate_query_metrics=None, **kwargs)
  summary: Query the databases in a Cosmos DB SQL database account.
  syntax:
    content: query_databases(query=None, parameters=None, enable_cross_partition_query=None,
      max_item_count=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      type:
      - str
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
      type:
      - list[str]
    - description: 'Allow scan on the queries which couldn''t be

        served as indexing was opted out on the requested paths.'
      id: enable_cross_partition_query
      type:
      - bool
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      type:
      - int
    - description: Token for use with Session consistency.
      id: session_token
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      type:
      - dict[str, str]
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      type:
      - bool
    - description: Dictionary of additional properties to be used for the request.
      id: feed_options
      type:
      - dict[str, Any]
    - description: a callable invoked with the response metadata
      id: response_hook
      type:
      - Callable
    return:
      description: An Iterable of database properties (dicts).
      type:
      - Iterable[dict[str, str]]
  type: method
  uid: azure.cosmos.CosmosClient.query_databases
references:
- fullName: azure.cosmos.CosmosClient.create_database
  isExternal: false
  name: create_database(id, populate_query_metrics=None, offer_throughput=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.create_database
- fullName: azure.cosmos.CosmosClient.create_database_if_not_exists
  isExternal: false
  name: create_database_if_not_exists(id, populate_query_metrics=None, offer_throughput=None,
    **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.create_database_if_not_exists
- fullName: azure.cosmos.CosmosClient.delete_database
  isExternal: false
  name: delete_database(database, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.delete_database
- fullName: azure.cosmos.CosmosClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, credential=None, consistency_level='Session',
    **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.from_connection_string
- fullName: azure.cosmos.CosmosClient.get_database_account
  isExternal: false
  name: get_database_account(**kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.get_database_account
- fullName: azure.cosmos.CosmosClient.get_database_client
  isExternal: false
  name: get_database_client(database)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.get_database_client
- fullName: azure.cosmos.CosmosClient.list_databases
  isExternal: false
  name: list_databases(max_item_count=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.list_databases
- fullName: azure.cosmos.CosmosClient.query_databases
  isExternal: false
  name: query_databases(query=None, parameters=None, enable_cross_partition_query=None,
    max_item_count=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.query_databases
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: Iterable[dict[str, str]]
  name: Iterable[dict[str, str]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[dict[str, str]]
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
