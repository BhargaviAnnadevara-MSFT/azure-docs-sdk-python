### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.ContainerProxy.create_item
  - azure.cosmos.ContainerProxy.delete_conflict
  - azure.cosmos.ContainerProxy.delete_item
  - azure.cosmos.ContainerProxy.get_conflict
  - azure.cosmos.ContainerProxy.list_conflicts
  - azure.cosmos.ContainerProxy.query_conflicts
  - azure.cosmos.ContainerProxy.query_items
  - azure.cosmos.ContainerProxy.query_items_change_feed
  - azure.cosmos.ContainerProxy.read
  - azure.cosmos.ContainerProxy.read_all_items
  - azure.cosmos.ContainerProxy.read_item
  - azure.cosmos.ContainerProxy.read_offer
  - azure.cosmos.ContainerProxy.replace_item
  - azure.cosmos.ContainerProxy.replace_throughput
  - azure.cosmos.ContainerProxy.upsert_item
  class: azure.cosmos.ContainerProxy
  fullName: azure.cosmos.ContainerProxy
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos
  name: ContainerProxy
  summary: 'An interface to interact with a specific DB Container.

    This class should not be instantiated directly, use <xref:azure.cosmos.DatabaseProxy.get_container_client>
    method.


    A container in an Azure Cosmos DB SQL API database is a collection of documents,

    each of which represented as an Item.



    > [!NOTE]

    > To create a new container in an existing database, use <xref:Database.create_container>.

    >'
  syntax:
    content: ContainerProxy(client_connection, database_link, id, properties=None)
    variables:
    - description: ID (name) of the container
      id: id
      type:
      - str
    - description: The session token for the container.
      id: session_token
      type:
      - str
  type: class
  uid: azure.cosmos.ContainerProxy
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: Item with the given ID already exists.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.create_item
  langs:
  - python
  module: azure.cosmos
  name: create_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    indexing_directive=None, **kwargs)
  summary: 'Create an item in the container.

    To update or replace an existing item, use the <xref:ContainerProxy.upsert_item>
    method.'
  syntax:
    content: create_item(body, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, indexing_directive=None, **kwargs)
    parameters:
    - description: A dict-like object representing the item to create.
      id: body
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: Conditions Associated with the request.
      id: access_condition
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - description: Indicate whether the document should be omitted from indexing.
      id: indexing_directive
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the new item.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ContainerProxy.create_item
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: The conflict wasn't deleted successfully.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  - description: The conflict does not exist in the container.
    type: ~azure.cosmos.errors.CosmosResourceNotFoundError
  fullName: azure.cosmos.ContainerProxy.delete_conflict
  langs:
  - python
  module: azure.cosmos
  name: delete_conflict(conflict, partition_key, **kwargs)
  summary: Delete the specified conflict from the container.
  syntax:
    content: delete_conflict(conflict, partition_key, **kwargs)
    parameters:
    - description: The ID (name) or dict representing the conflict to be deleted.
      id: conflict
    - description: Partition key for the conflict to delete.
      id: partition_key
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.ContainerProxy.delete_conflict
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: The item wasn't deleted successfully.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  - description: The item does not exist in the container.
    type: ~azure.cosmos.errors.CosmosResourceNotFoundError
  fullName: azure.cosmos.ContainerProxy.delete_item
  langs:
  - python
  module: azure.cosmos
  name: delete_item(item, partition_key, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  summary: Delete the specified item from the container.
  syntax:
    content: delete_item(item, partition_key, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, **kwargs)
    parameters:
    - description: The ID (name) or dict representing item to be deleted.
      id: item
    - description: Specifies the partition key value for the item.
      id: partition_key
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: Conditions Associated with the request.
      id: access_condition
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.ContainerProxy.delete_item
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: The given conflict couldn't be retrieved.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.get_conflict
  langs:
  - python
  module: azure.cosmos
  name: get_conflict(conflict, partition_key, **kwargs)
  summary: Get the conflict identified by *conflict*.
  syntax:
    content: get_conflict(conflict, partition_key, **kwargs)
    parameters:
    - description: The ID (name) or dict representing the conflict to retrieve.
      id: conflict
    - description: Partition key for the conflict to retrieve.
      id: partition_key
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the retrieved conflict.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ContainerProxy.get_conflict
- class: azure.cosmos.ContainerProxy
  fullName: azure.cosmos.ContainerProxy.list_conflicts
  langs:
  - python
  module: azure.cosmos
  name: list_conflicts(max_item_count=None, **kwargs)
  summary: List all conflicts in the container.
  syntax:
    content: list_conflicts(max_item_count=None, **kwargs)
    parameters:
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: An Iterable of conflicts (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ContainerProxy.list_conflicts
- class: azure.cosmos.ContainerProxy
  fullName: azure.cosmos.ContainerProxy.query_conflicts
  langs:
  - python
  module: azure.cosmos
  name: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
    partition_key=None, max_item_count=None, **kwargs)
  summary: Return all conflicts matching the given *query*.
  syntax:
    content: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
      partition_key=None, max_item_count=None, **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - description: Specifies the partition key value for the item.
      id: partition_key
    - description: 'Allows sending of more than one request to execute

        the query in the Azure Cosmos DB service.

        More than one request is necessary if the query is not scoped to single partition
        key value.'
      id: enable_cross_partition_query
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: An Iterable of conflicts (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ContainerProxy.query_conflicts
- class: azure.cosmos.ContainerProxy
  fullName: azure.cosmos.ContainerProxy.query_items
  langs:
  - python
  module: azure.cosmos
  name: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
    max_item_count=None, enable_scan_in_query=None, populate_query_metrics=None, **kwargs)
  summary: 'Return all results matching the given *query*.


    You can use any value for the container name in the FROM clause, but typically
    the container name is used.

    In the examples below, the container name is "products," and is aliased as "p"
    for easier referencing

    in the WHERE clause.'
  syntax:
    content: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
      max_item_count=None, enable_scan_in_query=None, populate_query_metrics=None,
      **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - description: Specifies the partition key value for the item.
      id: partition_key
    - description: 'Allows sending of more than one request to

        execute the query in the Azure Cosmos DB service.

        More than one request is necessary if the query is not scoped to single partition
        key value.'
      id: enable_cross_partition_query
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: 'Allow scan on the queries which couldn''t be served as

        indexing was opted out on the requested paths.'
      id: enable_scan_in_query
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: An Iterable of items (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ContainerProxy.query_items
- class: azure.cosmos.ContainerProxy
  fullName: azure.cosmos.ContainerProxy.query_items_change_feed
  langs:
  - python
  module: azure.cosmos
  name: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
    continuation=None, max_item_count=None, **kwargs)
  summary: Get a sorted list of items that were changed, in the order in which they
    were modified.
  syntax:
    content: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
      continuation=None, max_item_count=None, **kwargs)
    parameters:
    - description: 'ChangeFeed requests can be executed against specific partition
        key ranges.

        This is used to process the change feed in parallel across multiple consumers.'
      id: partition_key_range_id
    - description: 'Get whether change feed should start from

        beginning (true) or from current (false). By default it''s start from current
        (false).'
      id: is_start_from_beginning
    - description: e_tag value to be used as continuation for reading change feed.
      id: continuation
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: An Iterable of items (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ContainerProxy.query_items_change_feed
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: 'Raised if the container couldn''t be retrieved.

      This includes if the container does not exist.'
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.read
  langs:
  - python
  module: azure.cosmos
  name: read(populate_query_metrics=None, populate_partition_key_range_statistics=None,
    populate_quota_info=None, **kwargs)
  summary: Read the container properties
  syntax:
    content: read(populate_query_metrics=None, populate_partition_key_range_statistics=None,
      populate_quota_info=None, **kwargs)
    parameters:
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: 'Enable returning partition key

        range statistics in response headers.'
      id: populate_partition_key_range_statistics
    - description: Enable returning collection storage quota information in response
        headers.
      id: populate_quota_info
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: Dict representing the retrieved container.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ContainerProxy.read
- class: azure.cosmos.ContainerProxy
  fullName: azure.cosmos.ContainerProxy.read_all_items
  langs:
  - python
  module: azure.cosmos
  name: read_all_items(max_item_count=None, populate_query_metrics=None, **kwargs)
  summary: List all items in the container.
  syntax:
    content: read_all_items(max_item_count=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: An Iterable of items (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ContainerProxy.read_all_items
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: The given item couldn't be retrieved.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.read_item
  langs:
  - python
  module: azure.cosmos
  name: read_item(item, partition_key, populate_query_metrics=None, post_trigger_include=None,
    **kwargs)
  summary: Get the item identified by *item*.
  syntax:
    content: read_item(item, partition_key, populate_query_metrics=None, post_trigger_include=None,
      **kwargs)
    parameters:
    - description: The ID (name) or dict representing item to retrieve.
      id: item
    - description: Partition key for the item to retrieve.
      id: partition_key
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: Dict representing the item to be retrieved.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ContainerProxy.read_item
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: 'No offer exists for the container or

      the offer could not be retrieved.'
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.read_offer
  langs:
  - python
  module: azure.cosmos
  name: read_offer(**kwargs)
  summary: Read the Offer object for this container.
  syntax:
    content: read_offer(**kwargs)
    parameters:
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: Offer for the container.
      type:
      - azure.cosmos.Offer
  type: method
  uid: azure.cosmos.ContainerProxy.read_offer
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: 'The replace failed or the item with

      given id does not exist.'
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.replace_item
  langs:
  - python
  module: azure.cosmos
  name: replace_item(item, body, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  summary: Replaces the specified item if it exists in the container.
  syntax:
    content: replace_item(item, body, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, **kwargs)
    parameters:
    - description: The ID (name) or dict representing item to be replaced.
      id: item
    - description: A dict-like object representing the item to replace.
      id: body
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: Conditions Associated with the request.
      id: access_condition
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the item after replace went through.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ContainerProxy.replace_item
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: 'No offer exists for the container

      or the offer could not be updated.'
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.replace_throughput
  langs:
  - python
  module: azure.cosmos
  name: replace_throughput(throughput, **kwargs)
  summary: Replace the container's throughput
  syntax:
    content: replace_throughput(throughput, **kwargs)
    parameters:
    - description: The throughput to be set (an integer).
      id: throughput
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: Offer for the container, updated with new throughput.
      type:
      - azure.cosmos.Offer
  type: method
  uid: azure.cosmos.ContainerProxy.replace_throughput
- class: azure.cosmos.ContainerProxy
  exceptions:
  - description: The given item could not be upserted.
    type: ~azure.cosmos.errors.CosmosHttpResponseError
  fullName: azure.cosmos.ContainerProxy.upsert_item
  langs:
  - python
  module: azure.cosmos
  name: upsert_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    **kwargs)
  summary: 'Insert or update the specified item.

    If the item already exists in the container, it is replaced. If it does not, it
    is inserted.'
  syntax:
    content: upsert_item(body, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, **kwargs)
    parameters:
    - description: A dict-like object representing the item to update or insert.
      id: body
    - description: Token for use with Session consistency.
      id: session_token
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
    - description: Conditions Associated with the request.
      id: access_condition
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - description: Dictionary of additional properties to be used for the request.
      id: request_options
    - description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the upserted item.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ContainerProxy.upsert_item
references:
- fullName: azure.cosmos.ContainerProxy.create_item
  isExternal: false
  name: create_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    indexing_directive=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.create_item
- fullName: azure.cosmos.ContainerProxy.delete_conflict
  isExternal: false
  name: delete_conflict(conflict, partition_key, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.delete_conflict
- fullName: azure.cosmos.ContainerProxy.delete_item
  isExternal: false
  name: delete_item(item, partition_key, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.delete_item
- fullName: azure.cosmos.ContainerProxy.get_conflict
  isExternal: false
  name: get_conflict(conflict, partition_key, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.get_conflict
- fullName: azure.cosmos.ContainerProxy.list_conflicts
  isExternal: false
  name: list_conflicts(max_item_count=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.list_conflicts
- fullName: azure.cosmos.ContainerProxy.query_conflicts
  isExternal: false
  name: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
    partition_key=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.query_conflicts
- fullName: azure.cosmos.ContainerProxy.query_items
  isExternal: false
  name: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
    max_item_count=None, enable_scan_in_query=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.query_items
- fullName: azure.cosmos.ContainerProxy.query_items_change_feed
  isExternal: false
  name: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
    continuation=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.query_items_change_feed
- fullName: azure.cosmos.ContainerProxy.read
  isExternal: false
  name: read(populate_query_metrics=None, populate_partition_key_range_statistics=None,
    populate_quota_info=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.read
- fullName: azure.cosmos.ContainerProxy.read_all_items
  isExternal: false
  name: read_all_items(max_item_count=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.read_all_items
- fullName: azure.cosmos.ContainerProxy.read_item
  isExternal: false
  name: read_item(item, partition_key, populate_query_metrics=None, post_trigger_include=None,
    **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.read_item
- fullName: azure.cosmos.ContainerProxy.read_offer
  isExternal: false
  name: read_offer(**kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.read_offer
- fullName: azure.cosmos.ContainerProxy.replace_item
  isExternal: false
  name: replace_item(item, body, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.replace_item
- fullName: azure.cosmos.ContainerProxy.replace_throughput
  isExternal: false
  name: replace_throughput(throughput, **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.replace_throughput
- fullName: azure.cosmos.ContainerProxy.upsert_item
  isExternal: false
  name: upsert_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    **kwargs)
  parent: azure.cosmos.ContainerProxy
  uid: azure.cosmos.ContainerProxy.upsert_item
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: Iterable[dict[str, Any]]
  name: Iterable[dict[str, Any]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[dict[str, Any]]
