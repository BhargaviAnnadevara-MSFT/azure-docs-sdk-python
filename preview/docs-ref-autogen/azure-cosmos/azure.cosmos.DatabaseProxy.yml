### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.DatabaseProxy.create_container
  - azure.cosmos.DatabaseProxy.create_container_if_not_exists
  - azure.cosmos.DatabaseProxy.create_user
  - azure.cosmos.DatabaseProxy.delete_container
  - azure.cosmos.DatabaseProxy.delete_user
  - azure.cosmos.DatabaseProxy.get_container_client
  - azure.cosmos.DatabaseProxy.get_user_client
  - azure.cosmos.DatabaseProxy.list_containers
  - azure.cosmos.DatabaseProxy.list_users
  - azure.cosmos.DatabaseProxy.query_containers
  - azure.cosmos.DatabaseProxy.query_users
  - azure.cosmos.DatabaseProxy.read
  - azure.cosmos.DatabaseProxy.read_offer
  - azure.cosmos.DatabaseProxy.replace_container
  - azure.cosmos.DatabaseProxy.replace_throughput
  - azure.cosmos.DatabaseProxy.replace_user
  - azure.cosmos.DatabaseProxy.upsert_user
  class: azure.cosmos.DatabaseProxy
  fullName: azure.cosmos.DatabaseProxy
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos
  name: DatabaseProxy
  summary: "An interface to interact with a specific database.\n\nThis class should\
    \ not be instantiated directly. Instead use the\n<xref:azure.cosmos.CosmosClient.get_database_client>\
    \ method.\n\nA database contains one or more containers, each of which can contain\
    \ items,\nstored procedures, triggers, and user-defined functions.\n\nA database\
    \ can also have associated users, each of which is configured with\na set of permissions\
    \ for accessing certain containers, stored procedures,\ntriggers, user-defined\
    \ functions, or items.\n\nAn Azure Cosmos DB SQL API database has the following\
    \ system-generated\nproperties. These properties are read-only:\n\n* *_rid*: \
    \  The resource ID. \n\n* *_ts*:    When the resource was last updated. The value\
    \ is a timestamp. \n\n* *_self*:  The unique addressable URI for the resource.\
    \ \n\n* *_etag*:  The resource etag required for optimistic concurrency control.\
    \ \n\n* *_colls*: The addressable path of the collections resource. \n\n* *_users*:\
    \ The addressable path of the users resource."
  syntax:
    content: DatabaseProxy(client_connection, id, properties=None)
    variables:
    - description: The ID (name) of the database.
      id: id
  type: class
  uid: azure.cosmos.DatabaseProxy
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: The container creation failed.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.create_container
  langs:
  - python
  module: azure.cosmos
  name: create_container(id, partition_key, indexing_policy=None, default_ttl=None,
    populate_query_metrics=None, offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
    **kwargs)
  summary: 'Create a new container with the given ID (name).


    If a container with the given ID already exists, a CosmosResourceExistsError is
    raised.'
  syntax:
    content: create_container(id, partition_key, indexing_policy=None, default_ttl=None,
      populate_query_metrics=None, offer_throughput=None, unique_key_policy=None,
      conflict_resolution_policy=None, **kwargs)
    parameters:
    - description: ID (name) of container to create.
      id: id
    - description: The partition key to use for the container.
      id: partition_key
    - description: The indexing policy to apply to the container.
      id: indexing_policy
    - description: Default time to live (TTL) for items in the container. If unspecified,
        items do not expire.
      id: default_ttl
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: The provisioned throughput for this offer.
      id: offer_throughput
    - description: The unique key policy to apply to the container.
      id: unique_key_policy
    - description: The conflict resolution policy to apply to the container.
      id: conflict_resolution_policy
    return:
      description: A *ContainerProxy* instance representing the new container.
      type:
      - azure.cosmos.ContainerProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.create_container
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: The container read or creation failed.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.create_container_if_not_exists
  langs:
  - python
  module: azure.cosmos
  name: create_container_if_not_exists(id, partition_key, indexing_policy=None, default_ttl=None,
    populate_query_metrics=None, offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
    **kwargs)
  summary: 'Create a container if it does not exist already.


    If the container already exists, the existing settings are returned.

    Note: it does not check or update the existing container settings or offer throughput

    if they differ from what was passed into the method.'
  syntax:
    content: create_container_if_not_exists(id, partition_key, indexing_policy=None,
      default_ttl=None, populate_query_metrics=None, offer_throughput=None, unique_key_policy=None,
      conflict_resolution_policy=None, **kwargs)
    parameters:
    - description: ID (name) of container to read or create.
      id: id
    - description: The partition key to use for the container.
      id: partition_key
    - description: The indexing policy to apply to the container.
      id: indexing_policy
    - description: Default time to live (TTL) for items in the container. If unspecified,
        items do not expire.
      id: default_ttl
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - description: The provisioned throughput for this offer.
      id: offer_throughput
    - description: The unique key policy to apply to the container.
      id: unique_key_policy
    - description: The conflict resolution policy to apply to the container.
      id: conflict_resolution_policy
    return:
      description: A *ContainerProxy* instance representing the container.
      type:
      - azure.cosmos.ContainerProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.create_container_if_not_exists
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If the given user couldn't be created.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.create_user
  langs:
  - python
  module: azure.cosmos
  name: create_user(body, **kwargs)
  summary: 'Create a new user in the container.


    To update or replace an existing user, use the

    <xref:ContainerProxy.upsert_user> method.'
  syntax:
    content: create_user(body, **kwargs)
    parameters:
    - description: 'A dict-like object with an *id* key and value representing the
        user to be created.

        The user ID must be unique within the database, and consist of no more than
        255 characters.'
      id: body
    return:
      description: A *UserProxy* instance representing the new user.
      type:
      - azure.cosmos.UserProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.create_user
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If the container couldn't be deleted.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.delete_container
  langs:
  - python
  module: azure.cosmos
  name: delete_container(container, populate_query_metrics=None, **kwargs)
  summary: Delete a container.
  syntax:
    content: delete_container(container, populate_query_metrics=None, **kwargs)
    parameters:
    - description: 'The ID (name) of the container to delete. You can either

        pass in the ID of the container to delete, a <xref:azure.cosmos.ContainerProxy>
        instance or

        a dict representing the properties of the container.'
      id: container
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.DatabaseProxy.delete_container
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: The user wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The user does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
  fullName: azure.cosmos.DatabaseProxy.delete_user
  langs:
  - python
  module: azure.cosmos
  name: delete_user(user, **kwargs)
  summary: Delete the specified user from the container.
  syntax:
    content: delete_user(user, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.UserProxy>

        instance of the user to be deleted.'
      id: user
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.DatabaseProxy.delete_user
- class: azure.cosmos.DatabaseProxy
  fullName: azure.cosmos.DatabaseProxy.get_container_client
  langs:
  - python
  module: azure.cosmos
  name: get_container_client(container)
  summary: Get a *ContainerProxy* for a container with specified ID (name).
  syntax:
    content: get_container_client(container)
    parameters:
    - description: 'The ID (name) of the container, a <xref:azure.cosmos.ContainerProxy>
        instance,

        or a dict representing the properties of the container to be retrieved.'
      id: container
    return:
      type:
      - azure.cosmos.ContainerProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.get_container_client
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If the given user couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.get_user_client
  langs:
  - python
  module: azure.cosmos
  name: get_user_client(user)
  summary: Get a *UserProxy* for a user with specified ID.
  syntax:
    content: get_user_client(user)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.UserProxy>

        instance of the user to be retrieved.'
      id: user
    return:
      description: A *UserProxy* instance representing the retrieved user.
      type:
      - azure.cosmos.UserProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.get_user_client
- class: azure.cosmos.DatabaseProxy
  fullName: azure.cosmos.DatabaseProxy.list_containers
  langs:
  - python
  module: azure.cosmos
  name: list_containers(max_item_count=None, populate_query_metrics=None, **kwargs)
  summary: List the containers in the database.
  syntax:
    content: list_containers(max_item_count=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    return:
      description: An Iterable of container properties (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.DatabaseProxy.list_containers
- class: azure.cosmos.DatabaseProxy
  fullName: azure.cosmos.DatabaseProxy.list_users
  langs:
  - python
  module: azure.cosmos
  name: list_users(max_item_count=None, **kwargs)
  summary: List all the users in the container.
  syntax:
    content: list_users(max_item_count=None, **kwargs)
    parameters:
    - description: Max number of users to be returned in the enumeration operation.
      id: max_item_count
    return:
      description: An Iterable of user properties (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.DatabaseProxy.list_users
- class: azure.cosmos.DatabaseProxy
  fullName: azure.cosmos.DatabaseProxy.query_containers
  langs:
  - python
  module: azure.cosmos
  name: query_containers(query=None, parameters=None, max_item_count=None, populate_query_metrics=None,
    **kwargs)
  summary: List the properties for containers in the current database.
  syntax:
    content: query_containers(query=None, parameters=None, max_item_count=None, populate_query_metrics=None,
      **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    return:
      description: An Iterable of container properties (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.DatabaseProxy.query_containers
- class: azure.cosmos.DatabaseProxy
  fullName: azure.cosmos.DatabaseProxy.query_users
  langs:
  - python
  module: azure.cosmos
  name: query_users(query, parameters=None, max_item_count=None, **kwargs)
  summary: Return all users matching the given *query*.
  syntax:
    content: query_users(query, parameters=None, max_item_count=None, **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - description: Max number of users to be returned in the enumeration operation.
      id: max_item_count
    return:
      description: An Iterable of user properties (dicts).
      type:
      - Iterable[str, Any]
  type: method
  uid: azure.cosmos.DatabaseProxy.query_users
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If the given database couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.read
  langs:
  - python
  module: azure.cosmos
  name: read(populate_query_metrics=None, **kwargs)
  summary: Read the database properties.
  syntax:
    content: read(populate_query_metrics=None, **kwargs)
    parameters:
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      type:
      - bool
    return:
      type:
      - Dict[Str, Any]
  type: method
  uid: azure.cosmos.DatabaseProxy.read
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If no offer exists for the database or if the offer could not be
      retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.read_offer
  langs:
  - python
  module: azure.cosmos
  name: read_offer(**kwargs)
  summary: Read the Offer object for this database.
  syntax:
    content: read_offer(**kwargs)
    return:
      description: Offer for the database.
      type:
      - azure.cosmos.Offer
  type: method
  uid: azure.cosmos.DatabaseProxy.read_offer
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: 'Raised if the container couldn''t be replaced.

      This includes if the container with given id does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.replace_container
  langs:
  - python
  module: azure.cosmos
  name: replace_container(container, partition_key, indexing_policy=None, default_ttl=None,
    conflict_resolution_policy=None, populate_query_metrics=None, **kwargs)
  summary: 'Reset the properties of the container.


    Property changes are persisted immediately. Any properties not specified

    will be reset to their default values.'
  syntax:
    content: replace_container(container, partition_key, indexing_policy=None, default_ttl=None,
      conflict_resolution_policy=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or

        <xref:azure.cosmos.ContainerProxy> instance of the container to be replaced.'
      id: container
    - description: The partition key to use for the container.
      id: partition_key
    - description: The indexing policy to apply to the container.
      id: indexing_policy
    - description: 'Default time to live (TTL) for items in the container.

        If unspecified, items do not expire.'
      id: default_ttl
    - description: The conflict resolution policy to apply to the container.
      id: conflict_resolution_policy
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    return:
      description: A *ContainerProxy* instance representing the container after replace
        completed.
      type:
      - azure.cosmos.ContainerProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.replace_container
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If no offer exists for the database or if the offer could not be
      updated.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.replace_throughput
  langs:
  - python
  module: azure.cosmos
  name: replace_throughput(throughput, **kwargs)
  summary: Replace the database-level throughput.
  syntax:
    content: replace_throughput(throughput, **kwargs)
    parameters:
    - description: The throughput to be set (an integer).
      id: throughput
    return:
      description: Offer for the database, updated with new throughput.
      type:
      - azure.cosmos.Offer
  type: method
  uid: azure.cosmos.DatabaseProxy.replace_throughput
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If the replace failed or the user with given ID does not exist.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.replace_user
  langs:
  - python
  module: azure.cosmos
  name: replace_user(user, body, **kwargs)
  summary: Replaces the specified user if it exists in the container.
  syntax:
    content: replace_user(user, body, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.UserProxy>

        instance of the user to be replaced.'
      id: user
    - description: A dict-like object representing the user to replace.
      id: body
    return:
      description: A *UserProxy* instance representing the user after replace went
        through.
      type:
      - azure.cosmos.UserProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.replace_user
- class: azure.cosmos.DatabaseProxy
  exceptions:
  - description: If the given user could not be upserted.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.DatabaseProxy.upsert_user
  langs:
  - python
  module: azure.cosmos
  name: upsert_user(body, **kwargs)
  summary: 'Insert or update the specified user.


    If the user already exists in the container, it is replaced. If the user

    does not already exist, it is inserted.'
  syntax:
    content: upsert_user(body, **kwargs)
    parameters:
    - description: A dict-like object representing the user to update or insert.
      id: body
    return:
      description: A *UserProxy* instance representing the upserted user.
      type:
      - azure.cosmos.UserProxy
  type: method
  uid: azure.cosmos.DatabaseProxy.upsert_user
references:
- fullName: azure.cosmos.DatabaseProxy.create_container
  isExternal: false
  name: create_container(id, partition_key, indexing_policy=None, default_ttl=None,
    populate_query_metrics=None, offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
    **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.create_container
- fullName: azure.cosmos.DatabaseProxy.create_container_if_not_exists
  isExternal: false
  name: create_container_if_not_exists(id, partition_key, indexing_policy=None, default_ttl=None,
    populate_query_metrics=None, offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
    **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.create_container_if_not_exists
- fullName: azure.cosmos.DatabaseProxy.create_user
  isExternal: false
  name: create_user(body, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.create_user
- fullName: azure.cosmos.DatabaseProxy.delete_container
  isExternal: false
  name: delete_container(container, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.delete_container
- fullName: azure.cosmos.DatabaseProxy.delete_user
  isExternal: false
  name: delete_user(user, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.delete_user
- fullName: azure.cosmos.DatabaseProxy.get_container_client
  isExternal: false
  name: get_container_client(container)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.get_container_client
- fullName: azure.cosmos.DatabaseProxy.get_user_client
  isExternal: false
  name: get_user_client(user)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.get_user_client
- fullName: azure.cosmos.DatabaseProxy.list_containers
  isExternal: false
  name: list_containers(max_item_count=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.list_containers
- fullName: azure.cosmos.DatabaseProxy.list_users
  isExternal: false
  name: list_users(max_item_count=None, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.list_users
- fullName: azure.cosmos.DatabaseProxy.query_containers
  isExternal: false
  name: query_containers(query=None, parameters=None, max_item_count=None, populate_query_metrics=None,
    **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.query_containers
- fullName: azure.cosmos.DatabaseProxy.query_users
  isExternal: false
  name: query_users(query, parameters=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.query_users
- fullName: azure.cosmos.DatabaseProxy.read
  isExternal: false
  name: read(populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.read
- fullName: azure.cosmos.DatabaseProxy.read_offer
  isExternal: false
  name: read_offer(**kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.read_offer
- fullName: azure.cosmos.DatabaseProxy.replace_container
  isExternal: false
  name: replace_container(container, partition_key, indexing_policy=None, default_ttl=None,
    conflict_resolution_policy=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.replace_container
- fullName: azure.cosmos.DatabaseProxy.replace_throughput
  isExternal: false
  name: replace_throughput(throughput, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.replace_throughput
- fullName: azure.cosmos.DatabaseProxy.replace_user
  isExternal: false
  name: replace_user(user, body, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.replace_user
- fullName: azure.cosmos.DatabaseProxy.upsert_user
  isExternal: false
  name: upsert_user(body, **kwargs)
  parent: azure.cosmos.DatabaseProxy
  uid: azure.cosmos.DatabaseProxy.upsert_user
- fullName: Iterable[dict[str, Any]]
  name: Iterable[dict[str, Any]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[dict[str, Any]]
- fullName: Iterable[str, Any]
  name: Iterable[str, Any]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Iterable[str, Any]
- fullName: Dict[Str, Any]
  name: Dict[Str, Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: Str
    name: Str
    uid: Str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Dict[Str, Any]
