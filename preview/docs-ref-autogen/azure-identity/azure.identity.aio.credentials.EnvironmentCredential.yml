### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.identity.aio.credentials.EnvironmentCredential.get_token
  class: azure.identity.aio.credentials.EnvironmentCredential
  fullName: azure.identity.aio.credentials.EnvironmentCredential
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.identity.aio.credentials
  name: EnvironmentCredential
  summary: "Authenticates as a service principal using a client secret or a certificate,\
    \ or as a user with a username and\npassword, depending on environment variable\
    \ settings. Configuration is attempted in this order, using these\nenvironment\
    \ variables:\n\nService principal with secret:\n   * **AZURE_CLIENT_ID**: the\
    \ service principal's client ID \n\n   * **AZURE_CLIENT_SECRET**: one of the service\
    \ principal's client secrets \n\n   * **AZURE_TENANT_ID**: ID of the service principal's\
    \ tenant. Also called its 'directory' ID. \n\nService principal with certificate:\n\
    \   * **AZURE_CLIENT_ID**: the service principal's client ID \n\n   * **AZURE_CLIENT_CERTIFICATE_PATH**:\
    \ path to a PEM-encoded certificate file including the private key \n\n   * **AZURE_TENANT_ID**:\
    \ ID of the service principal's tenant. Also called its 'directory' ID. \n\nUser\
    \ with username and password:\n   * **AZURE_CLIENT_ID**: the application's client\
    \ ID \n\n   * **AZURE_USERNAME**: a username (usually an email address) \n\n \
    \  * **AZURE_PASSWORD**: that user's password"
  syntax:
    content: 'EnvironmentCredential(**kwargs: typing.Mapping[str, typing.Any]) ->
      None'
  type: class
  uid: azure.identity.aio.credentials.EnvironmentCredential
- class: azure.identity.aio.credentials.EnvironmentCredential
  exceptions:
  - type: azure.core.exceptions.ClientAuthenticationError
  fullName: azure.identity.aio.credentials.EnvironmentCredential.get_token
  langs:
  - python
  module: azure.identity.aio.credentials
  name: 'get_token(*scopes: str, **kwargs: typing.Any) -> azure.core.credentials.AccessToken'
  summary: Asynchronously request an access token for *scopes*.
  syntax:
    content: 'get_token(*scopes: str, **kwargs: typing.Any) -> azure.core.credentials.AccessToken'
    parameters:
    - description: desired scopes for the token
      id: scopes
      type:
      - str
    return:
      type:
      - <xref:azure.core.credentials.AccessToken>
  type: method
  uid: azure.identity.aio.credentials.EnvironmentCredential.get_token
references:
- fullName: azure.identity.aio.credentials.EnvironmentCredential.get_token
  isExternal: false
  name: 'get_token(*scopes: str, **kwargs: typing.Any) -> azure.core.credentials.AccessToken'
  parent: azure.identity.aio.credentials.EnvironmentCredential
  uid: azure.identity.aio.credentials.EnvironmentCredential.get_token
