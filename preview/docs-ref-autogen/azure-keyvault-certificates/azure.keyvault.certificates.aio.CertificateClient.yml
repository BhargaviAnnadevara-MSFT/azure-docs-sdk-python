### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.certificates.aio.CertificateClient.backup_certificate
  - azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
  - azure.keyvault.certificates.aio.CertificateClient.create_certificate
  - azure.keyvault.certificates.aio.CertificateClient.create_contacts
  - azure.keyvault.certificates.aio.CertificateClient.create_issuer
  - azure.keyvault.certificates.aio.CertificateClient.delete_certificate
  - azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
  - azure.keyvault.certificates.aio.CertificateClient.delete_contacts
  - azure.keyvault.certificates.aio.CertificateClient.delete_issuer
  - azure.keyvault.certificates.aio.CertificateClient.get_certificate
  - azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
  - azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
  - azure.keyvault.certificates.aio.CertificateClient.get_contacts
  - azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
  - azure.keyvault.certificates.aio.CertificateClient.get_issuer
  - azure.keyvault.certificates.aio.CertificateClient.get_policy
  - azure.keyvault.certificates.aio.CertificateClient.import_certificate
  - azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
  - azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
  - azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
  - azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
  - azure.keyvault.certificates.aio.CertificateClient.merge_certificate
  - azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
  - azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
  - azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
  - azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
  - azure.keyvault.certificates.aio.CertificateClient.update_issuer
  - azure.keyvault.certificates.aio.CertificateClient.update_policy
  class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Creates a new instance of the Certificate client<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.keyvault.certificates.aio import\
    \ CertificateClient\n\n   # Create a KeyVaultCertificate using default Azure credentials\n\
    \   credential = DefaultAzureCredential()\n   certificate_client = CertificateClient(vault_url,\
    \ credential)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.certificates._shared.async_client_base.AsyncKeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: CertificateClient
  summary: A high-level asynchronous interface for managing a vault's certificates.
  syntax:
    parameters:
    - description: URL of the vault the client will access
      id: vault_url
      type:
      - str
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity.aio>'
      id: credential
  type: class
  uid: azure.keyvault.certificates.aio.CertificateClient
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a certificate backup<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # backup certificate\n\
    \   certificate_backup = await certificate_client.backup_certificate(name=cert_name)\n\
    \n   # returns the raw bytes of the backed up certificate\n   print(certificate_backup)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: backup_certificate
  summary: 'Backs up the specified certificate.


    Requests that a backup of the specified certificate be downloaded

    to the client. All versions of the certificate will be downloaded.

    This operation requires the certificates/backup permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    return:
      description: the backup blob containing the backed up certificate.
      type:
      - bytes
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: cancel_certificate_operation
  summary: 'Cancels a certificate operation.


    Cancels a certificate creation operation that is already in progress.

    This operation requires the certificates/update permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    return:
      description: The cancelled certificate operation
      type:
      - azure.keyvault.certificates.models.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Create a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.keyvault.certificates\
    \ import CertificatePolicy, SecretContentType\n\n   # specify the certificate\
    \ policy\n   cert_policy = CertificatePolicy(\n       exportable=True,\n     \
    \  key_type=\"RSA\",\n       key_size=2048,\n       reuse_key=False,\n       content_type=SecretContentType.PKCS12,\n\
    \       issuer_name=\"Self\",\n       subject_name=\"CN=*.microsoft.com\",\n \
    \      validity_in_months=24,\n       san_dns_names=[\"sdk.azure-int.net\"],\n\
    \   )\n   cert_name = \"cert-name\"\n   # create a certificate with optional arguments,\
    \ returns an async poller\n   create_certificate_poller = certificate_client.create_certificate(name=cert_name,\
    \ policy=cert_policy)\n\n   # awaiting the certificate poller gives us the result\
    \ of the long running operation\n   certificate = await create_certificate_poller\n\
    \n   print(certificate.id)\n   print(certificate.name)\n   print(certificate.policy.issuer_name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.create_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: create_certificate
  summary: 'Creates a new certificate.


    If this is the first version, the certificate resource is created. This

    operation requires the certificates/create permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    - description: The management policy for the certificate.
      id: policy
      type:
      - azure.keyvault.certificates.models.CertificatePolicy
    return:
      description: 'A coroutine for the creation of the certificate. Awaiting the
        coroutine

        returns the created KeyVaultCertificate if creation is successful, the CertificateOperation
        if not.'
      type:
      - azure.keyvault.certificates.models.KeyVaultCertificate
      - azure.keyvault.certificates.models.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.create_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Create contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # Create a list\
    \ of the contacts that you want to set for this key vault.\n   contact_list =\
    \ [\n       CertificateContact(email=\"admin@contoso.com\", name=\"John Doe\"\
    , phone=\"1111111111\"),\n       CertificateContact(email=\"admin2@contoso.com\"\
    , name=\"John Doe2\", phone=\"2222222222\"),\n   ]\n\n   contacts = await certificate_client.create_contacts(contacts=contact_list)\n\
    \   for contact in contacts:\n       print(contact.name)\n       print(contact.email)\n\
    \       print(contact.phone)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.create_contacts
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: create_contacts
  summary: 'Sets the certificate contacts for the key vault.


    Sets the certificate contacts for the key vault. This

    operation requires the certificates/managecontacts permission.'
  syntax:
    parameters:
    - description: The contact list for the vault certificates.
      id: contacts
      type:
      - list[azure.keyvault.certificates.models.CertificateContact]
    return:
      description: The created list of contacts
      type:
      - list[azure.keyvault.certificates.models.CertificateContact]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.create_contacts
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Create an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # First we specify\
    \ the AdministratorDetails for a issuer.\n   admin_details = [\n       AdministratorDetails(first_name=\"\
    John\", last_name=\"Doe\", email=\"admin@microsoft.com\", phone=\"4255555555\"\
    )\n   ]\n\n   issuer = await certificate_client.create_issuer(\n       name=\"\
    issuer1\", provider=\"Test\", account_id=\"keyvaultuser\", admin_details=admin_details,\
    \ enabled=True\n   )\n\n   print(issuer.name)\n   print(issuer.properties.provider)\n\
    \   print(issuer.account_id)\n\n   for admin_detail in issuer.admin_details:\n\
    \       print(admin_detail.first_name)\n       print(admin_detail.last_name)\n\
    \       print(admin_detail.email)\n       print(admin_detail.phone)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.create_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: create_issuer
  summary: 'Sets the specified certificate issuer.


    The SetCertificateIssuer operation adds or updates the specified

    certificate issuer. This operation requires the certificates/setissuers

    permission.'
  syntax:
    parameters:
    - description: The name of the issuer.
      id: name
      type:
      - str
    - description: The issuer provider.
      id: provider
      type:
      - str
    return:
      description: The created CertificateIssuer
      type:
      - azure.keyvault.certificates.models.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.create_issuer
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Delete a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # delete a certificate\n\
    \   deleted_certificate = await certificate_client.delete_certificate(name=cert_name)\n\
    \n   print(deleted_certificate.name)\n\n   # if the vault has soft-delete enabled,\
    \ the certificate's\n   # scheduled purge date, deleted_date, and recovery id\
    \ are available\n   print(deleted_certificate.deleted_date)\n   print(deleted_certificate.scheduled_purge_date)\n\
    \   print(deleted_certificate.recovery_id)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: delete_certificate
  summary: 'Deletes a certificate from the key vault.


    Deletes all versions of a certificate object along with its associated

    policy. Delete certificate cannot be used to remove individual versions

    of a certificate object. This operation requires the

    certificates/delete permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    return:
      description: The deleted certificate
      type:
      - azure.keyvault.certificates.models.DeletedCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: delete_certificate_operation
  summary: 'Deletes the creation operation for a specific certificate.


    Deletes the creation operation for a specified certificate that is in

    the process of being created. The certificate is no longer created.

    This operation requires the certificates/update permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    return:
      description: The deleted CertificateOperation
      type:
      - azure.keyvault.certificates.models.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Delete contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   deleted_contacts\
    \ = await certificate_client.delete_contacts()\n\n   for deleted_contact in deleted_contacts:\n\
    \       print(deleted_contact.name)\n       print(deleted_contact.email)\n   \
    \    print(deleted_contact.phone)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: delete_contacts
  summary: 'Deletes the certificate contacts for the key vault.


    Deletes the certificate contacts for the key vault certificate.

    This operation requires the certificates/managecontacts permission.'
  syntax:
    return:
      description: Contacts
      type:
      - list[azure.keyvault.certificates.models.CertificateContact]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Delete an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   deleted_issuer\
    \ = await certificate_client.delete_issuer(name=\"issuer1\")\n\n   print(deleted_issuer.name)\n\
    \   print(deleted_issuer.properties.provider)\n   print(deleted_issuer.account_id)\n\
    \n   for admin_detail in deleted_issuer.admin_details:\n       print(admin_detail.first_name)\n\
    \       print(admin_detail.last_name)\n       print(admin_detail.email)\n    \
    \   print(admin_detail.phone)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: delete_issuer
  summary: 'Deletes the specified certificate issuer.


    Permanently removes the specified certificate issuer from the vault.

    This operation requires the certificates/manageissuers/deleteissuers permission.'
  syntax:
    parameters:
    - description: The name of the issuer.
      id: name
      type:
      - str
    return:
      description: CertificateIssuer
      type:
      - azure.keyvault.certificates.models.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get the latest\
    \ version of a certificate\n   certificate = await certificate_client.get_certificate(name=cert_name)\n\
    \n   print(certificate.id)\n   print(certificate.name)\n   print(certificate.policy.issuer_name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: get_certificate
  summary: 'Gets a certificate with its management policy attached.


    This operation requires the certificates/get permission. Does not accept the

    version of the certificate as a parameter. If you wish to specify version, use

    the get_certificate_version function and specify the desired version.'
  syntax:
    parameters:
    - description: The name of the certificate in the given vault.
      id: name
      type:
      - str
    return:
      description: An instance of KeyVaultCertificate
      type:
      - azure.keyvault.certificates.models.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: get_certificate_operation
  summary: 'Gets the creation operation of a certificate.


    Gets the creation operation associated with a specified certificate.

    This operation requires the certificates/get permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    return:
      description: The created CertificateOperation
      type:
      - azure.keyvault.certificates.models.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get the latest\
    \ version of a certificate\n   certificate = await certificate_client.get_certificate(name=cert_name)\n\
    \n   print(certificate.id)\n   print(certificate.name)\n   print(certificate.policy.issuer_name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: get_certificate_version
  summary: 'Gets a specific version of a certificate without returning its management
    policy.


    If you wish to get the latest version of your certificate, or to get the certificate''s
    policy as well,

    use the get_certificate function.'
  syntax:
    parameters:
    - description: The name of the certificate in the given vault.
      id: name
      type:
      - str
    - description: The version of the certificate.
      id: version
      type:
      - str
    return:
      description: An instance of KeyVaultCertificate
      type:
      - azure.keyvault.certificates.models.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\4\\\\\
    azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   contacts = await\
    \ certificate_client.get_contacts()\n\n   # Loop through the certificate contacts\
    \ for this key vault.\n   for contact in contacts:\n       print(contact.name)\n\
    \       print(contact.email)\n       print(contact.phone)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_contacts
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: get_contacts
  summary: 'Gets the certificate contacts for the key vault.


    Returns the set of certificate contact resources in the specified

    key vault. This operation requires the certificates/managecontacts

    permission.'
  syntax:
    return:
      description: The certificate contacts for the key vault.
      type:
      - list[azure.keyvault.certificates.models.CertificateContact]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_contacts
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a deleted certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get a deleted\
    \ certificate (requires soft-delete enabled for the vault)\n   deleted_certificate\
    \ = await certificate_client.get_deleted_certificate(name=\"cert-name\")\n   print(deleted_certificate.name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: get_deleted_certificate
  summary: 'Retrieves information about the specified deleted certificate.


    Retrieves the deleted certificate information plus its attributes,

    such as retention interval, scheduled permanent deletion, and the

    current deletion recovery level. This operation requires the certificates/

    get permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    return:
      description: The deleted certificate
      type:
      - azure.keyvault.certificates.models.DeletedCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\4\\\\\
    azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   issuer = await\
    \ certificate_client.get_issuer(name=\"issuer1\")\n\n   print(issuer.name)\n \
    \  print(issuer.properties.provider)\n   print(issuer.account_id)\n\n   for admin_detail\
    \ in issuer.admin_details:\n       print(admin_detail.first_name)\n       print(admin_detail.last_name)\n\
    \       print(admin_detail.email)\n       print(admin_detail.phone)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: get_issuer
  summary: 'Gets the specified certificate issuer.


    Returns the specified certificate issuer resources in the key vault.

    This operation requires the certificates/manageissuers/getissuers permission.'
  syntax:
    parameters:
    - description: The name of the issuer.
      id: name
      type:
      - str
    return:
      description: The specified certificate issuer.
      type:
      - azure.keyvault.certificates.models.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_issuer
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_policy
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: get_policy
  summary: 'Gets the policy for a certificate.


    Returns the specified certificate policy resources in the key

    vault. This operation requires the certificates/get permission.'
  syntax:
    parameters:
    - description: The name of the certificate in a given key vault.
      id: certificate_name
      type:
      - str
    return:
      description: The certificate policy
      type:
      - azure.keyvault.certificates.models.CertificatePolicy
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_policy
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.import_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: import_certificate
  summary: 'Imports a certificate into a specified key vault.


    Imports an existing valid certificate, containing a private key, into

    Azure Key Vault. The certificate to be imported can be in either PFX or

    PEM format. If the certificate is in PEM format the PEM file must

    contain the key as well as x509 certificates. This operation requires

    the certificates/import permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    - description: 'Bytes of the certificate object to import.

        This certificate needs to contain the private key.'
      id: certificate_bytes
      type:
      - bytes
    return:
      description: The imported KeyVaultCertificate
      type:
      - azure.keyvault.certificates.models.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.import_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List all the deleted certificates<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator\
    \ of deleted certificates (requires soft-delete enabled for the vault)\n   deleted_certificates\
    \ = certificate_client.list_deleted_certificates()\n\n   async for certificate\
    \ in deleted_certificates:\n       print(certificate.id)\n       print(certificate.name)\n\
    \       print(certificate.scheduled_purge_date)\n       print(certificate.recovery_id)\n\
    \       print(certificate.deleted_date)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_deleted_certificates
  summary: 'Lists the deleted certificates in the specified vault currently

    available for recovery.


    Retrieves the certificates in the current vault which are in a deleted

    state and ready for recovery or purging. This operation includes

    deletion-specific information. This operation requires the certificates/get/list

    permission. This operation can only be enabled on soft-delete enabled vaults.'
  syntax:
    return:
      description: An iterator like instance of DeletedCertificate
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.models.DeletedCertificate]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List all versions of a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator\
    \ of all versions of a certificate\n   certificate_versions = certificate_client.list_properties_of_certificate_versions(name=\"\
    cert-name\")\n\n   async for certificate in certificate_versions:\n       print(certificate.id)\n\
    \       print(certificate.properties.updated_on)\n       print(certificate.properties.version)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_properties_of_certificate_versions
  summary: 'List the versions of a certificate.


    The GetCertificateVersions operation returns the versions of a

    certificate in the key vault. This operation requires the

    certificates/list permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: name
      type:
      - str
    return:
      description: An iterator like instance of CertificateProperties
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.models.CertificateProperties]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List all certificates<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # list certificates\n\
    \   certificates = certificate_client.list_properties_of_certificates()\n\n  \
    \ async for certificate in certificates:\n       print(certificate.id)\n     \
    \  print(certificate.created_on)\n       print(certificate.name)\n       print(certificate.updated_on)\n\
    \       print(certificate.enabled)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_properties_of_certificates
  summary: 'List certificates in the key vault.


    The GetCertificates operation returns the set of certificates resources

    in the key vault. This operation requires the

    certificates/list permission.'
  syntax:
    return:
      description: An iterator like instance of CertificateProperties
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.models.CertificateProperties]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List issuers of a vault<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   issuers = certificate_client.list_properties_of_issuers()\n\
    \n   async for issuer in issuers:\n       print(issuer.name)\n       print(issuer.provider)\n\
    \n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_properties_of_issuers
  summary: 'Lists properties of the certificate issuers for the key vault.


    Returns the set of certificate issuer resources in the key

    vault. This operation requires the certificates/manageissuers/getissuers

    permission.'
  syntax:
    return:
      description: An iterator like instance of Issuers
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.models.CertificateIssuer]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: merge_certificate
  summary: 'Merges a certificate or a certificate chain with a key pair existing on
    the server.


    Performs the merging of a certificate or certificate chain with a key pair currently

    available in the service. This operation requires the certificates/create permission.

    Make sure when creating the certificate to merge using create_certificate that
    you set

    its issuer to ''Unknown''. This way Key Vault knows that the certificate will
    not be signed

    by an issuer known to it.'
  syntax:
    parameters:
    - description: The name of the certificate
      id: name
      type:
      - str
    - description: The certificate or the certificate chain to merge.
      id: x509_certificates
      type:
      - list[bytearray]
    return:
      description: The merged certificate operation
      type:
      - azure.keyvault.certificates.models.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: purge_deleted_certificate
  summary: 'Permanently deletes the specified deleted certificate.


    Performs an irreversible deletion of the specified certificate, without

    possibility for recovery. The operation is not available if the recovery

    level does not specified ''Purgeable''. This operation requires the

    certificate/purge permission.'
  syntax:
    parameters:
    - description: The name of the certificate
      id: name
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Recover a deleted certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # recover deleted\
    \ certificate to its latest version (requires soft-delete enabled for the vault)\n\
    \   recovered_certificate = await certificate_client.recover_deleted_certificate(name=\"\
    cert-name\")\n   print(recovered_certificate.id)\n   print(recovered_certificate.name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: recover_deleted_certificate
  summary: 'Recovers the deleted certificate back to its current version under

    /certificates.


    Performs the reversal of the Delete operation. The operation is applicable

    in vaults enabled for soft-delete, and must be issued during the retention

    interval (available in the deleted certificate''s attributes). This operation

    requires the certificates/recover permission.'
  syntax:
    parameters:
    - description: The name of the deleted certificate
      id: name
      type:
      - str
    return:
      description: The recovered certificate
      type:
      - azure.keyvault.certificates.models.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Restore a certificate backup<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # restores a\
    \ certificate backup\n   restored_certificate = await certificate_client.restore_certificate_backup(certificate_backup)\n\
    \   print(restored_certificate.id)\n   print(restored_certificate.name)\n   print(restored_certificate.properties.version)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: restore_certificate_backup
  summary: 'Restores a backed up certificate to a vault.


    Restores a backed up certificate, and all its versions, to a vault.

    this operation requires the certificates/restore permission.'
  syntax:
    parameters:
    - description: The backup blob associated with a certificate bundle.
      id: backup
      type:
      - bytes
    return:
      description: The restored KeyVaultCertificate
      type:
      - azure.keyvault.certificates.models.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Update a certificate's attributes<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\4\\\\azure-keyvault-certificates-4.0.0b5\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # update attributes\
    \ of an existing certificate\n   tags = {\"foo\": \"updated tag\"}\n   updated_certificate\
    \ = await certificate_client.update_certificate_properties(certificate.name, tags=tags)\n\
    \n   print(updated_certificate.properties.version)\n   print(updated_certificate.properties.updated_on)\n\
    \   print(updated_certificate.properties.tags)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: update_certificate_properties
  summary: 'Updates the specified attributes associated with the given certificate.


    The UpdateCertificate operation applies the specified update on the

    given certificate; the only elements updated are the certificate''s

    attributes. This operation requires the certificates/update permission.'
  syntax:
    parameters:
    - description: The name of the certificate in the given key vault.
      id: name
      type:
      - str
    - description: The version of the certificate.
      id: version
      type:
      - str
    return:
      description: The updated KeyVaultCertificate
      type:
      - azure.keyvault.certificates.models.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.update_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: update_issuer
  summary: 'Updates the specified certificate issuer.


    Performs an update on the specified certificate issuer entity.

    This operation requires the certificates/setissuers permission.'
  syntax:
    parameters:
    - description: The name of the issuer.
      id: name
      type:
      - str
    return:
      description: The updated issuer
      type:
      - azure.keyvault.certificates.models.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.update_issuer
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.update_policy
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: update_policy
  summary: 'Updates the policy for a certificate.


    Set specified members in the certificate policy. Leaves others as null.

    This operation requries the certificates/update permission.'
  syntax:
    parameters:
    - description: The name of the certificate in the given vault.
      id: certificate_name
      type:
      - str
    - description: The policy for the certificate.
      id: policy
      type:
      - azure.keyvault.certificates.models.CertificatePolicy
    return:
      description: The certificate policy
      type:
      - azure.keyvault.certificates.models.CertificatePolicy
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.update_policy
references:
- fullName: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
  isExternal: false
  name: backup_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
  isExternal: false
  name: cancel_certificate_operation
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
- fullName: azure.keyvault.certificates.aio.CertificateClient.create_certificate
  isExternal: false
  name: create_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.create_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.create_contacts
  isExternal: false
  name: create_contacts
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.create_contacts
- fullName: azure.keyvault.certificates.aio.CertificateClient.create_issuer
  isExternal: false
  name: create_issuer
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.create_issuer
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
  isExternal: false
  name: delete_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
  isExternal: false
  name: delete_certificate_operation
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
  isExternal: false
  name: delete_contacts
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
  isExternal: false
  name: delete_issuer
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate
  isExternal: false
  name: get_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
  isExternal: false
  name: get_certificate_operation
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
  isExternal: false
  name: get_certificate_version
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_contacts
  isExternal: false
  name: get_contacts
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_contacts
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
  isExternal: false
  name: get_deleted_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_issuer
  isExternal: false
  name: get_issuer
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_issuer
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_policy
  isExternal: false
  name: get_policy
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_policy
- fullName: azure.keyvault.certificates.aio.CertificateClient.import_certificate
  isExternal: false
  name: import_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.import_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
  isExternal: false
  name: list_deleted_certificates
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
  isExternal: false
  name: list_properties_of_certificate_versions
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
  isExternal: false
  name: list_properties_of_certificates
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
  isExternal: false
  name: list_properties_of_issuers
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
- fullName: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
  isExternal: false
  name: merge_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
  isExternal: false
  name: purge_deleted_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
  isExternal: false
  name: recover_deleted_certificate
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
  isExternal: false
  name: restore_certificate_backup
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
- fullName: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
  isExternal: false
  name: update_certificate_properties
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
- fullName: azure.keyvault.certificates.aio.CertificateClient.update_issuer
  isExternal: false
  name: update_issuer
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.update_issuer
- fullName: azure.keyvault.certificates.aio.CertificateClient.update_policy
  isExternal: false
  name: update_policy
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.update_policy
- fullName: list[azure.keyvault.certificates.models.CertificateContact]
  name: list[CertificateContact]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.models.CertificateContact
    name: CertificateContact
    uid: azure.keyvault.certificates.models.CertificateContact
  - fullName: ']'
    name: ']'
  uid: list[azure.keyvault.certificates.models.CertificateContact]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.certificates.models.DeletedCertificate]
  name: ItemPaged[DeletedCertificate]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    uid: azure.keyvault.certificates.models.DeletedCertificate
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.certificates.models.DeletedCertificate]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.certificates.models.CertificateProperties]
  name: ItemPaged[CertificateProperties]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.models.CertificateProperties
    name: CertificateProperties
    uid: azure.keyvault.certificates.models.CertificateProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.certificates.models.CertificateProperties]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.certificates.models.CertificateIssuer]
  name: ItemPaged[CertificateIssuer]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.models.CertificateIssuer
    name: CertificateIssuer
    uid: azure.keyvault.certificates.models.CertificateIssuer
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.certificates.models.CertificateIssuer]
- fullName: list[bytearray]
  name: list[bytearray]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: bytearray
    name: bytearray
    uid: bytearray
  - fullName: ']'
    name: ']'
  uid: list[bytearray]
