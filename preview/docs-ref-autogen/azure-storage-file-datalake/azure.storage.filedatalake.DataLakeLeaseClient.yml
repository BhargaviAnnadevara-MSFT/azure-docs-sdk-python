### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.filedatalake.DataLakeLeaseClient.acquire
  - azure.storage.filedatalake.DataLakeLeaseClient.break_lease
  - azure.storage.filedatalake.DataLakeLeaseClient.change
  - azure.storage.filedatalake.DataLakeLeaseClient.release
  - azure.storage.filedatalake.DataLakeLeaseClient.renew
  class: azure.storage.filedatalake.DataLakeLeaseClient
  fullName: azure.storage.filedatalake.DataLakeLeaseClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.storage.filedatalake
  name: DataLakeLeaseClient
  summary: 'Creates a new DataLakeLeaseClient.


    This client provides lease operations on a FileSystemClient, DataLakeDirectoryClient
    or DataLakeFileClient.'
  syntax:
    content: DataLakeLeaseClient(client, lease_id=None)
    parameters:
    - description: The client of the file system, directory, or file to lease.
      id: client
      type:
      - azure.storage.filedatalake.FileSystemClient
      - azure.storage.filedatalake.DataLakeDirectoryClient
      - azure.storage.filedatalake.DataLakeFileClient
    - description: 'A string representing the lease ID of an existing lease. This
        value does not

        need to be specified in order to acquire a new lease, or break one.'
      id: lease_id
      type:
      - str
    variables:
    - description: 'The ID of the lease currently being maintained. This will be *None*
        if no

        lease has yet been acquired.'
      id: id
      type:
      - str
    - description: 'The ETag of the lease currently being maintained. This will be
        *None* if no

        lease has yet been acquired or modified.'
      id: etag
      type:
      - str
    - description: 'The last modified timestamp of the lease currently being maintained.

        This will be *None* if no lease has yet been acquired or modified.'
      id: last_modified
      type:
      - datetime.datetime
  type: class
  uid: azure.storage.filedatalake.DataLakeLeaseClient
- class: azure.storage.filedatalake.DataLakeLeaseClient
  fullName: azure.storage.filedatalake.DataLakeLeaseClient.acquire
  langs:
  - python
  module: azure.storage.filedatalake
  name: acquire(lease_duration=-1, **kwargs)
  summary: "Requests a new lease.\n\nIf the container does not have an active lease,\
    \ the Blob service creates a\nlease on the container and returns a new lease ID.\n\
    \n\n:keyword <xref:azure.storage.filedatalake.MatchConditions> match_condition:\n\
    \   The match condition to use upon the etag."
  syntax:
    content: acquire(lease_duration=-1, **kwargs)
    parameters:
    - defaultValue: '-1'
      id: lease_duration
    return:
      type:
      - None
  type: method
  uid: azure.storage.filedatalake.DataLakeLeaseClient.acquire
- class: azure.storage.filedatalake.DataLakeLeaseClient
  fullName: azure.storage.filedatalake.DataLakeLeaseClient.break_lease
  langs:
  - python
  module: azure.storage.filedatalake
  name: break_lease(lease_break_period=None, **kwargs)
  summary: 'Break the lease, if the container or blob has an active lease.


    Once a lease is broken, it cannot be renewed. Any authorized request can break
    the lease;

    the request is not required to specify a matching lease ID. When a lease

    is broken, the lease break period is allowed to elapse, during which time

    no lease operation except break and release can be performed on the container
    or blob.

    When a lease is successfully broken, the response indicates the interval

    in seconds until a new lease can be acquired.'
  syntax:
    content: break_lease(lease_break_period=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'This is the proposed duration of seconds that the lease

        should continue before it is broken, between 0 and 60 seconds. This

        break period is only used if it is shorter than the time remaining

        on the lease. If longer, the time remaining on the lease is used.

        A new lease will not be available before the break period has

        expired, but the lease may be held for longer than the break

        period. If this header does not appear with a break

        operation, a fixed-duration lease breaks after the remaining lease

        period elapses, and an infinite lease breaks immediately.'
      id: lease_break_period
      type:
      - int
    return:
      description: Approximate time remaining in the lease period, in seconds.
      type:
      - int
  type: method
  uid: azure.storage.filedatalake.DataLakeLeaseClient.break_lease
- class: azure.storage.filedatalake.DataLakeLeaseClient
  fullName: azure.storage.filedatalake.DataLakeLeaseClient.change
  langs:
  - python
  module: azure.storage.filedatalake
  name: change(proposed_lease_id, **kwargs)
  summary: "Change the lease ID of an active lease.\n\n\n:keyword <xref:azure.storage.filedatalake.MatchConditions>\
    \ match_condition:\n   The match condition to use upon the etag."
  syntax:
    content: change(proposed_lease_id, **kwargs)
    parameters:
    - id: proposed_lease_id
    return:
      description: None
  type: method
  uid: azure.storage.filedatalake.DataLakeLeaseClient.change
- class: azure.storage.filedatalake.DataLakeLeaseClient
  fullName: azure.storage.filedatalake.DataLakeLeaseClient.release
  langs:
  - python
  module: azure.storage.filedatalake
  name: release(**kwargs)
  summary: "Release the lease.\n\nThe lease may be released if the client lease id\
    \ specified matches\nthat associated with the container or blob. Releasing the\
    \ lease allows another client\nto immediately acquire the lease for the container\
    \ or blob as soon as the release is complete.\n\n\n:keyword <xref:azure.storage.filedatalake.MatchConditions>\
    \ match_condition:\n   The match condition to use upon the etag."
  syntax:
    content: release(**kwargs)
    parameters: []
    return:
      description: None
  type: method
  uid: azure.storage.filedatalake.DataLakeLeaseClient.release
- class: azure.storage.filedatalake.DataLakeLeaseClient
  fullName: azure.storage.filedatalake.DataLakeLeaseClient.renew
  langs:
  - python
  module: azure.storage.filedatalake
  name: renew(**kwargs)
  summary: "Renews the lease.\n\nThe lease can be renewed if the lease ID specified\
    \ in the\nlease client matches that associated with the container or blob. Note\
    \ that\nthe lease may be renewed even if it has expired as long as the container\n\
    or blob has not been leased again since the expiration of that lease. When you\n\
    renew a lease, the lease duration clock resets.\n\n\n:keyword <xref:azure.storage.filedatalake.MatchConditions>\
    \ match_condition:\n   The match condition to use upon the etag."
  syntax:
    content: renew(**kwargs)
    parameters: []
    return:
      description: None
  type: method
  uid: azure.storage.filedatalake.DataLakeLeaseClient.renew
references:
- fullName: azure.storage.filedatalake.DataLakeLeaseClient.acquire
  isExternal: false
  name: acquire(lease_duration=-1, **kwargs)
  parent: azure.storage.filedatalake.DataLakeLeaseClient
  uid: azure.storage.filedatalake.DataLakeLeaseClient.acquire
- fullName: azure.storage.filedatalake.DataLakeLeaseClient.break_lease
  isExternal: false
  name: break_lease(lease_break_period=None, **kwargs)
  parent: azure.storage.filedatalake.DataLakeLeaseClient
  uid: azure.storage.filedatalake.DataLakeLeaseClient.break_lease
- fullName: azure.storage.filedatalake.DataLakeLeaseClient.change
  isExternal: false
  name: change(proposed_lease_id, **kwargs)
  parent: azure.storage.filedatalake.DataLakeLeaseClient
  uid: azure.storage.filedatalake.DataLakeLeaseClient.change
- fullName: azure.storage.filedatalake.DataLakeLeaseClient.release
  isExternal: false
  name: release(**kwargs)
  parent: azure.storage.filedatalake.DataLakeLeaseClient
  uid: azure.storage.filedatalake.DataLakeLeaseClient.release
- fullName: azure.storage.filedatalake.DataLakeLeaseClient.renew
  isExternal: false
  name: renew(**kwargs)
  parent: azure.storage.filedatalake.DataLakeLeaseClient
  uid: azure.storage.filedatalake.DataLakeLeaseClient.renew
