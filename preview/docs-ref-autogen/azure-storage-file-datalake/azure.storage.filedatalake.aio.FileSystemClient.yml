### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.filedatalake.aio.FileSystemClient.acquire_lease
  - azure.storage.filedatalake.aio.FileSystemClient.create_directory
  - azure.storage.filedatalake.aio.FileSystemClient.create_file
  - azure.storage.filedatalake.aio.FileSystemClient.create_file_system
  - azure.storage.filedatalake.aio.FileSystemClient.delete_directory
  - azure.storage.filedatalake.aio.FileSystemClient.delete_file
  - azure.storage.filedatalake.aio.FileSystemClient.delete_file_system
  - azure.storage.filedatalake.aio.FileSystemClient.get_directory_client
  - azure.storage.filedatalake.aio.FileSystemClient.get_file_client
  - azure.storage.filedatalake.aio.FileSystemClient.get_file_system_properties
  - azure.storage.filedatalake.aio.FileSystemClient.get_paths
  - azure.storage.filedatalake.aio.FileSystemClient.set_file_system_metadata
  class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.filedatalake._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.filedatalake._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.filedatalake._file_system_client.FileSystemClient
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: FileSystemClient
  summary: 'A client to interact with a specific file system, even if that file system

    may not yet exist.


    For operations relating to a specific directory or file within this file system,
    a directory client or file client

    can be retrieved using the <xref:azure.storage.filedatalake.aio.FileSystemClient.get_directory_client>
    or <xref:azure.storage.filedatalake.aio.FileSystemClient.get_file_client> functions.'
  syntax:
    content: FileSystemClient(account_url, file_system_name, credential=None, **kwargs)
    parameters:
    - description: The URI to the storage account.
      id: account_url
      type:
      - str
    - description: The file system for the directory or files.
      id: file_system_name
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        and account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
    variables:
    - description: The full endpoint URL to the file system, including SAS token if
        used.
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
  type: class
  uid: azure.storage.filedatalake.aio.FileSystemClient
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.acquire_lease
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  summary: 'Requests a new lease. If the file system does not have an active lease,

    the DataLake service creates a lease on the file system and returns a new

    lease ID.'
  syntax:
    content: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
    parameters:
    - description: 'Specifies the duration of the lease, in seconds, or negative one

        (-1) for a lease that never expires. A non-infinite lease can be

        between 15 and 60 seconds. A lease duration cannot be changed

        using renew or change. Default is -1 (infinite lease).'
      id: lease_duration
      type:
      - int
    - description: 'Proposed lease ID, in a GUID string format. The DataLake service
        returns

        400 (Invalid request) if the proposed lease ID is not in the correct format.'
      id: lease_id
      type:
      - str
    return:
      description: A DataLakeLeaseClient object, that can be run in a context manager.
      type:
      - azure.storage.filedatalake.DataLakeLeaseClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.acquire_lease
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.create_directory
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: create_directory(directory, content_settings=None, metadata=None, **kwargs)
  summary: Create directory
  syntax:
    content: create_directory(directory, content_settings=None, metadata=None, **kwargs)
    parameters:
    - description: 'The directory with which to interact. This can either be the name
        of the directory,

        or an instance of DirectoryProperties.'
      id: directory
      type:
      - str
      - azure.storage.filedatalake.DirectoryProperties
    - defaultValue: None
      description: ContentSettings object used to set path properties.
      id: content_settings
      type:
      - azure.storage.filedatalake.ContentSettings
    - defaultValue: None
      description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    return:
      description: DataLakeDirectoryClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.create_directory
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.create_file
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: create_file(file, **kwargs)
  summary: Create file
  syntax:
    content: create_file(file, **kwargs)
    parameters:
    - description: 'The file with which to interact. This can either be the name of
        the file,

        or an instance of FileProperties.'
      id: file
      type:
      - str
      - azure.storage.filedatalake.FileProperties
    - description: ContentSettings object used to set path properties.
      id: content_settings
      type:
      - azure.storage.filedatalake.ContentSettings
    - description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    return:
      description: DataLakeFileClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.create_file
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.create_file_system
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: create_file_system(metadata=None, public_access=None, **kwargs)
  summary: 'Creates a new file system under the specified account.


    If the file system with the same name already exists, a ResourceExistsError will

    be raised. This method returns a client with which to interact with the newly

    created file system.'
  syntax:
    content: create_file_system(metadata=None, public_access=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A dict with name-value pairs to associate with the

        file system as metadata. Example: *{''Category'':''test''}*'
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: 'Possible values include: file system, file.'
      id: public_access
      type:
      - azure.storage.filedatalake.PublicAccess
    return:
      type:
      - azure.storage.filedatalake.FileSystemClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.create_file_system
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.delete_directory
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: delete_directory(directory, **kwargs)
  summary: Marks the specified path for deletion.
  syntax:
    content: delete_directory(directory, **kwargs)
    parameters:
    - description: 'The directory with which to interact. This can either be the name
        of the directory,

        or an instance of DirectoryProperties.'
      id: directory
      type:
      - str
      - azure.storage.filedatalake.DirectoryProperties
    return:
      description: DataLakeDirectoryClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.delete_directory
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.delete_file
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: delete_file(file, lease=None, **kwargs)
  summary: Marks the specified file for deletion.
  syntax:
    content: delete_file(file, lease=None, **kwargs)
    parameters:
    - description: 'The file with which to interact. This can either be the name of
        the file,

        or an instance of FileProperties.'
      id: file
      type:
      - str
      - azure.storage.filedatalake.FileProperties
    - defaultValue: None
      id: lease
    return:
      description: DataLakeFileClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.delete_file
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.delete_file_system
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: delete_file_system(**kwargs)
  summary: 'Marks the specified file system for deletion.


    The file system and any files contained within it are later deleted during garbage
    collection.

    If the file system is not found, a ResourceNotFoundError will be raised.'
  syntax:
    content: delete_file_system(**kwargs)
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.delete_file_system
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.get_directory_client
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: get_directory_client(directory)
  summary: 'Get a client to interact with the specified directory.


    The directory need not already exist.'
  syntax:
    content: get_directory_client(directory)
    parameters:
    - description: 'The directory with which to interact. This can either be the name
        of the directory,

        or an instance of DirectoryProperties.'
      id: directory
      type:
      - str
      - azure.storage.filedatalake.DirectoryProperties
    return:
      description: A DataLakeDirectoryClient.
      type:
      - azure.storage.filedatalake.DataLakeDirectoryClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_directory_client
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.get_file_client
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: get_file_client(file_path)
  summary: 'Get a client to interact with the specified file.


    The file need not already exist.'
  syntax:
    content: get_file_client(file_path)
    parameters:
    - description: 'The file with which to interact. This can either be the path of
        the file(from root directory),

        or an instance of FileProperties. eg. directory/subdirectory/file'
      id: file_path
      type:
      - str
      - azure.storage.filedatalake.FileProperties
    return:
      description: A DataLakeFileClient.
      type:
      - azure.storage.filedatalake..DataLakeFileClient
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_file_client
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.get_file_system_properties
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: get_file_system_properties(**kwargs)
  summary: 'Returns all user-defined metadata and system properties for the specified

    file system. The data returned does not include the file system''s list of paths.'
  syntax:
    content: get_file_system_properties(**kwargs)
    parameters: []
    return:
      description: Properties for the specified file system within a file system object.
      type:
      - azure.storage.filedatalake.FileSystemProperties
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_file_system_properties
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.get_paths
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: get_paths(path=None, recursive=True, max_results=None, **kwargs)
  summary: 'Returns a generator to list the paths(could be files or directories) under
    the specified file system.

    The generator will lazily follow the continuation tokens returned by

    the service.'
  syntax:
    content: get_paths(path=None, recursive=True, max_results=None, **kwargs)
    parameters:
    - defaultValue: None
      description: Filters the results to return only paths under the specified path.
      id: path
      type:
      - str
    - defaultValue: 'True'
      description: 'An optional value that specifies the maximum

        number of items to return per page. If omitted or greater than 5,000, the

        response will include up to 5,000 items per page.'
      id: max_results
      type:
      - int
    - defaultValue: None
      id: max_results
    return:
      description: An iterable (auto-paging) response of PathProperties.
      type:
      - azure.core.paging.ItemPaged[azure.storage.filedatalake.PathProperties]
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_paths
- class: azure.storage.filedatalake.aio.FileSystemClient
  fullName: azure.storage.filedatalake.aio.FileSystemClient.set_file_system_metadata
  langs:
  - python
  module: azure.storage.filedatalake.aio
  name: set_file_system_metadata(metadata=None, **kwargs)
  summary: 'Sets one or more user-defined name-value pairs for the specified

    file system. Each call to this operation replaces all existing metadata

    attached to the file system. To remove all metadata from the file system,

    call this operation with no metadata dict.'
  syntax:
    content: set_file_system_metadata(metadata=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A dict containing name-value pairs to associate with the file
        system as

        metadata. Example: {''category'':''test''}'
      id: metadata
      type:
      - dict[str, str]
    return:
      description: file system-updated property dict (Etag and last modified).
  type: method
  uid: azure.storage.filedatalake.aio.FileSystemClient.set_file_system_metadata
references:
- fullName: azure.storage.filedatalake.aio.FileSystemClient.acquire_lease
  isExternal: false
  name: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.acquire_lease
- fullName: azure.storage.filedatalake.aio.FileSystemClient.create_directory
  isExternal: false
  name: create_directory(directory, content_settings=None, metadata=None, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.create_directory
- fullName: azure.storage.filedatalake.aio.FileSystemClient.create_file
  isExternal: false
  name: create_file(file, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.create_file
- fullName: azure.storage.filedatalake.aio.FileSystemClient.create_file_system
  isExternal: false
  name: create_file_system(metadata=None, public_access=None, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.create_file_system
- fullName: azure.storage.filedatalake.aio.FileSystemClient.delete_directory
  isExternal: false
  name: delete_directory(directory, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.delete_directory
- fullName: azure.storage.filedatalake.aio.FileSystemClient.delete_file
  isExternal: false
  name: delete_file(file, lease=None, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.delete_file
- fullName: azure.storage.filedatalake.aio.FileSystemClient.delete_file_system
  isExternal: false
  name: delete_file_system(**kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.delete_file_system
- fullName: azure.storage.filedatalake.aio.FileSystemClient.get_directory_client
  isExternal: false
  name: get_directory_client(directory)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_directory_client
- fullName: azure.storage.filedatalake.aio.FileSystemClient.get_file_client
  isExternal: false
  name: get_file_client(file_path)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_file_client
- fullName: azure.storage.filedatalake.aio.FileSystemClient.get_file_system_properties
  isExternal: false
  name: get_file_system_properties(**kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_file_system_properties
- fullName: azure.storage.filedatalake.aio.FileSystemClient.get_paths
  isExternal: false
  name: get_paths(path=None, recursive=True, max_results=None, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.get_paths
- fullName: azure.storage.filedatalake.aio.FileSystemClient.set_file_system_metadata
  isExternal: false
  name: set_file_system_metadata(metadata=None, **kwargs)
  parent: azure.storage.filedatalake.aio.FileSystemClient
  uid: azure.storage.filedatalake.aio.FileSystemClient.set_file_system_metadata
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: azure.core.paging.ItemPaged[azure.storage.filedatalake.PathProperties]
  name: ItemPaged[PathProperties]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.filedatalake.PathProperties
    name: PathProperties
    uid: azure.storage.filedatalake.PathProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.storage.filedatalake.PathProperties]
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
