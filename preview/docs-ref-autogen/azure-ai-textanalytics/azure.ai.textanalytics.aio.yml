### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.ai.textanalytics.aio.TextAnalyticsClient
  - azure.ai.textanalytics.aio.single_detect_language
  - azure.ai.textanalytics.aio.single_recognize_entities
  - azure.ai.textanalytics.aio.single_recognize_pii_entities
  - azure.ai.textanalytics.aio.single_recognize_linked_entities
  - azure.ai.textanalytics.aio.single_extract_key_phrases
  - azure.ai.textanalytics.aio.single_analyze_sentiment
  fullName: azure.ai.textanalytics.aio
  kind: import
  langs:
  - python
  module: azure.ai.textanalytics.aio
  name: aio
  type: package
  uid: azure.ai.textanalytics.aio
- example:
  - "Detecting language in a single string.<!--[!code-python[Main](les\\async_samples\\\
    sample_single_detect_language_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\6\\\\azure-ai-textanalytics-1.0.0b1\\\\\
    samples\\\\async_samples\\\\sample_single_detect_language_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics.aio\
    \ import single_detect_language\n\n   text = \"I need to take my cat to the veterinarian.\"\
    \n\n   result = await single_detect_language(\n       endpoint=self.endpoint,\n\
    \       credential=self.key,\n       input_text=text,\n       country_hint=\"\
    US\",\n       show_stats=True\n   )\n\n   print(\"Language detected: {}\".format(result.primary_language.name))\n\
    \   print(\"Confidence score: {}\\n\".format(result.primary_language.score))\n\
    \   print(\"Document Statistics:\")\n   print(\"Text character count: {}\".format(result.statistics.character_count))\n\
    \   print(\"Transactions count: {}\".format(result.statistics.transaction_count))\n\
    \n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.textanalytics.aio.single_detect_language
  langs:
  - python
  module: azure.ai.textanalytics.aio
  name: 'single_detect_language(endpoint: str, credential: str, input_text: str, country_hint:
    typing.Union[str, NoneType] = ''US'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.DetectLanguageResult'
  summary: 'Detect Language for a single document.


    Returns the detected language and a numeric score between zero and

    one. Scores close to one indicate 100% certainty that the identified

    language is true. See [https://aka.ms/talangs](https://aka.ms/talangs) for the
    list of enabled languages.'
  syntax:
    content: 'single_detect_language(endpoint: str, credential: str, input_text: str,
      country_hint: typing.Union[str, NoneType] = ''US'', **kwargs: typing.Any) ->
      azure.ai.textanalytics._models.DetectLanguageResult'
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and

        hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This can be the cognitive services subscription key or a token credential

        from azure.identity.'
      id: credential
      type:
      - str
      - azure.core.credentials.TokenCredential
    - description: The single string to detect language from.
      id: input_text
      type:
      - str
    - description: 'The country hint for the text. Accepts two

        letter country codes specified by ISO 3166-1 alpha-2.

        Defaults to "US". If you don''t want to use a country hint,

        pass the empty string "".'
      id: country_hint
      type:
      - str
    return:
      description: An instance of DetectLanguageResult.
      type:
      - azure.ai.textanalytics.DetectLanguageResult
  type: function
  uid: azure.ai.textanalytics.aio.single_detect_language
- example:
  - "Recognize entities in a single string.<!--[!code-python[Main](les\\async_samples\\\
    sample_single_recognize_entities_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\6\\\\azure-ai-textanalytics-1.0.0b1\\\\\
    samples\\\\async_samples\\\\sample_single_recognize_entities_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics.aio\
    \ import single_recognize_entities\n\n   text = \"Microsoft was founded by Bill\
    \ Gates and Paul Allen on April 4, 1975,\" \\\n          \" to develop and sell\
    \ BASIC interpreters for the Altair 8800.\"\n\n   result = await single_recognize_entities(\n\
    \       endpoint=self.endpoint,\n       credential=self.key,\n       input_text=text,\n\
    \       language=\"en\"\n   )\n\n   for entity in result.entities:\n       print(\"\
    Entity: {}\".format(entity.text))\n       print(\"Type: {}\".format(entity.type))\n\
    \       print(\"Confidence Score: {0:.3f}\\n\".format(entity.score))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.textanalytics.aio.single_recognize_entities
  langs:
  - python
  module: azure.ai.textanalytics.aio
  name: 'single_recognize_entities(endpoint: str, credential: str, input_text: str,
    language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.RecognizeEntitiesResult'
  summary: 'Named Entity Recognition for a single document.


    Returns a list of general named entities in a given document.

    For a list of supported entity types, check: [https://aka.ms/taner](https://aka.ms/taner)

    For a list of enabled languages, check: [https://aka.ms/talangs](https://aka.ms/talangs)'
  syntax:
    content: 'single_recognize_entities(endpoint: str, credential: str, input_text:
      str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
      azure.ai.textanalytics._models.RecognizeEntitiesResult'
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and

        hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This can be the cognitive services subscription key or a token credential

        from azure.identity.'
      id: credential
      type:
      - str
      - azure.core.credentials.TokenCredential
    - description: The single string to recognize entities from.
      id: input_text
      type:
      - str
    - description: 'This is the 2 letter ISO 639-1 representation

        of a language. For example, use "en" for English; "es" for Spanish etc. If

        not set, uses "en" for English as default.'
      id: language
      type:
      - str
    return:
      description: An instance of RecognizeEntitiesResult.
      type:
      - azure.ai.textanalytics.RecognizeEntitiesResult
  type: function
  uid: azure.ai.textanalytics.aio.single_recognize_entities
- example:
  - "Recognize personally identifiable information entities in a single string.<!--[!code-python[Main](les\\\
    async_samples\\sample_single_recognize_pii_entities_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\6\\\\azure-ai-textanalytics-1.0.0b1\\\
    \\samples\\\\async_samples\\\\sample_single_recognize_pii_entities_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics.aio\
    \ import single_recognize_pii_entities\n\n   text = \"The employee's ABA number\
    \ is 111000025 and his SSN is 555-55-5555.\"\n\n   result = await single_recognize_pii_entities(\n\
    \       endpoint=self.endpoint,\n       credential=self.key,\n       input_text=text,\n\
    \       language=\"en\"\n   )\n\n   for entity in result.entities:\n       print(\"\
    Entity: {}\".format(entity.text))\n       print(\"Type: {}\".format(entity.type))\n\
    \       print(\"Confidence Score: {}\\n\".format(entity.score))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.textanalytics.aio.single_recognize_pii_entities
  langs:
  - python
  module: azure.ai.textanalytics.aio
  name: 'single_recognize_pii_entities(endpoint: str, credential: str, input_text:
    str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
    azure.ai.textanalytics._models.RecognizePiiEntitiesResult'
  summary: 'Recognize entities containing personal information for a single document.


    Returns a list of personal information entities ("SSN",

    "Bank Account", etc) in the document.  For the list of supported entity types,

    check [https://aka.ms/tanerpii](https://aka.ms/tanerpii). See [https://aka.ms/talangs](https://aka.ms/talangs)

    for the list of enabled languages.'
  syntax:
    content: 'single_recognize_pii_entities(endpoint: str, credential: str, input_text:
      str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
      azure.ai.textanalytics._models.RecognizePiiEntitiesResult'
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and

        hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This can be the cognitive services subscription key or a token credential

        from azure.identity.'
      id: credential
      type:
      - str
      - azure.core.credentials.TokenCredential
    - description: The single string to recognize entities from.
      id: input_text
      type:
      - str
    - description: 'This is the 2 letter ISO 639-1 representation

        of a language. For example, use "en" for English; "es" for Spanish etc. If

        not set, uses "en" for English as default.'
      id: language
      type:
      - str
    return:
      description: An instance of RecognizePiiEntitiesResult.
      type:
      - azure.ai.textanalytics.RecognizePiiEntitiesResult
  type: function
  uid: azure.ai.textanalytics.aio.single_recognize_pii_entities
- example:
  - "Recognize linked entities in a single string.<!--[!code-python[Main](les\\async_samples\\\
    sample_single_recognize_linked_entities_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\6\\\\azure-ai-textanalytics-1.0.0b1\\\
    \\samples\\\\async_samples\\\\sample_single_recognize_linked_entities_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics.aio\
    \ import single_recognize_linked_entities\n\n   text = \"Easter Island, a Chilean\
    \ territory, is a remote volcanic island in Polynesia. \" \\\n          \"Its\
    \ native name is Rapa Nui.\"\n\n   result = await single_recognize_linked_entities(\n\
    \       endpoint=self.endpoint,\n       credential=self.key,\n       input_text=text,\n\
    \       language=\"en\"\n   )\n\n   for entity in result.entities:\n       print(\"\
    Entity: {}\".format(entity.name))\n       print(\"Url: {}\".format(entity.url))\n\
    \       print(\"Data Source: {}\\n\".format(entity.data_source))\n       print(\"\
    Where this entity appears in the text:\")\n       for idx, match in enumerate(entity.matches):\n\
    \           print(\"Match {}: {}\".format(idx+1, match.text))\n           print(\"\
    Score: {0:.3f}\".format(match.score))\n           print(\"Offset: {}\".format(match.offset))\n\
    \           print(\"Length: {}\\n\".format(match.length))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.textanalytics.aio.single_recognize_linked_entities
  langs:
  - python
  module: azure.ai.textanalytics.aio
  name: 'single_recognize_linked_entities(endpoint: str, credential: str, input_text:
    str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
    azure.ai.textanalytics._models.RecognizeLinkedEntitiesResult'
  summary: 'Recognize linked entities from a well-known knowledge base

    for a single document.


    Returns a list of recognized entities with links to a

    well-known knowledge base. See [https://aka.ms/talangs](https://aka.ms/talangs)
    for

    supported languages in Text Analytics API.'
  syntax:
    content: 'single_recognize_linked_entities(endpoint: str, credential: str, input_text:
      str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
      azure.ai.textanalytics._models.RecognizeLinkedEntitiesResult'
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and

        hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This can be the cognitive services subscription key or a token credential

        from azure.identity.'
      id: credential
      type:
      - str
      - azure.core.credentials.TokenCredential
    - description: The single string to recognize entities from.
      id: input_text
      type:
      - str
    - description: 'This is the 2 letter ISO 639-1 representation

        of a language. For example, use "en" for English; "es" for Spanish etc. If

        not set, uses "en" for English as default.'
      id: language
      type:
      - str
    return:
      description: An instance of RecognizeLinkedEntitiesResult
      type:
      - azure.ai.textanalytics.RecognizeLinkedEntitiesResult
  type: function
  uid: azure.ai.textanalytics.aio.single_recognize_linked_entities
- example:
  - "Extract key phrases in a single string.<!--[!code-python[Main](les\\async_samples\\\
    sample_single_extract_key_phrases_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\6\\\\azure-ai-textanalytics-1.0.0b1\\\\\
    samples\\\\async_samples\\\\sample_single_extract_key_phrases_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics.aio\
    \ import single_extract_key_phrases\n\n   text = \"Redmond is a city in King County,\
    \ Washington, United States, located 15 miles east of Seattle.\"\n\n   result\
    \ = await single_extract_key_phrases(\n       endpoint=self.endpoint,\n      \
    \ credential=self.key,\n       input_text=text,\n       language=\"en\"\n   )\n\
    \n   print(\"Key phrases found:\\n\")\n   for phrase in result.key_phrases:\n\
    \       print(phrase)\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.textanalytics.aio.single_extract_key_phrases
  langs:
  - python
  module: azure.ai.textanalytics.aio
  name: 'single_extract_key_phrases(endpoint: str, credential: str, input_text: str,
    language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.ExtractKeyPhrasesResult'
  summary: 'Extract Key Phrases for a single document.


    Returns a list of strings denoting the key phrases in the input

    text. See [https://aka.ms/talangs](https://aka.ms/talangs) for the list of enabled

    languages.'
  syntax:
    content: 'single_extract_key_phrases(endpoint: str, credential: str, input_text:
      str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
      azure.ai.textanalytics._models.ExtractKeyPhrasesResult'
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and

        hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This can be the cognitive services subscription key or a token credential

        from azure.identity.'
      id: credential
      type:
      - str
      - azure.core.credentials.TokenCredential
    - description: The single string to extract key phrases from.
      id: input_text
      type:
      - str
    - description: 'This is the 2 letter ISO 639-1 representation

        of a language. For example, use "en" for English; "es" for Spanish etc. If

        not set, uses "en" for English as default.'
      id: language
      type:
      - str
    return:
      description: An instance of ExtractKeyPhrasesResult
      type:
      - azure.ai.textanalytics.ExtractKeyPhrasesResult
  type: function
  uid: azure.ai.textanalytics.aio.single_extract_key_phrases
- example:
  - "Analyze sentiment in a single string.<!--[!code-python[Main](les\\async_samples\\\
    sample_single_analyze_sentiment_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\6\\\\azure-ai-textanalytics-1.0.0b1\\\\\
    samples\\\\async_samples\\\\sample_single_analyze_sentiment_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics.aio\
    \ import single_analyze_sentiment\n\n   text = \"I visited the restaurant last\
    \ week. The portions were very generous. However, I did not like what \" \\\n\
    \          \"I ordered.\"\n\n   result = await single_analyze_sentiment(\n   \
    \    endpoint=self.endpoint,\n       credential=self.key,\n       input_text=text,\n\
    \       language=\"en\"\n   )\n\n   print(\"Overall sentiment: {}\".format(result.sentiment))\n\
    \   print(\"Overall scores: positive={0:.3f}; neutral={1:.3f}; negative={2:.3f}\
    \ \\n\".format(\n       result.document_scores.positive,\n       result.document_scores.neutral,\n\
    \       result.document_scores.negative,\n   ))\n\n   for idx, sentence in enumerate(result.sentences):\n\
    \       print(\"Sentence {} sentiment: {}\".format(idx+1, sentence.sentiment))\n\
    \       print(\"Offset: {}\".format(sentence.offset))\n       print(\"Length:\
    \ {}\".format(sentence.length))\n       print(\"Sentence score: positive={0:.3f};\
    \ neutral={1:.3f}; negative={2:.3f} \\n\".format(\n           sentence.sentence_scores.positive,\n\
    \           sentence.sentence_scores.neutral,\n           sentence.sentence_scores.negative,\n\
    \       ))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.textanalytics.aio.single_analyze_sentiment
  langs:
  - python
  module: azure.ai.textanalytics.aio
  name: 'single_analyze_sentiment(endpoint: str, credential: str, input_text: str,
    language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.AnalyzeSentimentResult'
  summary: 'Analyze sentiment in a single document.


    Returns a sentiment prediction, as well as sentiment scores for

    each sentiment class (Positive, Negative, and Neutral) for the document

    and each sentence within it. See [https://aka.ms/talangs](https://aka.ms/talangs)
    for the list

    of enabled languages.'
  syntax:
    content: 'single_analyze_sentiment(endpoint: str, credential: str, input_text:
      str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
      azure.ai.textanalytics._models.AnalyzeSentimentResult'
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and

        hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This can be the cognitive services subscription key or a token credential

        from azure.identity.'
      id: credential
      type:
      - str
      - azure.core.credentials.TokenCredential
    - description: The single string to analyze sentiment from.
      id: input_text
      type:
      - str
    - description: 'This is the 2 letter ISO 639-1 representation

        of a language. For example, use "en" for English; "es" for Spanish etc. If

        not set, uses "en" for English as default.'
      id: language
      type:
      - str
    return:
      description: An instance of AnalyzeSentimentResult
      type:
      - azure.ai.textanalytics.AnalyzeSentimentResult
  type: function
  uid: azure.ai.textanalytics.aio.single_analyze_sentiment
references:
- fullName: azure.ai.textanalytics.aio.TextAnalyticsClient
  isExternal: false
  name: TextAnalyticsClient
  parent: azure.ai.textanalytics.aio
  uid: azure.ai.textanalytics.aio.TextAnalyticsClient
- fullName: azure.ai.textanalytics.aio.single_detect_language
  isExternal: false
  name: 'single_detect_language(endpoint: str, credential: str, input_text: str, country_hint:
    typing.Union[str, NoneType] = ''US'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.DetectLanguageResult'
  parent: azure.ai.textanalytics.aio
  uid: azure.ai.textanalytics.aio.single_detect_language
- fullName: azure.ai.textanalytics.aio.single_recognize_entities
  isExternal: false
  name: 'single_recognize_entities(endpoint: str, credential: str, input_text: str,
    language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.RecognizeEntitiesResult'
  parent: azure.ai.textanalytics.aio
  uid: azure.ai.textanalytics.aio.single_recognize_entities
- fullName: azure.ai.textanalytics.aio.single_recognize_pii_entities
  isExternal: false
  name: 'single_recognize_pii_entities(endpoint: str, credential: str, input_text:
    str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
    azure.ai.textanalytics._models.RecognizePiiEntitiesResult'
  parent: azure.ai.textanalytics.aio
  uid: azure.ai.textanalytics.aio.single_recognize_pii_entities
- fullName: azure.ai.textanalytics.aio.single_recognize_linked_entities
  isExternal: false
  name: 'single_recognize_linked_entities(endpoint: str, credential: str, input_text:
    str, language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) ->
    azure.ai.textanalytics._models.RecognizeLinkedEntitiesResult'
  parent: azure.ai.textanalytics.aio
  uid: azure.ai.textanalytics.aio.single_recognize_linked_entities
- fullName: azure.ai.textanalytics.aio.single_extract_key_phrases
  isExternal: false
  name: 'single_extract_key_phrases(endpoint: str, credential: str, input_text: str,
    language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.ExtractKeyPhrasesResult'
  parent: azure.ai.textanalytics.aio
  uid: azure.ai.textanalytics.aio.single_extract_key_phrases
- fullName: azure.ai.textanalytics.aio.single_analyze_sentiment
  isExternal: false
  name: 'single_analyze_sentiment(endpoint: str, credential: str, input_text: str,
    language: typing.Union[str, NoneType] = ''en'', **kwargs: typing.Any) -> azure.ai.textanalytics._models.AnalyzeSentimentResult'
  parent: azure.ai.textanalytics.aio
  uid: azure.ai.textanalytics.aio.single_analyze_sentiment
