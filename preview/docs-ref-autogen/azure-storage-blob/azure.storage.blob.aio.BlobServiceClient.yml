### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.aio.BlobServiceClient.create_container
  - azure.storage.blob.aio.BlobServiceClient.delete_container
  - azure.storage.blob.aio.BlobServiceClient.get_account_information
  - azure.storage.blob.aio.BlobServiceClient.get_blob_client
  - azure.storage.blob.aio.BlobServiceClient.get_container_client
  - azure.storage.blob.aio.BlobServiceClient.get_service_properties
  - azure.storage.blob.aio.BlobServiceClient.get_service_stats
  - azure.storage.blob.aio.BlobServiceClient.list_containers
  - azure.storage.blob.aio.BlobServiceClient.set_service_properties
  class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.blob._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.blob._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.blob.blob_service_client.BlobServiceClient
  langs:
  - python
  module: azure.storage.blob.aio
  name: BlobServiceClient
  summary: 'A client to interact with the Blob Service at the account level.


    This client provides operations to retrieve and configure the account properties

    as well as list, create and delete containers within the account.

    For operations relating to a specific container or blob, clients for those entities

    can also be retrieved using the *get_client* functions.'
  syntax:
    content: BlobServiceClient(account_url, credential=None, loop=None, **kwargs)
    parameters:
    - description: 'The URL to the blob storage account. Any other entities included

        in the URL path (e.g. container or blob) will be discarded. This URL can be
        optionally

        authenticated with a SAS token.'
      id: account_url
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        and account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
    variables:
    - description: 'The full endpoint URL to the Blob service endpoint. This could
        be either the

        primary endpoint, or the secondard endpoint depending on the current *location_mode*.'
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
    - description: 'The full secondard endpoint URL if configured. If not available

        a ValueError will be raised. To explicitly specify a secondary hostname, use
        the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_endpoint
      type:
      - str
    - description: 'The hostname of the secondary endpoint. If not available this

        will be None. To explicitly specify a secondary hostname, use the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_hostname
      type:
      - str
    - description: 'The location mode that the client is currently using. By default

        this will be "primary". Options include "primary" and "secondary".'
      id: location_mode
      type:
      - str
  type: class
  uid: azure.storage.blob.aio.BlobServiceClient
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.create_container
  langs:
  - python
  module: azure.storage.blob.aio
  name: create_container(name, metadata=None, public_access=None, timeout=None, **kwargs)
  summary: 'Creates a new container under the specified account.


    If the container with the same name already exists, a ResourceExistsError will

    be raised. This method returns a client with which to interact with the newly

    created container.'
  syntax:
    content: create_container(name, metadata=None, public_access=None, timeout=None,
      **kwargs)
    parameters:
    - description: The name of the container to create.
      id: name
      type:
      - str
    - defaultValue: None
      description: 'A dict with name-value pairs to associate with the

        container as metadata. Example: *{''Category'':''test''}*'
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: 'Possible values include: container, blob.'
      id: public_access
      type:
      - str
      - azure.storage.blob.models.PublicAccess
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - azure.storage.blob.container_client.ContainerClient
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.create_container
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.delete_container
  langs:
  - python
  module: azure.storage.blob.aio
  name: delete_container(container, lease=None, timeout=None, **kwargs)
  summary: 'Marks the specified container for deletion.


    The container and any blobs contained within it are later deleted during garbage
    collection.

    If the container is not found, a ResourceNotFoundError will be raised.'
  syntax:
    content: delete_container(container, lease=None, timeout=None, **kwargs)
    parameters:
    - description: 'The container to delete. This can either be the name of the container,

        or an instance of ContainerProperties.'
      id: container
      type:
      - str
      - azure.storage.blob.models.ContainerProperties
    - defaultValue: None
      description: 'If specified, delete_container only succeeds if the

        container''s lease is active and matches this ID.

        Required if the container has an active lease.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime
    - description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.delete_container
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.get_account_information
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_account_information(**kwargs)
  summary: 'Gets information related to the storage account.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  syntax:
    content: get_account_information(**kwargs)
    parameters: []
    return:
      description: A dict of account information (SKU and account type).
      type:
      - dict(str, str)
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_account_information
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.get_blob_client
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_blob_client(container, blob, snapshot=None)
  summary: 'Get a client to interact with the specified blob.


    The blob need not already exist.'
  syntax:
    content: get_blob_client(container, blob, snapshot=None)
    parameters:
    - description: 'The container that the blob is in. This can either be the name
        of the container,

        or an instance of ContainerProperties.'
      id: container
      type:
      - str
      - azure.storage.blob.models.ContainerProperties
    - description: 'The blob with which to interact. This can either be the name of
        the blob,

        or an instance of BlobProperties.'
      id: blob
      type:
      - str
      - azure.storage.blob.models.BlobProperties
    - defaultValue: None
      description: 'The optional blob snapshot on which to operate. This can either
        be the ID of the snapshot,

        or a dictionary output returned by <xref:azure.storage.blob.blob_client.BlobClient.create_snapshot>.'
      id: snapshot
      type:
      - str
      - dict(str, Any)
    return:
      description: A BlobClient.
      type:
      - azure.storage.blob.blob_client.BlobClient
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_blob_client
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.get_container_client
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_container_client(container)
  summary: 'Get a client to interact with the specified container.


    The container need not already exist.'
  syntax:
    content: get_container_client(container)
    parameters:
    - description: 'The container. This can either be the name of the container,

        or an instance of ContainerProperties.'
      id: container
      type:
      - str
      - azure.storage.blob.models.ContainerProperties
    return:
      description: A ContainerClient.
      type:
      - azure.core.blob.container_client.ContainerClient
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_container_client
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.get_service_properties
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_service_properties(timeout=None, **kwargs)
  summary: 'Gets the properties of a storage account''s Blob service, including

    Azure Storage Analytics.'
  syntax:
    content: get_service_properties(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - azure.storage.blob._generated.models.StorageServiceProperties
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_properties
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.get_service_stats
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_service_stats(timeout=None, **kwargs)
  summary: 'Retrieves statistics related to replication for the Blob service.


    It is only available when read-access geo-redundant replication is enabled for

    the storage account.


    With geo-redundant replication, Azure Storage maintains your data durable

    in two locations. In both locations, Azure Storage constantly maintains

    multiple healthy replicas of your data. The location where you read,

    create, update, or delete data is the primary storage account location.

    The primary location exists in the region you choose at the time you

    create an account via the Azure Management Azure classic portal, for

    example, North Central US. The location to which your data is replicated

    is the secondary location. The secondary location is automatically

    determined based on the location of the primary; it is in a second data

    center that resides in the same region as the primary location. Read-only

    access is available from the secondary location, if read-access geo-redundant

    replication is enabled for your storage account.'
  syntax:
    content: get_service_stats(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: The blob service stats.
      type:
      - azure.storage.blob._generated.models.StorageServiceStats
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_stats
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.list_containers
  langs:
  - python
  module: azure.storage.blob.aio
  name: list_containers(name_starts_with=None, include_metadata=False, results_per_page=None,
    timeout=None, **kwargs)
  summary: 'Returns a generator to list the containers under the specified account.


    The generator will lazily follow the continuation tokens returned by

    the service and stop when all containers have been returned.'
  syntax:
    content: list_containers(name_starts_with=None, include_metadata=False, results_per_page=None,
      timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'Filters the results to return only containers whose names

        begin with the specified prefix.'
      id: name_starts_with
      type:
      - str
    - defaultValue: 'False'
      description: 'Specifies that container metadata be returned in the response.

        The default value is *False*.'
      id: include_metadata
      type:
      - bool
    - defaultValue: None
      description: 'The maximum number of container names to retrieve per API

        call. If the request does not specify the server will return up to 5,000 items.'
      id: results_per_page
      type:
      - int
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An iterable (auto-paging) of ContainerProperties.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.blob.models.ContainerProperties]
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.list_containers
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.set_service_properties
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_service_properties(logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, target_version=None, delete_retention_policy=None, static_website=None,
    timeout=None, **kwargs)
  summary: 'Sets the properties of a storage account''s Blob service, including

    Azure Storage Analytics.


    If an element (e.g. Logging) is left as None, the

    existing settings on the service for that functionality are preserved.'
  syntax:
    content: set_service_properties(logging=None, hour_metrics=None, minute_metrics=None,
      cors=None, target_version=None, delete_retention_policy=None, static_website=None,
      timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: Groups the Azure Analytics Logging settings.
      id: logging
      type:
      - <xref:azure.storage.blob.models.Logging>
    - defaultValue: None
      description: 'The hour metrics settings provide a summary of request

        statistics grouped by API in hourly aggregates for blobs.'
      id: hour_metrics
      type:
      - <xref:azure.storage.blob.models.Metrics>
    - defaultValue: None
      description: 'The minute metrics settings provide request statistics

        for each minute for blobs.'
      id: minute_metrics
      type:
      - <xref:azure.storage.blob.models.Metrics>
    - defaultValue: None
      description: 'You can include up to five CorsRule elements in the

        list. If an empty list is specified, all CORS rules will be deleted,

        and CORS will be disabled for the service.'
      id: cors
      type:
      - list(<xref:azure.storage.blob.models.CorsRule>)
    - defaultValue: None
      description: 'Indicates the default version to use for requests if an incoming

        request''s version is not specified.'
      id: target_version
      type:
      - str
    - defaultValue: None
      description: 'The delete retention policy specifies whether to retain deleted
        blobs.

        It also specifies the number of days and versions of blob to keep.'
      id: delete_retention_policy
      type:
      - <xref:azure.storage.blob.models.RetentionPolicy>
    - defaultValue: None
      description: 'Specifies whether the static website feature is enabled,

        and if yes, indicates the index document and 404 error document to use.'
      id: static_website
      type:
      - <xref:azure.storage.blob.models.StaticWebsite>
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.set_service_properties
references:
- fullName: azure.storage.blob.aio.BlobServiceClient.create_container
  isExternal: false
  name: create_container(name, metadata=None, public_access=None, timeout=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.create_container
- fullName: azure.storage.blob.aio.BlobServiceClient.delete_container
  isExternal: false
  name: delete_container(container, lease=None, timeout=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.delete_container
- fullName: azure.storage.blob.aio.BlobServiceClient.get_account_information
  isExternal: false
  name: get_account_information(**kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_account_information
- fullName: azure.storage.blob.aio.BlobServiceClient.get_blob_client
  isExternal: false
  name: get_blob_client(container, blob, snapshot=None)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_blob_client
- fullName: azure.storage.blob.aio.BlobServiceClient.get_container_client
  isExternal: false
  name: get_container_client(container)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_container_client
- fullName: azure.storage.blob.aio.BlobServiceClient.get_service_properties
  isExternal: false
  name: get_service_properties(timeout=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_properties
- fullName: azure.storage.blob.aio.BlobServiceClient.get_service_stats
  isExternal: false
  name: get_service_stats(timeout=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_stats
- fullName: azure.storage.blob.aio.BlobServiceClient.list_containers
  isExternal: false
  name: list_containers(name_starts_with=None, include_metadata=False, results_per_page=None,
    timeout=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.list_containers
- fullName: azure.storage.blob.aio.BlobServiceClient.set_service_properties
  isExternal: false
  name: set_service_properties(logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, target_version=None, delete_retention_policy=None, static_website=None,
    timeout=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.set_service_properties
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
- fullName: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.models.ContainerProperties]
  name: AsyncItemPaged[ContainerProperties]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.blob.models.ContainerProperties
    name: ContainerProperties
    uid: azure.storage.blob.models.ContainerProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.models.ContainerProperties]
- fullName: list(<xref:azure.storage.blob.models.CorsRule>)
  name: list(CorsRule>)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: <xref:azure.storage.blob.models.CorsRule>
    name: CorsRule>
    uid: <xref:azure.storage.blob.models.CorsRule>
  - fullName: )
    name: )
  uid: list(<xref:azure.storage.blob.models.CorsRule>)
