### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.aio.ContainerClient.acquire_lease
  - azure.storage.blob.aio.ContainerClient.create_container
  - azure.storage.blob.aio.ContainerClient.delete_blob
  - azure.storage.blob.aio.ContainerClient.delete_blobs
  - azure.storage.blob.aio.ContainerClient.delete_container
  - azure.storage.blob.aio.ContainerClient.get_account_information
  - azure.storage.blob.aio.ContainerClient.get_blob_client
  - azure.storage.blob.aio.ContainerClient.get_container_access_policy
  - azure.storage.blob.aio.ContainerClient.get_container_properties
  - azure.storage.blob.aio.ContainerClient.list_blobs
  - azure.storage.blob.aio.ContainerClient.set_container_access_policy
  - azure.storage.blob.aio.ContainerClient.set_container_metadata
  - azure.storage.blob.aio.ContainerClient.set_premium_page_blob_tier_blobs
  - azure.storage.blob.aio.ContainerClient.set_standard_blob_tier_blobs
  - azure.storage.blob.aio.ContainerClient.upload_blob
  - azure.storage.blob.aio.ContainerClient.walk_blobs
  class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.blob._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.blob._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.blob.container_client.ContainerClient
  langs:
  - python
  module: azure.storage.blob.aio
  name: ContainerClient
  summary: 'A client to interact with a specific container, although that container

    may not yet exist.


    For operations relating to a specific blob within this container, a blob client
    can be

    retrieved using the <xref:azure.storage.blob.aio.ContainerClient.get_blob_client>
    function.'
  syntax:
    content: ContainerClient(account_url, container_name=None, credential=None, **kwargs)
    parameters:
    - description: 'The full URI to the container. This can also be a URL to the storage

        account, in which case the blob container must also be specified.'
      id: container_url
      type:
      - str
    - description: The name of the container for the blob.
      id: container_name
      type:
      - str
      - azure.storage.blob.ContainerProperties
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        and account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
    variables:
    - description: 'The full endpoint URL to the Container, including SAS token if
        used. This could be

        either the primary endpoint, or the secondary endpoint depending on the current
        *location_mode*.'
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
    - description: 'The full secondary endpoint URL if configured. If not available

        a ValueError will be raised. To explicitly specify a secondary hostname, use
        the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_endpoint
      type:
      - str
    - description: 'The hostname of the secondary endpoint. If not available this

        will be None. To explicitly specify a secondary hostname, use the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_hostname
      type:
      - str
    - description: 'The location mode that the client is currently using. By default

        this will be "primary". Options include "primary" and "secondary".'
      id: location_mode
      type:
      - str
  type: class
  uid: azure.storage.blob.aio.ContainerClient
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.acquire_lease
  langs:
  - python
  module: azure.storage.blob.aio
  name: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  summary: 'Requests a new lease. If the container does not have an active lease,

    the Blob service creates a lease on the container and returns a new

    lease ID.'
  syntax:
    content: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
    parameters:
    - description: 'Specifies the duration of the lease, in seconds, or negative one

        (-1) for a lease that never expires. A non-infinite lease can be

        between 15 and 60 seconds. A lease duration cannot be changed

        using renew or change. Default is -1 (infinite lease).'
      id: lease_duration
      type:
      - int
    - description: 'Proposed lease ID, in a GUID string format. The Blob service returns

        400 (Invalid request) if the proposed lease ID is not in the correct format.'
      id: lease_id
      type:
      - str
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: A LeaseClient object, that can be run in a context manager.
      type:
      - azure.storage.blob.aio.LeaseClient
  type: method
  uid: azure.storage.blob.aio.ContainerClient.acquire_lease
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.create_container
  langs:
  - python
  module: azure.storage.blob.aio
  name: create_container(metadata=None, public_access=None, **kwargs)
  summary: 'Creates a new container under the specified account. If the container

    with the same name already exists, the operation fails.'
  syntax:
    content: create_container(metadata=None, public_access=None, **kwargs)
    parameters:
    - description: 'A dict with name_value pairs to associate with the

        container as metadata. Example:{''Category'':''test''}'
      id: metadata
      type:
      - dict[str, str]
    - description: 'Possible values include: container, blob.'
      id: public_access
      type:
      - azure.storage.blob.PublicAccess
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.ContainerClient.create_container
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.delete_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: delete_blob(blob, delete_snapshots=None, **kwargs)
  summary: 'Marks the specified blob or snapshot for deletion.


    The blob is later deleted during garbage collection.

    Note that in order to delete a blob, you must delete all of its

    snapshots. You can delete both at the same time with the Delete

    Blob operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blob or snapshot

    and retains the blob or snapshot for specified number of days.

    After specified number of days, blob''s data is removed from the service during
    garbage collection.

    Soft deleted blob or snapshot is accessible through List Blobs API specifying
    *include="deleted"* option.

    Soft-deleted blob or snapshot can be restored using Undelete API.'
  syntax:
    content: delete_blob(blob, delete_snapshots=None, **kwargs)
    parameters:
    - description: 'The blob with which to interact. If specified, this value will
        override

        a blob value specified in the blob URL.'
      id: blob
      type:
      - str
      - azure.storage.blob.BlobProperties
    - description: "Required if the blob has associated snapshots. Values include:\n\
        \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
        \ the blob along with all snapshots."
      id: delete_snapshots
      type:
      - str
    - description: 'Required if the blob has an active lease. Value can be a Lease
        object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.aio.LeaseClient
      - str
    - description: "Required if the blob has associated snapshots. Values include:\n\
        \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
        \ the blob along with all snapshots."
      id: delete_snapshots
      type:
      - str
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.ContainerClient.delete_blob
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.delete_blobs
  langs:
  - python
  module: azure.storage.blob.aio
  name: 'delete_blobs(*blobs: typing.Union[str, azure.storage.blob.models.BlobProperties],
    delete_snapshots: typing.Union[str, NoneType] = None, lease: typing.Union[str,
    azure.storage.blob.aio.lease_async.LeaseClient, NoneType] = None, **kwargs) ->
    typing.AsyncIterator[azure.core.pipeline.transport.base_async.AsyncHttpResponse]'
  summary: 'Marks the specified blobs or snapshots for deletion.


    The blob is later deleted during garbage collection.

    Note that in order to delete a blob, you must delete all of its

    snapshots. You can delete both at the same time with the Delete

    Blob operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blob or snapshot

    and retains the blob or snapshot for specified number of days.

    After specified number of days, blob''s data is removed from the service during
    garbage collection.

    Soft deleted blob or snapshot is accessible through List Blobs API specifying
    *include="deleted"* option.

    Soft-deleted blob or snapshot can be restored using Undelete API.'
  syntax:
    content: 'delete_blobs(*blobs: typing.Union[str, azure.storage.blob.models.BlobProperties],
      delete_snapshots: typing.Union[str, NoneType] = None, lease: typing.Union[str,
      azure.storage.blob.aio.lease_async.LeaseClient, NoneType] = None, **kwargs)
      -> typing.AsyncIterator[azure.core.pipeline.transport.base_async.AsyncHttpResponse]'
    parameters:
    - description: 'The blob with which to interact. If specified, this value will
        override

        a blob value specified in the blob URL.'
      id: blob
      type:
      - str
      - azure.storage.blob.BlobProperties
    - description: "Required if the blob has associated snapshots. Values include:\n\
        \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
        \ the blob along with all snapshots."
      id: delete_snapshots
      type:
      - str
    - description: 'Required if the blob has an active lease. Value can be a Lease
        object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
      - str
    - description: "Required if the blob has associated snapshots. Values include:\n\
        \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
        \ the blob along with all snapshots."
      id: delete_snapshots
      type:
      - str
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An async iterator of responses, one for each blob in order
      type:
      - asynciterator[azure.core.pipeline.transport.AsyncHttpResponse]
  type: method
  uid: azure.storage.blob.aio.ContainerClient.delete_blobs
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.delete_container
  langs:
  - python
  module: azure.storage.blob.aio
  name: delete_container(**kwargs)
  summary: 'Marks the specified container for deletion. The container and any blobs

    contained within it are later deleted during garbage collection.'
  syntax:
    content: delete_container(**kwargs)
    parameters:
    - description: 'If specified, delete_container only succeeds if the

        container''s lease is active and matches this ID.

        Required if the container has an active lease.'
      id: lease
      type:
      - azure.storage.blob.aio.LeaseClient
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.ContainerClient.delete_container
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.get_account_information
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_account_information(**kwargs)
  summary: 'Gets information related to the storage account.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  syntax:
    content: get_account_information(**kwargs)
    return:
      description: A dict of account information (SKU and account type).
      type:
      - dict(str, str)
  type: method
  uid: azure.storage.blob.aio.ContainerClient.get_account_information
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.get_blob_client
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_blob_client(blob, snapshot=None)
  summary: 'Get a client to interact with the specified blob.


    The blob need not already exist.'
  syntax:
    content: get_blob_client(blob, snapshot=None)
    parameters:
    - description: The blob with which to interact.
      id: blob
      type:
      - str
      - azure.storage.blob.BlobProperties
    - defaultValue: None
      description: The optional blob snapshot on which to operate.
      id: snapshot
      type:
      - str
    return:
      description: A BlobClient.
      type:
      - azure.storage.blob.aio.BlobClient
  type: method
  uid: azure.storage.blob.aio.ContainerClient.get_blob_client
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.get_container_access_policy
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_container_access_policy(**kwargs)
  summary: 'Gets the permissions for the specified container.

    The permissions indicate whether container data may be accessed publicly.'
  syntax:
    content: get_container_access_policy(**kwargs)
    parameters:
    - description: 'If specified, get_container_access_policy only succeeds if the

        container''s lease is active and matches this ID.'
      id: lease
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Access policy information in a dict.
      type:
      - dict[str, str]
  type: method
  uid: azure.storage.blob.aio.ContainerClient.get_container_access_policy
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.get_container_properties
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_container_properties(**kwargs)
  summary: 'Returns all user-defined metadata and system properties for the specified

    container. The data returned does not include the container''s list of blobs.'
  syntax:
    content: get_container_properties(**kwargs)
    parameters:
    - description: 'If specified, get_container_properties only succeeds if the

        container''s lease is active and matches this ID.'
      id: lease
      type:
      - azure.storage.blob.aio.LeaseClient
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Properties for the specified container within a container object.
      type:
      - azure.storage.blob.ContainerProperties
  type: method
  uid: azure.storage.blob.aio.ContainerClient.get_container_properties
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.list_blobs
  langs:
  - python
  module: azure.storage.blob.aio
  name: list_blobs(name_starts_with=None, include=None, **kwargs)
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service.'
  syntax:
    content: list_blobs(name_starts_with=None, include=None, **kwargs)
    parameters:
    - description: 'Filters the results to return only blobs whose names

        begin with the specified prefix.'
      id: name_starts_with
      type:
      - str
    - description: 'Specifies one or more additional datasets to include in the response.

        Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
        ''deleted''.'
      id: include
      type:
      - list[str]
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An iterable (auto-paging) response of BlobProperties.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.blob.BlobProperties]
  type: method
  uid: azure.storage.blob.aio.ContainerClient.list_blobs
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.set_container_access_policy
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_container_access_policy(signed_identifiers=None, public_access=None, **kwargs)
  summary: 'Sets the permissions for the specified container or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether blobs in a container may be accessed publicly.'
  syntax:
    content: set_container_access_policy(signed_identifiers=None, public_access=None,
      **kwargs)
    parameters:
    - description: 'A dictionary of access policies to associate with the container.
        The

        dictionary may contain up to 5 elements. An empty dictionary

        will clear the access policies set on the service.'
      id: signed_identifiers
      type:
      - dict[str, azure.storage.blob.AccessPolicy]
    - description: 'Possible values include: container, blob.'
      id: public_access
      type:
      - azure.storage.blob.PublicAccess
    - description: 'Required if the container has an active lease. Value can be a
        LeaseClient object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.aio.LeaseClient
      - str
    - description: 'A datetime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified date/time.'
      id: if_modified_since
      type:
      - datetime.datetime
    - description: 'A datetime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime.datetime
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Container-updated property dict (Etag and last modified).
  type: method
  uid: azure.storage.blob.aio.ContainerClient.set_container_access_policy
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.set_container_metadata
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_container_metadata(metadata=None, **kwargs)
  summary: 'Sets one or more user-defined name-value pairs for the specified

    container. Each call to this operation replaces all existing metadata

    attached to the container. To remove all metadata from the container,

    call this operation with no metadata dict.'
  syntax:
    content: set_container_metadata(metadata=None, **kwargs)
    parameters:
    - description: 'A dict containing name-value pairs to associate with the container
        as

        metadata. Example: {''category'':''test''}'
      id: metadata
      type:
      - dict[str, str]
    - description: 'If specified, set_container_metadata only succeeds if the

        container''s lease is active and matches this ID.'
      id: lease
      type:
      - str
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime.datetime
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Container-updated property dict (Etag and last modified).
  type: method
  uid: azure.storage.blob.aio.ContainerClient.set_container_metadata
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.set_premium_page_blob_tier_blobs
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_premium_page_blob_tier_blobs
  summary: Sets the page blob tiers on the blobs. This API is only supported for page
    blobs on premium accounts.
  syntax:
    parameters:
    - description: The blobs with which to interact.
      id: blobs
      type:
      - str
      - azure.storage.blob.BlobProperties
    - description: 'A page blob tier value to set the blob to. The tier correlates
        to the size of the

        blob and number of allowed IOPS. This is only applicable to page blobs on

        premium storage accounts.'
      id: premium_page_blob_tier
      type:
      - azure.storage.blob.PremiumPageBlobTier
    - description: 'The timeout parameter is expressed in seconds. This method may
        make

        multiple calls to the Azure service and the timeout will apply to

        each call individually.'
      id: timeout
      type:
      - int
    - description: 'Required if the blob has an active lease. Value can be a LeaseClient
        object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
      - str
    return:
      description: An async iterator of responses, one for each blob in order
      type:
      - asynciterator[azure.core.pipeline.transport.AsyncHttpResponse]
  type: method
  uid: azure.storage.blob.aio.ContainerClient.set_premium_page_blob_tier_blobs
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.set_standard_blob_tier_blobs
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_standard_blob_tier_blobs
  summary: 'This operation sets the tier on block blobs.


    A block blob''s tier determines Hot/Cool/Archive storage type.

    This operation does not update the blob''s ETag.'
  syntax:
    parameters:
    - description: The blobs with which to interact.
      id: blobs
      type:
      - str
      - azure.storage.blob.BlobProperties
    - description: 'Indicates the tier to be set on the blob. Options include ''Hot'',
        ''Cool'',

        ''Archive''. The hot tier is optimized for storing data that is accessed

        frequently. The cool storage tier is optimized for storing data that

        is infrequently accessed and stored for at least a month. The archive

        tier is optimized for storing data that is rarely accessed and stored

        for at least six months with flexible latency requirements.'
      id: standard_blob_tier
      type:
      - str
      - azure.storage.blob.StandardBlobTier
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    - description: 'Required if the blob has an active lease. Value can be a LeaseClient
        object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
      - str
    return:
      description: An async iterator of responses, one for each blob in order
      type:
      - asynciterator[azure.core.pipeline.transport.AsyncHttpResponse]
  type: method
  uid: azure.storage.blob.aio.ContainerClient.set_standard_blob_tier_blobs
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.upload_blob
  langs:
  - python
  module: azure.storage.blob.aio
  name: 'upload_blob(name, data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>, length=None,
    metadata=None, encoding=''UTF-8'', **kwargs)'
  summary: Creates a new blob from a data source with automatic chunking.
  syntax:
    content: 'upload_blob(name, data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>,
      length=None, metadata=None, encoding=''UTF-8'', **kwargs)'
    parameters:
    - description: 'The blob with which to interact. If specified, this value will
        override

        a blob value specified in the blob URL.'
      id: name
      type:
      - str
      - azure.storage.blob.BlobProperties
    - description: 'The type of the blob. This can be

        either BlockBlob, PageBlob or AppendBlob. The default value is BlockBlob.'
      id: blob_type
      type:
      - azure.storage.blob.BlobType
    - description: 'Whether the blob to be uploaded should overwrite the current data.

        If True, upload_blob will silently overwrite the existing data. If set to
        False, the

        operation will fail with ResourceExistsError. The exception to the above is
        with Append

        blob types. In this case, if data already exists, an error will not be raised
        and

        the data will be appended to the existing blob. If you set overwrite=True,
        then the existing

        blob will be deleted, and a new one created.'
      id: overwrite
      type:
      - bool
    - description: 'Number of bytes to read from the stream. This is optional, but

        should be supplied for optimal performance.'
      id: length
      type:
      - int
    - description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    - description: ContentSettings object used to set blob properties.
      id: content_settings
      type:
      - azure.storage.blob.ContentSettings
    - description: 'If true, calculates an MD5 hash for each chunk of the blob. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        blob. Also note that if enabled, the memory-efficient upload algorithm

        will not be used, because computing the MD5 hash requires buffering

        entire blocks, and doing so defeats the purpose of the memory-efficient algorithm.'
      id: validate_content
      type:
      - bool
    - description: 'Required if the container has an active lease. Value can be a
        LeaseClient object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.aio.LeaseClient
      - str
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - description: 'The timeout parameter is expressed in seconds. This method may
        make

        multiple calls to the Azure service and the timeout will apply to

        each call individually.'
      id: timeout
      type:
      - int
    - description: 'A page blob tier value to set the blob to. The tier correlates
        to the size of the

        blob and number of allowed IOPS. This is only applicable to page blobs on

        premium storage accounts.'
      id: premium_page_blob_tier
      type:
      - azure.storage.blob.PremiumPageBlobTier
    - description: 'A standard blob tier value to set the blob to. For this version
        of the library,

        this is only applicable to block blobs on standard storage accounts.'
      id: standard_blob_tier
      type:
      - azure.storage.blob.StandardBlobTier
    - description: 'Optional conditional header. The max length in bytes permitted
        for

        the append blob. If the Append Block operation would cause the blob

        to exceed that limit or if the blob size is already greater than the

        value specified in this header, the request will fail with

        MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).'
      id: maxsize_condition
      type:
      - int
    - description: 'Maximum number of parallel connections to use when the blob size
        exceeds

        64MB.'
      id: max_concurrency
      type:
      - int
    - description: 'Encrypts the data on the service-side with the given key.

        Use of customer-provided keys must be done over HTTPS.

        As the encryption key itself is provided in the request,

        a secure connection must be established to transfer the key.'
      id: cpk
      type:
      - azure.storage.blob.CustomerProvidedEncryptionKey
    - description: Defaults to UTF-8.
      id: encoding
      type:
      - str
    return:
      description: A BlobClient to interact with the newly uploaded blob.
      type:
      - azure.storage.blob.aio.BlobClient
  type: method
  uid: azure.storage.blob.aio.ContainerClient.upload_blob
- class: azure.storage.blob.aio.ContainerClient
  fullName: azure.storage.blob.aio.ContainerClient.walk_blobs
  langs:
  - python
  module: azure.storage.blob.aio
  name: walk_blobs(name_starts_with=None, include=None, delimiter='/', **kwargs)
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service. This operation will list blobs in accordance with a hierarchy,

    as delimited by the specified delimiter character.'
  syntax:
    content: walk_blobs(name_starts_with=None, include=None, delimiter='/', **kwargs)
    parameters:
    - description: 'Filters the results to return only blobs whose names

        begin with the specified prefix.'
      id: name_starts_with
      type:
      - str
    - description: 'Specifies one or more additional datasets to include in the response.

        Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
        ''deleted''.'
      id: include
      type:
      - list[str]
    - description: 'When the request includes this parameter, the operation returns
        a BlobPrefix

        element in the response body that acts as a placeholder for all blobs whose

        names begin with the same substring up to the appearance of the delimiter

        character. The delimiter may be a single character or a string.'
      id: delimiter
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An iterable (auto-paging) response of BlobProperties.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.blob.BlobProperties]
  type: method
  uid: azure.storage.blob.aio.ContainerClient.walk_blobs
references:
- fullName: azure.storage.blob.aio.ContainerClient.acquire_lease
  isExternal: false
  name: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.acquire_lease
- fullName: azure.storage.blob.aio.ContainerClient.create_container
  isExternal: false
  name: create_container(metadata=None, public_access=None, **kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.create_container
- fullName: azure.storage.blob.aio.ContainerClient.delete_blob
  isExternal: false
  name: delete_blob(blob, delete_snapshots=None, **kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.delete_blob
- fullName: azure.storage.blob.aio.ContainerClient.delete_blobs
  isExternal: false
  name: 'delete_blobs(*blobs: typing.Union[str, azure.storage.blob.models.BlobProperties],
    delete_snapshots: typing.Union[str, NoneType] = None, lease: typing.Union[str,
    azure.storage.blob.aio.lease_async.LeaseClient, NoneType] = None, **kwargs) ->
    typing.AsyncIterator[azure.core.pipeline.transport.base_async.AsyncHttpResponse]'
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.delete_blobs
- fullName: azure.storage.blob.aio.ContainerClient.delete_container
  isExternal: false
  name: delete_container(**kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.delete_container
- fullName: azure.storage.blob.aio.ContainerClient.get_account_information
  isExternal: false
  name: get_account_information(**kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.get_account_information
- fullName: azure.storage.blob.aio.ContainerClient.get_blob_client
  isExternal: false
  name: get_blob_client(blob, snapshot=None)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.get_blob_client
- fullName: azure.storage.blob.aio.ContainerClient.get_container_access_policy
  isExternal: false
  name: get_container_access_policy(**kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.get_container_access_policy
- fullName: azure.storage.blob.aio.ContainerClient.get_container_properties
  isExternal: false
  name: get_container_properties(**kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.get_container_properties
- fullName: azure.storage.blob.aio.ContainerClient.list_blobs
  isExternal: false
  name: list_blobs(name_starts_with=None, include=None, **kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.list_blobs
- fullName: azure.storage.blob.aio.ContainerClient.set_container_access_policy
  isExternal: false
  name: set_container_access_policy(signed_identifiers=None, public_access=None, **kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.set_container_access_policy
- fullName: azure.storage.blob.aio.ContainerClient.set_container_metadata
  isExternal: false
  name: set_container_metadata(metadata=None, **kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.set_container_metadata
- fullName: azure.storage.blob.aio.ContainerClient.set_premium_page_blob_tier_blobs
  isExternal: false
  name: set_premium_page_blob_tier_blobs
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.set_premium_page_blob_tier_blobs
- fullName: azure.storage.blob.aio.ContainerClient.set_standard_blob_tier_blobs
  isExternal: false
  name: set_standard_blob_tier_blobs
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.set_standard_blob_tier_blobs
- fullName: azure.storage.blob.aio.ContainerClient.upload_blob
  isExternal: false
  name: 'upload_blob(name, data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>, length=None,
    metadata=None, encoding=''UTF-8'', **kwargs)'
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.upload_blob
- fullName: azure.storage.blob.aio.ContainerClient.walk_blobs
  isExternal: false
  name: walk_blobs(name_starts_with=None, include=None, delimiter='/', **kwargs)
  parent: azure.storage.blob.aio.ContainerClient
  uid: azure.storage.blob.aio.ContainerClient.walk_blobs
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: asynciterator[azure.core.pipeline.transport.AsyncHttpResponse]
  name: asynciterator[AsyncHttpResponse]
  spec.python:
  - fullName: asynciterator
    name: asynciterator
    uid: asynciterator
  - fullName: '['
    name: '['
  - fullName: azure.core.pipeline.transport.AsyncHttpResponse
    name: AsyncHttpResponse
    uid: azure.core.pipeline.transport.AsyncHttpResponse
  - fullName: ']'
    name: ']'
  uid: asynciterator[azure.core.pipeline.transport.AsyncHttpResponse]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.BlobProperties]
  name: AsyncItemPaged[BlobProperties]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.blob.BlobProperties
    name: BlobProperties
    uid: azure.storage.blob.BlobProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.BlobProperties]
- fullName: dict[str, azure.storage.blob.AccessPolicy]
  name: dict[str, AccessPolicy]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: azure.storage.blob.AccessPolicy
    name: AccessPolicy
    uid: azure.storage.blob.AccessPolicy
  - fullName: ']'
    name: ']'
  uid: dict[str, azure.storage.blob.AccessPolicy]
