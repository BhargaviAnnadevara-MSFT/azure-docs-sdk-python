### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.iot.device.aio.IoTHubDeviceClient.connect
  - azure.iot.device.aio.IoTHubDeviceClient.create_from_connection_string
  - azure.iot.device.aio.IoTHubDeviceClient.create_from_symmetric_key
  - azure.iot.device.aio.IoTHubDeviceClient.create_from_x509_certificate
  - azure.iot.device.aio.IoTHubDeviceClient.disconnect
  - azure.iot.device.aio.IoTHubDeviceClient.get_storage_info_for_blob
  - azure.iot.device.aio.IoTHubDeviceClient.get_twin
  - azure.iot.device.aio.IoTHubDeviceClient.notify_blob_upload_status
  - azure.iot.device.aio.IoTHubDeviceClient.patch_twin_reported_properties
  - azure.iot.device.aio.IoTHubDeviceClient.receive_message
  - azure.iot.device.aio.IoTHubDeviceClient.receive_method_request
  - azure.iot.device.aio.IoTHubDeviceClient.receive_twin_desired_properties_patch
  - azure.iot.device.aio.IoTHubDeviceClient.send_message
  - azure.iot.device.aio.IoTHubDeviceClient.send_method_response
  class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubClient
    type: azure.iot.device.iothub.aio.async_clients.GenericIoTHubClient
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubClient
    type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubDeviceClient
  langs:
  - python
  module: azure.iot.device.aio
  name: IoTHubDeviceClient
  source:
    id: IoTHubDeviceClient
    path: azure-iot-device\azure\iot\device\iothub\aio\async_clients.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\iothub\aio\async_clients.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 354
  summary: 'An asynchronous device client that connects to an Azure IoT Hub instance.


    Intended for usage with Python 3.5.3+'
  syntax:
    content: IoTHubDeviceClient(mqtt_pipeline, http_pipeline)
  type: class
  uid: azure.iot.device.aio.IoTHubDeviceClient
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.connect
  langs:
  - python
  module: azure.iot.device.aio
  name: connect()
  source:
    id: connect
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 13
  summary: 'Connects the client to an Azure IoT Hub or Azure IoT Edge Hub instance.


    The destination is chosen based on the credentials passed via the auth_provider
    parameter

    that was provided when this object was initialized.'
  syntax:
    content: connect()
    parameters: []
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.connect
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.create_from_connection_string
  langs:
  - python
  module: azure.iot.device.aio
  name: create_from_connection_string(connection_string, **kwargs)
  source:
    id: create_from_connection_string
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 87
  summary: Instantiate the client from a IoTHub device or module connection string.
  syntax:
    content: create_from_connection_string(connection_string, **kwargs)
    parameters:
    - description: The connection string for the IoTHub you wish to connect to.
      id: connection_string
      type:
      - str
    - description: 'Configuration Option. The trusted certificate chain.

        Necessary when using connecting to an endpoint which has a non-standard root
        of trust,

        such as a protocol gateway.'
      id: server_verification_cert
      type:
      - str
    - description: 'Configuration Option. Default is False. Set to true if using MQTT

        over websockets.'
      id: websockets
      type:
      - bool
    - description: 'Configuration Option. Cipher suite(s) for TLS/SSL, as a string
        in

        "OpenSSL cipher list format" or as a list of cipher suite strings.'
      id: cipher
      type:
      - str
      - list(str)
    - description: 'Configuration Option. Default is empty string. The string contains

        arbitrary product info which is appended to the user agent string.'
      id: product_info
      type:
      - str
    - description: Options for sending traffic through proxy servers.
      id: proxy_options
      type:
      - azure.iot.device.ProxyOptions
    return:
      description: An instance of an IoTHub client that uses a connection string for
        authentication.
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.create_from_connection_string
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.create_from_symmetric_key
  langs:
  - python
  module: azure.iot.device.aio
  name: create_from_symmetric_key(symmetric_key, hostname, device_id, **kwargs)
  source:
    id: create_from_symmetric_key
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 101
  summary: Instantiate a client using symmetric key authentication.
  syntax:
    content: create_from_symmetric_key(symmetric_key, hostname, device_id, **kwargs)
    parameters:
    - description: The symmetric key.
      id: symmetric_key
    - description: 'Host running the IotHub.

        Can be found in the Azure portal in the Overview tab as the string hostname.'
      id: hostname
      type:
      - str
    - description: The device ID
      id: device_id
    - description: 'Configuration Option. The trusted certificate chain.

        Necessary when using connecting to an endpoint which has a non-standard root
        of trust,

        such as a protocol gateway.'
      id: server_verification_cert
      type:
      - str
    - description: 'Configuration Option. Default is False. Set to true if using MQTT

        over websockets.'
      id: websockets
      type:
      - bool
    - description: 'Configuration Option. Cipher suite(s) for TLS/SSL, as a string
        in

        "OpenSSL cipher list format" or as a list of cipher suite strings.'
      id: cipher
      type:
      - str
      - list(str)
    - description: 'Configuration Option. Default is empty string. The string contains

        arbitrary product info which is appended to the user agent string.'
      id: product_info
      type:
      - str
    - description: Options for sending traffic through proxy servers.
      id: proxy_options
      type:
      - azure.iot.device.ProxyOptions
    return:
      description: An instance of an IoTHub client that uses a symmetric key for authentication.
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.create_from_symmetric_key
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.create_from_x509_certificate
  langs:
  - python
  module: azure.iot.device.aio
  name: create_from_x509_certificate(x509, hostname, device_id, **kwargs)
  source:
    id: create_from_x509_certificate
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 111
  summary: Instantiate a client which using X509 certificate authentication.
  syntax:
    content: create_from_x509_certificate(x509, hostname, device_id, **kwargs)
    parameters:
    - description: 'Host running the IotHub.

        Can be found in the Azure portal in the Overview tab as the string hostname.'
      id: hostname
      type:
      - str
    - description: 'The complete x509 certificate object.

        To use the certificate the enrollment object needs to contain cert

        (either the root certificate or one of the intermediate CA certificates).

        If the cert comes from a CER file, it needs to be base64 encoded.'
      id: x509
      type:
      - azure.iot.device.X509
    - description: The ID used to uniquely identify a device in the IoTHub
      id: device_id
      type:
      - str
    - description: 'Configuration Option. The trusted certificate chain.

        Necessary when using connecting to an endpoint which has a non-standard root
        of trust,

        such as a protocol gateway.'
      id: server_verification_cert
      type:
      - str
    - description: 'Configuration Option. Default is False. Set to true if using MQTT

        over websockets.'
      id: websockets
      type:
      - bool
    - description: 'Configuration Option. Cipher suite(s) for TLS/SSL, as a string
        in

        "OpenSSL cipher list format" or as a list of cipher suite strings.'
      id: cipher
      type:
      - str
      - list(str)
    - description: 'Configuration Option. Default is empty string. The string contains

        arbitrary product info which is appended to the user agent string.'
      id: product_info
      type:
      - str
    - description: Options for sending traffic through proxy servers.
      id: proxy_options
      type:
      - azure.iot.device.ProxyOptions
    return:
      description: An instance of an IoTHub client that uses an X509 certificate for
        authentication.
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.create_from_x509_certificate
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.disconnect
  langs:
  - python
  module: azure.iot.device.aio
  name: disconnect()
  source:
    id: disconnect
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 19
  summary: Disconnect the client from the Azure IoT Hub or Azure IoT Edge Hub instance.
  syntax:
    content: disconnect()
    parameters: []
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.disconnect
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.get_storage_info_for_blob
  langs:
  - python
  module: azure.iot.device.aio
  name: get_storage_info_for_blob(blob_name)
  source:
    id: get_storage_info_for_blob
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 25
  summary: Sends a POST request over HTTP to an IoTHub endpoint that will return information
    for uploading via the Azure Storage Account linked to the IoTHub your device is
    connected to.
  syntax:
    content: get_storage_info_for_blob(blob_name)
    parameters:
    - description: The name in string format of the blob that will be uploaded using
        the storage API. This name will be used to generate the proper credentials
        for Storage, and needs to match what will be used with the Azure Storage SDK
        to perform the blob upload.
      id: blob_name
      type:
      - str
    return:
      description: 'A JSON-like (dictionary) object from IoT Hub that will contain
        relevant information including: correlationId, hostName, containerName, blobName,
        sasToken.'
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.get_storage_info_for_blob
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.get_twin
  langs:
  - python
  module: azure.iot.device.aio
  name: get_twin()
  source:
    id: get_twin
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 31
  summary: Gets the device or module twin from the Azure IoT Hub or Azure IoT Edge
    Hub service.
  syntax:
    content: get_twin()
    parameters: []
    return:
      description: Complete Twin as a JSON dict
      type:
      - dict
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.get_twin
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.notify_blob_upload_status
  langs:
  - python
  module: azure.iot.device.aio
  name: notify_blob_upload_status(correlation_id, is_success, status_code, status_description)
  source:
    id: notify_blob_upload_status
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 37
  summary: When the upload is complete, the device sends a POST request to the IoT
    Hub endpoint with information on the status of an upload to blob attempt. This
    is used by IoT Hub to notify listening clients.
  syntax:
    content: notify_blob_upload_status(correlation_id, is_success, status_code, status_description)
    parameters:
    - description: Provided by IoT Hub on get_storage_info_for_blob request.
      id: correlation_id
      type:
      - str
    - description: A boolean that indicates whether the file was uploaded successfully.
      id: is_success
      type:
      - bool
    - description: A numeric status code that is the status for the upload of the
        fiel to storage.
      id: status_code
      type:
      - int
    - description: A description that corresponds to the status_code.
      id: status_description
      type:
      - str
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.notify_blob_upload_status
- class: azure.iot.device.aio.IoTHubDeviceClient
  exceptions:
  - type: azure.iot.device.exceptions.CredentialError
  - type: azure.iot.device.exceptions.ConnectionFailedError
  - type: azure.iot.device.exceptions.ConnectionDroppedError
  - type: azure.iot.device.exceptions.ClientError
  fullName: azure.iot.device.aio.IoTHubDeviceClient.patch_twin_reported_properties
  langs:
  - python
  module: azure.iot.device.aio
  name: patch_twin_reported_properties(reported_properties_patch)
  source:
    id: patch_twin_reported_properties
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 47
  summary: 'Update reported properties with the Azure IoT Hub or Azure IoT Edge Hub
    service.


    If the service returns an error on the patch operation, this function will raise
    the

    appropriate error.'
  syntax:
    content: patch_twin_reported_properties(reported_properties_patch)
    parameters:
    - description: Twin Reported Properties patch as a JSON dict
      id: reported_properties_patch
      type:
      - dict
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.patch_twin_reported_properties
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.receive_message
  langs:
  - python
  module: azure.iot.device.aio
  name: receive_message()
  source:
    id: receive_message
    path: azure-iot-device\azure\iot\device\iothub\aio\async_clients.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\iothub\aio\async_clients.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 372
  summary: 'Receive a message that has been sent from the Azure IoT Hub.


    If no message is yet available, will wait until an item is available.'
  syntax:
    content: receive_message()
    parameters: []
    return:
      description: Message that was sent from the Azure IoT Hub.
      type:
      - azure.iot.device.Message
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.receive_message
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.receive_method_request
  langs:
  - python
  module: azure.iot.device.aio
  name: receive_method_request(method_name=None)
  source:
    id: receive_method_request
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 57
  summary: 'Receive a method request via the Azure IoT Hub or Azure IoT Edge Hub.


    If no method request is yet available, will wait until it is available.'
  syntax:
    content: receive_method_request(method_name=None)
    parameters:
    - defaultValue: None
      description: 'Optionally provide the name of the method to receive requests
        for.

        If this parameter is not given, all methods not already being specifically
        targeted by

        a different call to receive_method will be received.'
      id: method_name
      type:
      - str
    return:
      description: MethodRequest object representing the received method request.
      type:
      - '*azure.iot.device.MethodRequest*'
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.receive_method_request
- class: azure.iot.device.aio.IoTHubDeviceClient
  fullName: azure.iot.device.aio.IoTHubDeviceClient.receive_twin_desired_properties_patch
  langs:
  - python
  module: azure.iot.device.aio
  name: receive_twin_desired_properties_patch()
  source:
    id: receive_twin_desired_properties_patch
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 63
  summary: 'Receive a desired property patch via the Azure IoT Hub or Azure IoT Edge
    Hub.


    If no method request is yet available, will wait until it is available.'
  syntax:
    content: receive_twin_desired_properties_patch()
    parameters: []
    return:
      description: Twin Desired Properties patch as a JSON dict
      type:
      - dict
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.receive_twin_desired_properties_patch
- class: azure.iot.device.aio.IoTHubDeviceClient
  exceptions:
  - type: azure.iot.device.exceptions.CredentialError
  - type: azure.iot.device.exceptions.ConnectionFailedError
  - type: azure.iot.device.exceptions.ConnectionDroppedError
  - type: azure.iot.device.exceptions.ClientError
  fullName: azure.iot.device.aio.IoTHubDeviceClient.send_message
  langs:
  - python
  module: azure.iot.device.aio
  name: send_message(message)
  source:
    id: send_message
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 75
  summary: 'Sends a message to the default events endpoint on the Azure IoT Hub or
    Azure IoT Edge Hub instance.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_message(message)
    parameters:
    - description: 'The actual message to send. Anything passed that is not an instance
        of the

        Message class will be converted to Message object.'
      id: message
      type:
      - azure.iot.device.Message
      - str
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.send_message
- class: azure.iot.device.aio.IoTHubDeviceClient
  exceptions:
  - type: azure.iot.device.exceptions.CredentialError
  - type: azure.iot.device.exceptions.ConnectionFailedError
  - type: azure.iot.device.exceptions.ConnectionDroppedError
  - type: azure.iot.device.exceptions.ClientError
  fullName: azure.iot.device.aio.IoTHubDeviceClient.send_method_response
  langs:
  - python
  module: azure.iot.device.aio
  name: send_method_response(method_response)
  source:
    id: send_method_response
    path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
    remote:
      branch: master
      path: azure-iot-device\azure\iot\device\aio\patch_documentation.py
      repo: https://github.com/Azure/azure-iot-sdk-python
    startLine: 81
  summary: 'Send a response to a method request via the Azure IoT Hub or Azure IoT
    Edge Hub.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_method_response(method_response)
    parameters:
    - description: The MethodResponse to send
      id: method_response
      type:
      - azure.iot.device.MethodResponse
  type: method
  uid: azure.iot.device.aio.IoTHubDeviceClient.send_method_response
references:
- fullName: azure.iot.device.aio.IoTHubDeviceClient.connect
  isExternal: false
  name: connect()
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.connect
- fullName: azure.iot.device.aio.IoTHubDeviceClient.create_from_connection_string
  isExternal: false
  name: create_from_connection_string(connection_string, **kwargs)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.create_from_connection_string
- fullName: azure.iot.device.aio.IoTHubDeviceClient.create_from_symmetric_key
  isExternal: false
  name: create_from_symmetric_key(symmetric_key, hostname, device_id, **kwargs)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.create_from_symmetric_key
- fullName: azure.iot.device.aio.IoTHubDeviceClient.create_from_x509_certificate
  isExternal: false
  name: create_from_x509_certificate(x509, hostname, device_id, **kwargs)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.create_from_x509_certificate
- fullName: azure.iot.device.aio.IoTHubDeviceClient.disconnect
  isExternal: false
  name: disconnect()
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.disconnect
- fullName: azure.iot.device.aio.IoTHubDeviceClient.get_storage_info_for_blob
  isExternal: false
  name: get_storage_info_for_blob(blob_name)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.get_storage_info_for_blob
- fullName: azure.iot.device.aio.IoTHubDeviceClient.get_twin
  isExternal: false
  name: get_twin()
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.get_twin
- fullName: azure.iot.device.aio.IoTHubDeviceClient.notify_blob_upload_status
  isExternal: false
  name: notify_blob_upload_status(correlation_id, is_success, status_code, status_description)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.notify_blob_upload_status
- fullName: azure.iot.device.aio.IoTHubDeviceClient.patch_twin_reported_properties
  isExternal: false
  name: patch_twin_reported_properties(reported_properties_patch)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.patch_twin_reported_properties
- fullName: azure.iot.device.aio.IoTHubDeviceClient.receive_message
  isExternal: false
  name: receive_message()
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.receive_message
- fullName: azure.iot.device.aio.IoTHubDeviceClient.receive_method_request
  isExternal: false
  name: receive_method_request(method_name=None)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.receive_method_request
- fullName: azure.iot.device.aio.IoTHubDeviceClient.receive_twin_desired_properties_patch
  isExternal: false
  name: receive_twin_desired_properties_patch()
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.receive_twin_desired_properties_patch
- fullName: azure.iot.device.aio.IoTHubDeviceClient.send_message
  isExternal: false
  name: send_message(message)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.send_message
- fullName: azure.iot.device.aio.IoTHubDeviceClient.send_method_response
  isExternal: false
  name: send_method_response(method_response)
  parent: azure.iot.device.aio.IoTHubDeviceClient
  uid: azure.iot.device.aio.IoTHubDeviceClient.send_method_response
- fullName: list(str)
  name: list(str)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: list(str)
